{
  "custom": {
    "allUsersFromCongregationProfile": {
      "Test Congregation": "test_congregation"
    },
    "currentSeason": "Unknown",
    "emailText": "",
    "isEnableEmail": true
  },
  "params": {
    "newPassword": "value",
    "selectedCongregations": [
      {
        "congregationCity": "Nashville",
        "congregationId": 109,
        "congregationName": "Belle Meade United Methodist Church",
        "congregationPhone": "(901)338-3772",
        "congregationState": "TN",
        "congregationZipCode": 37205,
        "hostingSince": "1991-1992",
        "leader": "Sam McGlothlin",
        "notes": null,
        "options": "",
        "providerId": 109
      },
      {
        "congregationCity": "Nashville",
        "congregationId": 217,
        "congregationName": "Bellevue Presbyterian Church",
        "congregationPhone": "(615)646-1667",
        "congregationState": "TN",
        "congregationZipCode": 37221,
        "hostingSince": "1990-1991",
        "leader": "Tracey Hunt - Missions Team Leader",
        "notes": null,
        "options": "",
        "providerId": 217
      }
    ]
  },
  "propConfig": {
    "custom.allUsersFromCongregationProfile": {
      "binding": {
        "config": {
          "path": "view.params.selectedCongregations"
        },
        "transforms": [
          {
            "code": "\tusersDict \u003d {}\n\tusers \u003d system.user.getUsers(\u0027congregation\u0027)\n\tfor user in users:\n\t\tfirstName \u003d user.get(\u0027firstname\u0027)\n\t\tuserName \u003d user.get(\u0027username\u0027)\n\t\tif firstName is not None and firstName !\u003d \"\":\n\t\t\tfirstName \u003d firstName.strip()\n\t\t\tusersDict[firstName] \u003d userName\n\treturn usersDict",
            "type": "script"
          }
        ],
        "type": "property"
      },
      "persistent": true
    },
    "custom.currentSeason": {
      "binding": {
        "config": {
          "queryPath": "WinterShelterGlobal/getCurrentSeason"
        },
        "transforms": [
          {
            "code": "\tif value is not None and value.getRowCount() \u003e 0:\n\t\treturn value.getValueAt(0,\u0027Seasons\u0027)\n\telse:\n\t\treturn \u0027Unknown\u0027",
            "type": "script"
          }
        ],
        "type": "query"
      },
      "persistent": true
    },
    "custom.emailText": {
      "binding": {
        "config": {
          "expression": "True"
        },
        "transforms": [
          {
            "code": "\t# get email text\n\temailText \u003d \"\"\n\tgetEmailText \u003d system.db.runPrepQuery(\"SELECT id, settingName, settingValue FROM shelter.Settings WHERE timeRetired is NULL AND settingName \u003d \u0027PortalAccessEmail_Text\u0027\")\n\t\n\tif getEmailText is not None and getEmailText.getRowCount() \u003e 0:\n\t\temailText \u003d  getEmailText.getValueAt(0,\u0027settingValue\u0027)\n\treturn emailText",
            "type": "script"
          }
        ],
        "type": "expr"
      },
      "persistent": true
    },
    "custom.isEnableEmail": {
      "binding": {
        "config": {
          "expression": "True"
        },
        "transforms": [
          {
            "code": "\t# get email text\n\tisEnableEmail \u003d True\n\tgetIsEnableEvent \u003d system.db.runPrepQuery(\"SELECT id, settingName, settingValue FROM shelter.Settings WHERE timeRetired is NULL AND settingName \u003d \u0027PortalAccessEmail_Enable\u0027\")\n\tif getIsEnableEvent is not None and getIsEnableEvent.getRowCount() \u003e 0:\n\t\tisEnableEmail \u003d  getIsEnableEvent.getValueAt(0,\u0027settingValue\u0027)\n\treturn isEnableEmail",
            "type": "script"
          }
        ],
        "type": "expr"
      },
      "persistent": true
    },
    "params.newPassword": {
      "paramDirection": "output",
      "persistent": true
    },
    "params.selectedCongregations": {
      "paramDirection": "input",
      "persistent": true
    }
  },
  "props": {
    "defaultSize": {
      "height": 460,
      "width": 774
    }
  },
  "root": {
    "children": [
      {
        "meta": {
          "name": "EmbeddedView Row1"
        },
        "position": {
          "shrink": 0
        },
        "props": {
          "params": {
            "newPassword": ""
          },
          "path": "Settings/Congregations/Dashboard/Popup/Cards/Edit/Row1",
          "style": {
            "classes": "InputCards/Card"
          }
        },
        "type": "ia.display.view"
      },
      {
        "children": [
          {
            "events": {
              "component": {
                "onActionPerformed": {
                  "config": {
                    "script": "\tsystem.perspective.sendMessage(\"clearCongregationsBulkUpdateList\", scope\u003d\u0027page\u0027)\n\t"
                  },
                  "scope": "G",
                  "type": "script"
                }
              }
            },
            "meta": {
              "name": "button_clear"
            },
            "position": {
              "basis": "120px",
              "shrink": 0
            },
            "props": {
              "style": {
                "classes": "Buttons/Secondary",
                "marginBottom": "5px",
                "marginLeft": "40px",
                "marginTop": "5px"
              },
              "text": "Clear"
            },
            "type": "ia.input.button"
          },
          {
            "events": {
              "component": {
                "onActionPerformed": {
                  "config": {
                    "script": "\timport traceback\n\tfrom com.inductiveautomation.ignition.common.user import ContactInfo\n\timport base64\n\tfrom com.inductiveautomation.ignition.gateway import IgnitionGateway\n\tfrom com.inductiveautomation.ignition.gateway.images import ImageRecord\n\tlogger \u003d system.util.getLogger(\u0027BulkEmailLogs\u0027)\n\tnewPassword \u003d self.parent.parent.getChild(\"EmbeddedView Row1\").props.params.newPassword\n\tvalid \u003d True\n\terrorMsg \u003d \"\"\n\tcongregationsToUpdate \u003d self.view.params.selectedCongregations\n\tif newPassword \u003d\u003d \"\":\n\t\tvalid \u003d False\n\t\terrorMsg \u003d \"Ensure you have entered passwords correctly and password is not Empty.\"\n\t\t\n\tif congregationsToUpdate \u003d\u003d None or len(congregationsToUpdate) \u003d\u003d 0:\n\t\tvalid \u003d False\n\t\terrorMsg \u003d \"Select at least one Congregation.\"\n\t\t\n\t\n\ttry:\n\t\tself.props.enabled \u003d False\n\t\tself.view.getChild(\"root\").props.style.cursor \u003d \u0027wait\u0027\n\t\tif valid:\n\t\t\t\n\t\t\tselectedCongregations \u003d self.view.params.selectedCongregations\n\t\t\tcongregationsNotNotified \u003d []\n\t\t\tfor oneCongregation in selectedCongregations:\n\t\t\t\tcongName \u003d oneCongregation.congregationName\n\t\t\t\tif congName is not None and congName !\u003d \"\":\n\t\t\t\t\tcongName \u003d congName.strip()\n\t\t\t\t\tif congName in self.view.custom.allUsersFromCongregationProfile: ## username for cong exists\n\t\t\t\t\t\tuserName \u003d self.view.custom.allUsersFromCongregationProfile[congName]\n\t\t\t\t\t\tuser \u003d system.user.getUser(\u0027congregation\u0027,userName)\n\t\t\t\t\t\tcontactInfo \u003d user.getContactInfo()\n\t\t\t\t\t\temail \u003d \u0027\u0027\n\t\t\t\t\t\tfor item in contactInfo:\n\t\t\t\t\t\t\t# Check if a matching email exists\n\t\t\t\t\t\t\tif item.getContactType() \u003d\u003d \u0027email\u0027:\n\t\t\t\t\t\t\t\temail \u003d item.getValue()\n\t\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t\n\t\t\t\t\t\tif email !\u003d \u0027\u0027 and \u0027@\u0027 in email: ## email exists and has valid format\n\t\t\t\t\t\t\t## reset user password \n\t\t\t\t\t\t\tuser.set(\u0027password\u0027, newPassword)\n\t\t\t\t\t\t\t# Save user with new password in Gateway User profile\n\t\t\t\t\t\t\tsystem.user.editUser(\u0027congregation\u0027, user)\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t## send the email\n\t\t\t\t\t\t\tif self.view.custom.isEnableEmail \u003d\u003d \u0027true\u0027:\t\t\t\t\n\t\t\t\t\t\t\t\t#Email Winter Shelter link, username and passwords to coordinator\n\n\t\t\t\t\t\t\t\tlink \u003d \"Winter Shelter Portal link\"\n\t\t\t\t\t\t\t\tfromAddress \u003d \"test@test.org\"\n\t\t\t\t\t\t\t\ttoAddress \u003d [email]\n\t\t\t\t\t\t\t\tsubject \u003d \u0027Homeless Management System: Winter Shelter Registration Username and Link\u0027\n\t\t\t\t\t\t\t\t#read image as byte and then convert it into base64\n\t\t\t\t\t\t\t\tcontext \u003d IgnitionGateway.get()\n\t\t\t\t\t\t\t\timageManager \u003d context.getImageManager()\t\t\n\t\t\t\t\t\t\t\timageData \u003d imageManager.getImage(\"57d71ebcee482b3b107972d5_room_in_the_inn_logo.png\")\n\t\t\t\t\t\t\t\tRITI_Logo \u003d imageData.getBytes(ImageRecord.Data)\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tRITI_Logo_Base64 \u003d base64.b64encode(RITI_Logo)\n\t\t\t\t\t\t\t\t# replace parameter with original value\n\t\t\t\t\t\t\t\temailText \u003d self.view.custom.emailText\n\t\t\t\t\t\t\t\temailText \u003d emailText.replace(\u0027@season\u0027,self.view.custom.currentSeason)\n\t\t\t\t\t\t\t\temailText \u003d emailText.replace(\u0027@congregationName\u0027,congName)\n\t\t\t\t\t\t\t\temailText \u003d emailText.replace(\u0027@username\u0027,userName)\n\t\t\t\t\t\t\t\temailText \u003d emailText.replace(\u0027@password\u0027,newPassword)\n\t\t\t\t\t\t\t\temailTextFormated \u003d self.emailText_to_htmlFormat(emailText)\n\t\t\t\t\t\t\t\t## add logo in email\n\t\t\t\t\t\t\t\temailTextFormated \u003d emailTextFormated + \"\u003cbr\u003e\u003cbr\u003e\"\n\t\t\t\t\t\t\t\temailTextFormated \u003d emailTextFormated + \u0027\u003cimg src\u003d\"data:image/png;base64,\u0027+ str(RITI_Logo_Base64) +\u0027\" alt\u003d\"RITI_Logo\" width\u003d\"140\" height\u003d\"35\" /\u003e\u0027\n\t\t\t\t\t\t\t\temailTextFormated \u003d emailTextFormated + \"\u003c/BODY\u003e\u003c/HTML\u003e\"\n\t\t\t\t\t\t\t\tbody \u003d emailTextFormated\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tsmtpProfile \u003d \u0027roomintheinn.org\u0027\n\t\t\t\t\t\t\t\tsystem.net.sendEmail(smtpProfile \u003d smtpProfile, fromAddr \u003d fromAddress, subject \u003d subject, body \u003d body, to \u003d toAddress,html\u003d1)\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t## also add to the congregation log\n\t\t\t\t\t\t\t\tproject \u003d \"HMS\"\n\t\t\t\t\t\t\t\tpath \u003d \"WinterShelterGlobal/Registration/InsertCongregationLog\"\n\t\t\t\t\t\t\t\tlocationId \u003d oneCongregation.congregationId\n\t\t\t\t\t\t\t\tparameters \u003d {\"locationId\":locationId, \"actionBy\":self.session.custom.loggedInStaffEmployeeID, \"action\":\"Edit Congregation\", \"actionFields\":\"Password\", \"userName\":self.session.props.auth.user.userName}\n\t\t\t\t\t\t\t\tsystem.db.runNamedQuery(project\u003dproject,path\u003dpath,parameters\u003dparameters)\n\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tlogger.info(\u0027Subject: \u0027 + subject + \u0027 \\nTo: \u0027 + email)\n\t\t\t\t\t\telse:\n\t\t\t\t\t\t\tcongregationsNotNotified.append(congName)\n\t\t\t\t\telse:\n\t\t\t\t\t\tcongregationsNotNotified.append(congName)\n\t\t\t\n\t\t\tif len(congregationsNotNotified) \u003e 0:\n\t\t\t\tmsg \u003d \u0027Congregations : \u0027 + \",\".join(congregationsNotNotified) + \u0027 were not notified as username or email did not exist\u0027\n\t\t\t\tself.getSibling(\"Label\").showMessage(msg)\n\t\t\t\tlogger.error(msg)\n\t\t\telse:\n\t\t\t\tself.getSibling(\"Label\").showMessage(\"All selected congregations have been notified.\")\n\t\t\t\n\t\t\t## clear the view\n\t\t\t\n\t\t\tsystem.perspective.sendMessage(\"clearCongregationsBulkUpdateList\", scope\u003d\u0027page\u0027)\n\t\telse:\n\t\t\tself.getSibling(\"Label\").showMessage(errorMsg)\n\texcept:\n\t\t\n\t\tmsg \u003d traceback.format_exc()\n\t\tlogger.error(msg)\n\t\tself.getSibling(\"Label\").showMessage(msg)\n\tfinally:\n\t\tself.props.enabled \u003d True\n\t\tself.view.getChild(\"root\").props.style.cursor \u003d \u0027auto\u0027\n\n\t\t\t\t\t\n\t\n\t\t\n\t\n\t"
                  },
                  "scope": "G",
                  "type": "script"
                }
              }
            },
            "meta": {
              "name": "button_resetPwd"
            },
            "position": {
              "basis": "120px",
              "shrink": 0
            },
            "props": {
              "style": {
                "classes": "Buttons/Main",
                "marginBottom": "5px",
                "marginLeft": "10px",
                "marginTop": "5px"
              },
              "text": "Reset Password"
            },
            "scripts": {
              "customMethods": [
                {
                  "name": "emailText_to_htmlFormat",
                  "params": [
                    "emailText"
                  ],
                  "script": "\timport re\n\t# replace apostrope sign with single quote\n\temailText \u003d emailText.replace(\"’\",\"\u0027\")\n\t# replace long dash with single dash\n\temailText \u003d emailText.replace(\"–\",\"-\")\n\t# convert link to html format (if \u003c\u003e found)\n\tpattern \u003d \"\u003c[A-Za-z0-9-–@,.!?:\\s/\u0027]*\u003e\"\n\tmatches \u003d re.findall(pattern, emailText)\n\tif len(matches)\u003e0:\n\t\tfor oneMatch in matches:\n\t\t\toneMatchWithoutSymbol \u003d oneMatch[1:-1]\n\t\t\t## check if match is email then add mailto: before email in href\n\t\t\tif (\u0027@\u0027 in oneMatchWithoutSymbol) and (\u0027.\u0027 in oneMatchWithoutSymbol):\n\t\t\t\toneMatchFormated \u003d \u0027\u003ca href \u003d\"mailto:\u0027 +oneMatchWithoutSymbol + \u0027\"\u003e\u0027 + oneMatchWithoutSymbol + \u0027\u003c/a\u003e\u0027\n\t\t\telse:\n\t\t\t\toneMatchFormated \u003d \u0027\u003ca href \u003d\"\u0027 +oneMatchWithoutSymbol + \u0027\"\u003e\u0027 + oneMatchWithoutSymbol + \u0027\u003c/a\u003e\u0027\n\t\t\temailText \u003d emailText.replace(oneMatch,oneMatchFormated)\n\t# add bold text as required (if # found)\n\tpattern \u003d \"#[A-Za-z0-9-–@,.!?:\\s\u0027]*#\"\n\tmatches \u003d re.findall(pattern, emailText)\n\tif len(matches)\u003e0:\n\t\tfor oneMatch in matches:\n\t\t\toneMatchWithoutSymbol \u003d oneMatch[1:-1]\n\t\t\toneMatchFormated \u003d \u0027\u003cb\u003e\u0027 +oneMatchWithoutSymbol + \u0027\u003c/b\u003e\u0027\n\t\t\temailText \u003d emailText.replace(oneMatch,oneMatchFormated)\n\t# convert newline in python to break(\u003cbr\u003e tag) in html\n\temailText \u003d emailText.replace(\u0027\\n\u0027,\u0027\u003cbr\u003e\u0027)\n\temailText \u003d emailText.replace(\u0027\u003cbr\u003e-\u0027,\u0027\u003cbr\u003e\u0026emsp;-\u0027)\n\t## convert text to html format\n\temailTextFormated \u003d \"\u003cHTML\u003e\u003cBODY\u003e\"\n\temailTextFormated \u003d emailTextFormated + emailText\n#\t\temailTextFormated \u003d emailTextFormated + \"\u003c/BODY\u003e\u003c/HTML\u003e\"\n#\t\tsystem.perspective.print(emailTextFormated)\n\treturn emailTextFormated"
                }
              ],
              "extensionFunctions": null,
              "messageHandlers": []
            },
            "type": "ia.input.button"
          },
          {
            "meta": {
              "name": "Label",
              "visible": false
            },
            "position": {
              "basis": "50px",
              "grow": 1
            },
            "props": {
              "style": {
                "classes": "Text/Error_Message"
              },
              "text": "Please fill in all the fields correctly before saving."
            },
            "scripts": {
              "customMethods": [
                {
                  "name": "showMessage",
                  "params": [
                    "message"
                  ],
                  "script": "\timport time\n\tself.props.text \u003d message\n\tself.meta.visible \u003d True\n\ttime.sleep(5)\n\tself.meta.visible \u003d False\n\t"
                }
              ],
              "extensionFunctions": null,
              "messageHandlers": []
            },
            "type": "ia.display.label"
          }
        ],
        "meta": {
          "name": "root Actions"
        },
        "position": {
          "basis": "50px",
          "shrink": 0
        },
        "props": {
          "style": {
            "borderTopColor": "#9db8d1",
            "borderTopStyle": "solid",
            "borderTopWidth": "1px",
            "classes": "Background/Default",
            "marginTop": "5px",
            "paddingTop": "5px"
          }
        },
        "type": "ia.container.flex"
      },
      {
        "meta": {
          "name": "Label"
        },
        "position": {
          "basis": "25px",
          "display": false,
          "shrink": 0
        },
        "propConfig": {
          "props.text": {
            "binding": {
              "config": {
                "path": "view.params.row_data"
              },
              "type": "property"
            }
          }
        },
        "props": {
          "style": {
            "classes": "Text/Error_Message"
          }
        },
        "type": "ia.display.label"
      }
    ],
    "meta": {
      "name": "root"
    },
    "props": {
      "direction": "column",
      "style": {
        "classes": "Background/Default"
      }
    },
    "type": "ia.container.flex"
  }
}