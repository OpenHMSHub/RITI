{
  "custom": {
    "locationId": -1,
    "password": "",
    "password2": ""
  },
  "params": {
    "congregationName": "",
    "email": "",
    "username": ""
  },
  "propConfig": {
    "custom.locationId": {
      "binding": {
        "config": {
          "parameters": {
            "name": "{view.params.congregationName}"
          },
          "queryPath": "Settings/Congregations/GetLocationIdFromName"
        },
        "transforms": [
          {
            "code": "\tif value is not None and value.getRowCount() \u003e 0:\n\t\treturn value.getValueAt(0,\u0027locationId\u0027)\n\telse:\n\t\treturn -1",
            "type": "script"
          }
        ],
        "type": "query"
      },
      "persistent": true
    },
    "custom.password": {
      "persistent": true
    },
    "custom.password2": {
      "persistent": true
    },
    "params.congregationName": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.email": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.username": {
      "paramDirection": "input",
      "persistent": true
    }
  },
  "props": {
    "defaultSize": {
      "width": 600
    }
  },
  "root": {
    "children": [
      {
        "meta": {
          "name": "Header"
        },
        "position": {
          "shrink": 0
        },
        "props": {
          "params": {
            "dockName": "resetCongregationPassword",
            "messageName": null,
            "text": "Winter Shelter Reset Password"
          },
          "path": "1_TEMPLATES/Header/HeaderDock",
          "style": {
            "marginLeft": "-50px",
            "marginRight": "-50px"
          },
          "useDefaultViewHeight": true
        },
        "type": "ia.display.view"
      },
      {
        "meta": {
          "name": "username"
        },
        "position": {
          "basis": "55px",
          "shrink": 0
        },
        "propConfig": {
          "props.params.inputText": {
            "binding": {
              "config": {
                "path": "view.params.username"
              },
              "type": "property"
            }
          }
        },
        "props": {
          "params": {
            "hasHeader": true,
            "placeHolder": "Username",
            "requiredField": false,
            "text": "Username"
          },
          "path": "WinterShelterGlobal/Registration/Cards/TextInputReadOnly",
          "style": {
            "marginTop": "20px"
          }
        },
        "type": "ia.display.view"
      },
      {
        "meta": {
          "name": "congregationName"
        },
        "position": {
          "basis": "55px",
          "shrink": 0
        },
        "propConfig": {
          "props.params.inputText": {
            "binding": {
              "config": {
                "bidirectional": true,
                "path": "view.params.congregationName"
              },
              "type": "property"
            }
          }
        },
        "props": {
          "params": {
            "hasHeader": true,
            "placeHolder": "Congregation Name",
            "requiredField": false,
            "text": "Congregation Name"
          },
          "path": "WinterShelterGlobal/Registration/Cards/TextInputReadOnly",
          "style": {
            "marginTop": "20px"
          }
        },
        "type": "ia.display.view"
      },
      {
        "meta": {
          "name": "email"
        },
        "position": {
          "basis": "55px",
          "shrink": 0
        },
        "propConfig": {
          "props.params.inputText": {
            "binding": {
              "config": {
                "bidirectional": true,
                "path": "view.params.email"
              },
              "type": "property"
            }
          }
        },
        "props": {
          "params": {
            "hasHeader": true,
            "placeHolder": "email@email.com",
            "requiredField": true,
            "text": "Primary Coordinator Email"
          },
          "path": "WinterShelterGlobal/Registration/Cards/TextInput",
          "style": {
            "marginTop": "20px"
          }
        },
        "type": "ia.display.view"
      },
      {
        "children": [
          {
            "meta": {
              "name": "Label"
            },
            "position": {
              "shrink": 0
            },
            "props": {
              "style": {
                "classes": "Text/Add_HeaderText"
              },
              "text": "Password"
            },
            "type": "ia.display.label"
          },
          {
            "meta": {
              "name": "Label_0"
            },
            "position": {
              "basis": "10px",
              "shrink": 0
            },
            "props": {
              "style": {
                "color": "#D80000"
              },
              "text": "*"
            },
            "type": "ia.display.label"
          }
        ],
        "meta": {
          "name": "Password"
        },
        "position": {
          "basis": "25px",
          "shrink": 0
        },
        "props": {
          "style": {
            "marginTop": "20px"
          }
        },
        "type": "ia.container.flex"
      },
      {
        "meta": {
          "name": "PasswordField"
        },
        "position": {
          "basis": "32px"
        },
        "propConfig": {
          "props.text": {
            "binding": {
              "config": {
                "bidirectional": true,
                "path": "view.custom.password"
              },
              "type": "property"
            }
          }
        },
        "props": {
          "style": {
            "classes": "Text/Add_TextFieldWhite",
            "marginBottom": "0px"
          }
        },
        "type": "ia.input.password-field"
      },
      {
        "children": [
          {
            "meta": {
              "name": "Label"
            },
            "position": {
              "shrink": 0
            },
            "props": {
              "style": {
                "classes": "Text/Add_HeaderText"
              },
              "text": "Confirm Password"
            },
            "type": "ia.display.label"
          },
          {
            "meta": {
              "name": "Label_0"
            },
            "position": {
              "shrink": 0
            },
            "propConfig": {
              "props.text": {
                "binding": {
                  "config": {
                    "expression": "if ({view.custom.password2}\u003d\u0027\u0027\r\n\t, \u0027*\u0027\r\n\t,if({view.custom.password} \u003d {view.custom.password2}, \u0027*\u0027, \u0027* Passwords must match\u0027))"
                  },
                  "type": "expr"
                }
              }
            },
            "props": {
              "style": {
                "color": "#D80000",
                "fontSize": "14px"
              }
            },
            "type": "ia.display.label"
          }
        ],
        "meta": {
          "name": "PasswordConfirm"
        },
        "position": {
          "basis": "25px",
          "shrink": 0
        },
        "props": {
          "style": {
            "marginTop": "20px"
          }
        },
        "type": "ia.container.flex"
      },
      {
        "meta": {
          "name": "PasswordFieldConfirm"
        },
        "position": {
          "basis": "32px"
        },
        "propConfig": {
          "props.text": {
            "binding": {
              "config": {
                "bidirectional": true,
                "path": "view.custom.password2"
              },
              "type": "property"
            }
          }
        },
        "props": {
          "style": {
            "classes": "Text/Add_TextFieldWhite",
            "marginBottom": "0px"
          }
        },
        "type": "ia.input.password-field"
      },
      {
        "children": [
          {
            "meta": {
              "name": "ResetButtonDisabled"
            },
            "position": {
              "basis": "100px"
            },
            "propConfig": {
              "position.display": {
                "binding": {
                  "config": {
                    "path": "parent.custom.valid"
                  },
                  "transforms": [
                    {
                      "code": "\treturn not value",
                      "type": "script"
                    }
                  ],
                  "type": "property"
                }
              }
            },
            "props": {
              "style": {
                "classes": "Buttons/Disabled",
                "marginRight": "30px"
              },
              "text": "Reset Password"
            },
            "type": "ia.input.button"
          },
          {
            "events": {
              "component": {
                "onActionPerformed": {
                  "config": {
                    "script": "\timport traceback\n\tfrom com.inductiveautomation.ignition.common.user import ContactInfo\n\timport base64\n\tfrom com.inductiveautomation.ignition.gateway import IgnitionGateway\n\tfrom com.inductiveautomation.ignition.gateway.images import ImageRecord\n\t\n\t## function to format email text\n\tdef emailText_to_htmlFormat(emailText):\n\t\timport re\n\t\t# replace apostrope sign with single quote\n\t\temailText \u003d emailText.replace(\"’\",\"\u0027\")\n\t\t# replace long dash with single dash\n\t\temailText \u003d emailText.replace(\"–\",\"-\")\n\t\t# convert link to html format (if \u003c\u003e found)\n\t\tpattern \u003d \"\u003c[A-Za-z0-9-–@,.!?:\\s/\u0027]*\u003e\"\n\t\tmatches \u003d re.findall(pattern, emailText)\n\t\tif len(matches)\u003e0:\n\t\t\tfor oneMatch in matches:\n\t\t\t\toneMatchWithoutSymbol \u003d oneMatch[1:-1]\n\t\t\t\t## check if match is email then add mailto: before email in href\n\t\t\t\tif (\u0027@\u0027 in oneMatchWithoutSymbol) and (\u0027.\u0027 in oneMatchWithoutSymbol):\n\t\t\t\t\toneMatchFormated \u003d \u0027\u003ca href \u003d\"mailto:\u0027 +oneMatchWithoutSymbol + \u0027\"\u003e\u0027 + oneMatchWithoutSymbol + \u0027\u003c/a\u003e\u0027\n\t\t\t\telse:\n\t\t\t\t\toneMatchFormated \u003d \u0027\u003ca href \u003d\"\u0027 +oneMatchWithoutSymbol + \u0027\"\u003e\u0027 + oneMatchWithoutSymbol + \u0027\u003c/a\u003e\u0027\n\t\t\t\temailText \u003d emailText.replace(oneMatch,oneMatchFormated)\n\t\t# add bold text as required (if # found)\n\t\tpattern \u003d \"#[A-Za-z0-9-–@,.!?:\\s\u0027]*#\"\n\t\tmatches \u003d re.findall(pattern, emailText)\n\t\tif len(matches)\u003e0:\n\t\t\tfor oneMatch in matches:\n\t\t\t\toneMatchWithoutSymbol \u003d oneMatch[1:-1]\n\t\t\t\toneMatchFormated \u003d \u0027\u003cb\u003e\u0027 +oneMatchWithoutSymbol + \u0027\u003c/b\u003e\u0027\n\t\t\t\temailText \u003d emailText.replace(oneMatch,oneMatchFormated)\n\t\t# convert newline in python to break(\u003cbr\u003e tag) in html\n\t\temailText \u003d emailText.replace(\u0027\\n\u0027,\u0027\u003cbr\u003e\u0027)\n\t\temailText \u003d emailText.replace(\u0027\u003cbr\u003e-\u0027,\u0027\u003cbr\u003e\u0026emsp;-\u0027)\n\t\t## convert text to html format\n\t\temailTextFormated \u003d \"\u003cHTML\u003e\u003cBODY\u003e\"\n\t\temailTextFormated \u003d emailTextFormated + emailText\n#\t\temailTextFormated \u003d emailTextFormated + \"\u003c/BODY\u003e\u003c/HTML\u003e\"\n#\t\tsystem.perspective.print(emailTextFormated)\n\t\treturn emailTextFormated\n\t\t\n\ttry:\n\t\t#Check valid entries.\n\t\t\n\t\tcongregationName \u003d self.view.params.congregationName\n\t\tusername \u003d self.view.params.username\n\t\temail \u003d self.view.params.email\n\t\tpassword \u003d self.view.custom.password\n\t\tpassword2 \u003d self.view.custom.password2\n\t\tif congregationName \u003d\u003d \u0027\u0027:\n\t\t\tself.parent.parent.getChild(\"Label\").showMessage(\"Congregation Name Error\")\n\t\t\treturn\n\t\tif email \u003d\u003d \u0027\u0027:\n\t\t\tself.parent.parent.getChild(\"Label\").showMessage(\"Email Error\")\n\t\t\treturn\n\t\tif password \u003d\u003d \u0027\u0027:\n\t\t\tself.parent.parent.getChild(\"Label\").showMessage(\"Password Error\")\n\t\t\treturn\n\t\tif \u0027@\u0027 not in email:\n\t\t\treturn\n\t\tif password !\u003d password2:\n\t\t\tself.parent.parent.getChild(\"Label\").showMessage(\"Password Error\")\n\t\t\treturn\n\n\t\t#Lookup the user and set credentials for the congregation.\n\t\tif username !\u003d \u0027\u0027 and username !\u003d \u0027(New User)\u0027:\n\t\t\tmodifyUser \u003d system.user.getUser(\u0027congregation\u0027, username)\t\t\t\n\t\t\tmodifyEmail \u003d ContactInfo(\u0027email\u0027,email)\n\t\t\tmodifyUser.set(\u0027password\u0027, password)\n\t\t\tmodifyUser.set(\"firstname\", congregationName)\n\t\t\tmodifyUser.setContactInfo([modifyEmail])\n\t\t\t# Edit the user.\n\t\t\tsystem.user.editUser(\u0027congregation\u0027, modifyUser)\n\t\telse:\n\t\t\t#Create a new user and credentials for the congregation.\n\t\t\tusername \u003d congregationName.replace(\u0027 \u0027,\u0027\u0027)\n\t\t\tusername \u003d username.lower()\n\t\t\tif len(username)\u003e10: username \u003d username[:10]\n\t\t\ttestUsername \u003d username\n\t\t\tfor i in range(1,100):\n\t\t\t\texistingUser \u003d system.user.getUser(\u0027congregation\u0027, testUsername)\n\t\t\t\tif existingUser is None:\n\t\t\t\t\tusername \u003d testUsername\n\t\t\t\t\tbreak\n\t\t\t\telse: testUsername \u003d username + str(i)\n\t\t\tnewEmail \u003d ContactInfo(\u0027email\u0027,email)\n\t\t\tnewUser \u003d system.user.getNewUser(\u0027congregation\u0027, username)\n\t\t\tnewUser.set(\"password\", password)\n\t\t\tnewUser.set(\"firstname\", congregationName)\n\t\t\tnewUser.setContactInfo([newEmail])\n\t\t\ttry: newUser.addRole(\u0027User\u0027)\t\t#If role becomes important, handle here.\n\t\t\texcept: pass\t\n\t\t\taddUserResult \u003d system.user.addUser(\u0027congregation\u0027, newUser)\n\t\t\n\t\t# check is email enable\n\t\tgetIsEnableEvent \u003d system.db.runPrepQuery(\"SELECT id, settingName, settingValue FROM shelter.Settings WHERE timeRetired is NULL AND settingName \u003d \u0027PortalAccessEmail_Enable\u0027\")\n\t\tisEnableEmail \u003d  getIsEnableEvent.getValueAt(0,\u0027settingValue\u0027)\n\t\t\n\t\t# get email text\n\t\tgetEmailText \u003d system.db.runPrepQuery(\"SELECT id, settingName, settingValue FROM shelter.Settings WHERE timeRetired is NULL AND settingName \u003d \u0027PortalAccessEmail_Text\u0027\")\n\t\temailText \u003d  getEmailText.getValueAt(0,\u0027settingValue\u0027)\n\t\t\n\t\t## send email only when setting enable\t\n\t\tif isEnableEmail \u003d\u003d \u0027true\u0027:\t\t\t\t\n\t\t\t#Email Winter Shelter link, username and passwords to coordinator\n\t\t\t#This will need to be updated once email profile is worked out.\n\t\t\tsystem.perspective.print(\u0027Email Winter Shelter link, username and passwords to coordinator\u0027)\n\t\t\tlink \u003d \"WinterShelterPortal link\"\n\t\t\tfromAddress \u003d \"test@test.org\"\n\t\t\ttoAddress \u003d [email]\n\t\t\tsubject \u003d \u0027Room in the Inn: Winter Shelter Registration Username and Link\u0027\n\t\t\t#read image as byte and then convert it into base64\n\t\t\tcontext \u003d IgnitionGateway.get()\n\t\t\timageManager \u003d context.getImageManager()\t\t\n\t\t\timageData \u003d imageManager.getImage(\"57d71ebcee482b3b107972d5_room_in_the_inn_logo.png\")\n\t\t\tRITI_Logo \u003d imageData.getBytes(ImageRecord.Data)\n\t\t\t\n\t\t\tRITI_Logo_Base64 \u003d base64.b64encode(RITI_Logo)\n#\t\t\tbody \u003d \"\u003cHTML\u003e\u003cBODY\u003eRoom in the Inn has invited you to create your own Winter Shelter account.\"\n#\t\t\tbody +\u003d \"The username for \" + congregationName + \" is \u0027\" + username + \"\u0027 and the password is \u0027\" + password + \"\u0027. \"\n#\t\t\tbody +\u003d \u0027The following link will take you to the Discovery page to complete your registration: \u003ca href \u003d\"\u0027 + link\n#\t\t\tbody +\u003d \u0027\"\u003e\u0027 + link + \u0027\u003c/a\u003e\u003cbr\u003e\u0027\n#\t\t\tbody +\u003d \"Thank you for your time and commitment to serving our community. We can not wait for another beautiful winter shelter season! See you in November!\"\n#\t\t\tbody +\u003d \"\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\"\n#\t\t\tbody +\u003d \u0027\u003cimg src\u003d\"data:image/png;base64,\u0027+ str(RITI_Logo_Base64) +\u0027\" alt\u003d\"RITI_Logo\" width\u003d\"140\" height\u003d\"35\"/\u003e\u0027\n#\t\t\tbody +\u003d \"\u003cbr\u003eWinter Shelter Team\u003cbr\u003eRoom in the Inn\u003cbr\u003eshelter@roomintheinn.com\u003cbr\u003e615-251-7019\u003c/BODY\u003e\u003c/HTML\u003e\"\n\t\t\t\n\t\t\tgetCurrentSeason \u003d system.db.runNamedQuery(\"WinterShelterGlobal/getCurrentSeason\")\n\t\t\tseason \u003d getCurrentSeason.getValueAt(0,\u0027Seasons\u0027)\n\t\t\t\n\t\t\t# replace parameter with original value\n\t\t\temailText \u003d emailText.replace(\u0027@season\u0027,season)\n\t\t\temailText \u003d emailText.replace(\u0027@congregationName\u0027,congregationName)\n\t\t\temailText \u003d emailText.replace(\u0027@username\u0027,username)\n\t\t\temailText \u003d emailText.replace(\u0027@password\u0027,password)\n\t\t\temailTextFormated \u003d emailText_to_htmlFormat(emailText)\n\t\t\t## add logo in email\n\t\t\temailTextFormated \u003d emailTextFormated + \"\u003cbr\u003e\u003cbr\u003e\"\n\t\t\temailTextFormated \u003d emailTextFormated + \u0027\u003cimg src\u003d\"data:image/png;base64,\u0027+ str(RITI_Logo_Base64) +\u0027\" alt\u003d\"RITI_Logo\" width\u003d\"140\" height\u003d\"35\"/\u003e\u0027\n\t\t\temailTextFormated \u003d emailTextFormated + \"\u003c/BODY\u003e\u003c/HTML\u003e\"\n\t\t\tbody \u003d emailTextFormated\n\t\t\t\n\t\t\tsmtpProfile \u003d \u0027roomintheinn.org\u0027\n\t#\t\tsmtp \u003d \u0027smtp.mail.yahoo.com\u0027\n\t\t\tsystem.net.sendEmail(smtpProfile \u003d smtpProfile, fromAddr \u003d fromAddress, subject \u003d subject, body \u003d body, to \u003d toAddress,html\u003d1)\n\t#\t\tsystem.net.sendEmail(smtp, fromAddress, subject, body, to\u003dtoAddress,smtpProfile \u003d smtpProfile)\n\t\n\t\t\tlogger \u003d system.util.getLogger(\u0027EmailLogs\u0027)\n\t\t\tlogger.info(\u0027Subject: \u0027 + subject + \u0027 \\nBody: \u0027 + body + \u0027 \\nTo: \u0027 + email)\n\t\t\t\n\t\tself.parent.parent.getChild(\"Label\").showMessage(congregationName + \u0027 successfully updated.\u0027)\n\t\t\n\t\t## also add to the congregation log\n\t\tproject \u003d \"RITI\"\n\t\tpath \u003d \"WinterShelterGlobal/Registration/InsertCongregationLog\"\n\t\tparameters \u003d {\"locationId\":self.view.custom.locationId, \"actionBy\":self.session.custom.loggedInStaffEmployeeID, \"action\":\"Edit Congregation\", \"actionFields\":\"Password\", \"userName\":self.session.props.auth.user.userName}\n\t\tsystem.db.runNamedQuery(project\u003dproject,path\u003dpath,parameters\u003dparameters)\n\t\t\n\t\tself.view.custom.password \u003d \u0027\u0027\n\t\tself.view.custom.password2 \u003d \u0027\u0027\n\t\tself.view.custom.email \u003d \u0027\u0027\n\t\tself.view.params.username \u003d \u0027\u0027\n\t\tself.view.params.congregationName \u003d \u0027\u0027\n\t\tsystem.perspective.closeDock(\u0027resetCongregationPassword\u0027)\n\t\t\n\texcept:\n\t\tlogger \u003d system.util.getLogger(\"System Settings Reset Congregation Password\")\n\t\tmsg \u003d traceback.format_exc()\n\t\tlogger.error(msg)"
                  },
                  "scope": "G",
                  "type": "script"
                }
              }
            },
            "meta": {
              "name": "ResetButton"
            },
            "position": {
              "basis": "100px"
            },
            "propConfig": {
              "position.display": {
                "binding": {
                  "config": {
                    "path": "parent.custom.valid"
                  },
                  "type": "property"
                }
              }
            },
            "props": {
              "style": {
                "classes": "Buttons/Main",
                "marginRight": "30px"
              },
              "text": "Reset Password"
            },
            "type": "ia.input.button"
          },
          {
            "events": {
              "component": {
                "onActionPerformed": {
                  "config": {
                    "script": "\tself.view.custom.password \u003d \u0027\u0027\n\tself.view.custom.password2 \u003d \u0027\u0027\n\tself.view.params.email \u003d \u0027\u0027\n\t#self.view.params.username \u003d \u0027\u0027\n\tself.view.params.congregationName \u003d \u0027\u0027"
                  },
                  "scope": "G",
                  "type": "script"
                }
              }
            },
            "meta": {
              "name": "ClearButton"
            },
            "position": {
              "basis": "100px"
            },
            "props": {
              "image": {
                "icon": {
                  "color": "#AAAAAA"
                }
              },
              "style": {
                "classes": "Buttons/Secondary",
                "marginRight": "30px"
              },
              "text": "Clear"
            },
            "type": "ia.input.button"
          },
          {
            "events": {
              "component": {
                "onActionPerformed": {
                  "config": {
                    "script": "\tself.view.custom.password \u003d \u0027\u0027\n\tself.view.custom.password2 \u003d \u0027\u0027\n\tself.view.params.email \u003d \u0027\u0027\n\tself.view.params.username \u003d \u0027\u0027\n\tself.view.params.congregationName \u003d \u0027\u0027\n\tsystem.perspective.closeDock(\u0027resetCongregationPassword\u0027)\n\t"
                  },
                  "scope": "G",
                  "type": "script"
                }
              }
            },
            "meta": {
              "name": "Cancel Button"
            },
            "position": {
              "basis": "100px"
            },
            "props": {
              "image": {
                "icon": {
                  "color": "#AAAAAA"
                }
              },
              "style": {
                "classes": "Buttons/Delete Buttons/Secondary_Orange",
                "marginRight": "30px"
              },
              "text": "Cancel"
            },
            "type": "ia.input.button"
          }
        ],
        "meta": {
          "name": "FlexContainer"
        },
        "position": {
          "basis": "35px"
        },
        "propConfig": {
          "custom.valid": {
            "binding": {
              "config": {
                "expression": "len({view.params.email}) \u0026\u0026\r\n{view.custom.password2} \u003d {view.custom.password} \u0026\u0026\r\nlen({view.custom.password}) \u003e 6 \u0026\u0026\r\nlen({view.custom.password2}) \u003e 6"
              },
              "type": "expr"
            }
          }
        },
        "props": {
          "style": {
            "marginBottom": "20px",
            "marginTop": "20px",
            "overflow": "visible"
          }
        },
        "type": "ia.container.flex"
      },
      {
        "meta": {
          "name": "Label",
          "visible": false
        },
        "position": {
          "basis": "50px"
        },
        "props": {
          "style": {
            "classes": "Text/Error_Message"
          },
          "text": "Congregation Name Error"
        },
        "scripts": {
          "customMethods": [
            {
              "name": "showMessage",
              "params": [
                "message"
              ],
              "script": "\timport time\n\tself.props.text \u003d message\n\tself.meta.visible \u003d True\n\ttime.sleep(5)\n\tself.meta.visible \u003d False\n\t"
            }
          ],
          "extensionFunctions": null,
          "messageHandlers": []
        },
        "type": "ia.display.label"
      }
    ],
    "meta": {
      "name": "root"
    },
    "props": {
      "direction": "column",
      "style": {
        "classes": "Background/Default",
        "paddingLeft": "50px",
        "paddingRight": "50px"
      }
    },
    "scripts": {
      "customMethods": [],
      "extensionFunctions": null,
      "messageHandlers": [
        {
          "messageType": "resetWinterRegistration",
          "pageScope": true,
          "script": "\tself.view.custom.createNew \u003d False\n\tself.view.custom.password2 \u003d \u0027\u0027\n\tself.view.custom.newRegistration \u003d False\n\t",
          "sessionScope": true,
          "viewScope": false
        }
      ]
    },
    "type": "ia.container.flex"
  }
}