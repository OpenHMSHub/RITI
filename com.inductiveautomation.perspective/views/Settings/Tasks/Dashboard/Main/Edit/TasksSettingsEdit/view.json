{
  "custom": {
    "edit_data": {
      "description": "",
      "id": 1,
      "isActive": false,
      "type": ""
    },
    "rules": [
      {
        "RuleNumber": 1,
        "automatedTaskId": 2,
        "entryCriteriaTime": 72,
        "entryCriteriaTimeUnits": "hours",
        "entryCriterialLabel": "HMIS update in Registration is blank within Program Entry for Non-VA",
        "id": 2,
        "taskDueDateTime": 24,
        "taskDueDateTimeUnints": "hours",
        "taskNotes": "Enter HMIS Update date in the Participant Registration.",
        "taskPriority": 1,
        "taskPriorityName": "None",
        "taskSubject": "Non-VA HMIS Update",
        "taskType": 2,
        "taskTypeName": "To Do",
        "timeCreated": 1719910968603,
        "timeRetired": null
      },
      {
        "RuleNumber": 2,
        "automatedTaskId": 2,
        "entryCriteriaTime": 80,
        "entryCriteriaTimeUnits": "days",
        "entryCriterialLabel": "non-VA Participant is in Shelter, and the Last HMIS Update in Registration is equal to",
        "id": 3,
        "taskDueDateTime": 1,
        "taskDueDateTimeUnints": "weeks",
        "taskNotes": "",
        "taskPriority": 2,
        "taskPriorityName": "High",
        "taskSubject": "Non-VA HMIS Update",
        "taskType": 2,
        "taskTypeName": "To Do",
        "timeCreated": 1719911056457,
        "timeRetired": null
      }
    ],
    "taskId": 2
  },
  "params": {
    "row_data": {
      "description": "",
      "id": 2,
      "isActive": false,
      "type": ""
    },
    "view_height": "520px"
  },
  "propConfig": {
    "custom.rules": {
      "binding": {
        "config": {
          "parameters": {
            "taskId": "{view.custom.taskId}"
          },
          "queryPath": "Settings/Tasks/getAutomatedTaskRules",
          "returnFormat": "json"
        },
        "type": "query"
      },
      "persistent": true
    },
    "custom.taskId": {
      "persistent": true
    },
    "params.row_data": {
      "onChange": {
        "enabled": null,
        "script": "\tif len(currentValue.value)\u003e0:\n\t\tself.custom.taskId \u003d currentValue.value[\u0027id\u0027]\n\telse:\n\t\tself.custom.taskId \u003d 0"
      },
      "paramDirection": "input",
      "persistent": true
    },
    "params.row_data.employee_id": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.row_data.employee_name": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.row_data.hmis": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.row_data.id": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.row_data.note": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.row_data.note_id": {
      "onChange": {
        "enabled": null,
        "script": "\tself.custom.edit_data \u003d self.params.row_data\n\t#system.perspective.print(\u0027Row ID Change\u0027)"
      },
      "paramDirection": "input",
      "persistent": true
    },
    "params.row_data.note_type": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.row_data.note_type_id": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.row_data.participant_id": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.row_data.participant_name": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.row_data.services": {
      "onChange": {
        "enabled": null,
        "script": "\tself.custom.edit_data.services \u003d self.params.row_data.services"
      },
      "paramDirection": "input",
      "persistent": true
    },
    "params.view_height": {
      "binding": {
        "config": {
          "path": "view.custom.rules"
        },
        "transforms": [
          {
            "code": "\tif value \u003d\u003d None:\n\t\tnum_rules \u003d 0\n\telse:\n\t\tif len(value) \u003e\u003d 3:\n\t\t\tnum_rules \u003d 3\n\t\telse:\n\t\t\tnum_rules \u003d len(value)\n\t\n\tview_height \u003d (75 * num_rules) + 370\n\t\n\treturn str(view_height) + \u0027px\u0027",
            "type": "script"
          }
        ],
        "type": "property"
      },
      "paramDirection": "output",
      "persistent": true
    }
  },
  "props": {
    "defaultSize": {
      "height": 346,
      "width": 1440
    }
  },
  "root": {
    "children": [
      {
        "meta": {
          "name": "EmbeddedView Header"
        },
        "position": {
          "basis": "25px",
          "shrink": 0
        },
        "props": {
          "params": {
            "Text": "Edit Automated Task "
          },
          "path": "Participants/Templates/Header"
        },
        "type": "ia.display.view"
      },
      {
        "meta": {
          "name": "EmbeddedView Row1"
        },
        "position": {
          "basis": "120px",
          "shrink": 0
        },
        "propConfig": {
          "props.params.automatedTaskId": {
            "binding": {
              "config": {
                "path": "view.custom.taskId"
              },
              "type": "property"
            }
          }
        },
        "props": {
          "params": {
            "taskDesc": "When a non-VA Participant is not updated in HMIS (Nashville software system) within 90 days then they\r\ndrop out of the system",
            "taskIsActive": 1,
            "taskType": "Non-VA Participant not updated in HMIS"
          },
          "path": "Settings/Tasks/Dashboard/Main/Edit/Row1",
          "style": {
            "marginLeft": 25,
            "marginRight": 25
          }
        },
        "type": "ia.display.view"
      },
      {
        "meta": {
          "name": "EmbeddedView Row2"
        },
        "position": {
          "basis": "40px",
          "shrink": 0
        },
        "propConfig": {
          "props.params.func_add_rule": {
            "onChange": {
              "enabled": null,
              "script": "\tif currentValue.value \u003d\u003d True:\n\t\toriginal_rules \u003d self.view.custom.rules\n\t\tempty_rule \u003d [{\n\t\t\t\t\t  \"id\": 0,\n\t\t\t\t\t  \"automatedTaskId\": 0,\n\t\t\t\t\t  \"RuleNumber\": len(original_rules)+1,\n\t\t\t\t\t  \"entryCriterialLabel\": \"\",\n\t\t\t\t\t  \"entryCriteriaTime\": 0,\n\t\t\t\t\t  \"entryCriteriaTimeUnits\": -1,\n\t\t\t\t\t  \"taskDueDateTime\": 0,\n\t\t\t\t\t  \"taskDueDateTimeUnints\": -1,\n\t\t\t\t\t  \"taskSubject\": \"\",\n\t\t\t\t\t  \"taskType\": 0,\n\t\t\t\t\t  \"taskNotes\": None,\n\t\t\t\t\t  \"timeCreated\": None,\n\t\t\t\t\t  \"timeRetired\": None,\n\t\t\t\t\t  \"taskPriority\": None\n\t\t\t\t\t}]\n\t\t\n\t\tself.view.custom.rules \u003d original_rules + empty_rule\n\t\tself.props.params.func_add_rule \u003d False"
            }
          }
        },
        "props": {
          "params": {
            "func_add_rule": false
          },
          "path": "Settings/Tasks/Dashboard/Main/Edit/Row2",
          "style": {
            "classes": "InputCards/InputCard_TopBorder",
            "marginLeft": "20px",
            "marginRight": "0px"
          }
        },
        "type": "ia.display.view"
      },
      {
        "meta": {
          "name": "FlexRepeater"
        },
        "propConfig": {
          "position.basis": {
            "binding": {
              "config": {
                "path": "this.props.instances"
              },
              "transforms": [
                {
                  "code": "\treturn str((len(value)*90))+\"px\"",
                  "type": "script"
                }
              ],
              "type": "property"
            }
          },
          "props.instances": {
            "binding": {
              "config": {
                "bidirectional": true,
                "path": "view.custom.rules"
              },
              "type": "property"
            }
          }
        },
        "props": {
          "direction": "column",
          "path": "Settings/Tasks/Dashboard/Main/Edit/Row_Rule",
          "style": {
            "marginLeft": "20px",
            "marginRight": "20px",
            "marginTop": "5px"
          },
          "useDefaultViewWidth": false
        },
        "type": "ia.display.flex-repeater"
      },
      {
        "children": [
          {
            "events": {
              "component": {
                "onActionPerformed": {
                  "config": {
                    "script": "\timport traceback\n\ttry:\n\t\tsystem.perspective.sendMessage(\"newAutomatedTask\", payload \u003d {}, scope \u003d \u0027session\u0027)\n\t\tself.view.custom.taskId \u003d 0\n\t\t\n\texcept:\n\t\tlogger \u003d system.util.getLogger(\"Setting Task New Button\")\n\t\tmsg \u003d traceback.format_exc()\n\t\tlogger.error(msg)"
                  },
                  "scope": "G",
                  "type": "script"
                }
              }
            },
            "meta": {
              "name": "button_new"
            },
            "position": {
              "basis": "120px",
              "display": false,
              "shrink": 0
            },
            "props": {
              "style": {
                "classes": "Buttons/Secondary",
                "marginBottom": "5px",
                "marginLeft": "20px",
                "marginTop": "5px"
              },
              "text": "New Task"
            },
            "type": "ia.input.button"
          },
          {
            "events": {
              "component": {
                "onActionPerformed": {
                  "config": {
                    "script": "\timport traceback\n\ttry:\n\t\tproject \u003d \"RITI\"\n\t\t### Declare parameters \n\t\t## task type details\n\t\tautomatedTaskId \u003d self.parent.parent.getChild(\"EmbeddedView Row1\").props.params.automatedTaskId\n\t\ttaskType \u003d self.parent.parent.getChild(\"EmbeddedView Row1\").props.params.taskType\n\t\ttaskIsActive \u003d self.parent.parent.getChild(\"EmbeddedView Row1\").props.params.taskIsActive\n\t\ttaskDesc \u003d self.parent.parent.getChild(\"EmbeddedView Row1\").props.params.taskDesc\n\t\t\n\t\t## task rule details\n\t\ttaskRules \u003d self.parent.parent.getChild(\"FlexRepeater\").props.instances\n\t\n\t\t## Check if parameters are filled in correctly \n\t\tvalid \u003d True\n\t\tif (taskType is None) or (taskType\u003d\u003d\u0027\u0027):\n\t\t\tvalid \u003d False\n\t\t\tself.getSibling(\"Label\").showMessage(\"Please enter task type.\")\n\t\telif (taskIsActive is None) or (taskIsActive \u003d\u003d \"\") or (int(taskIsActive) \u003c 0):\n\t\t\tvalid \u003d False\n\t\t\tself.getSibling(\"Label\").showMessage(\"Please select task status.\")\n\t\telif (taskRules !\u003d None) and (taskRules !\u003d \u0027\u0027) and (len(taskRules)\u003e0):\n\t\t\tfor ruleData in taskRules:\n\t\t\t\tRuleNumber \u003d ruleData[\"RuleNumber\"]\n\t\t\t\tentryCriterialLabel \u003d ruleData[\"entryCriterialLabel\"]\n\t\t\t\tif (entryCriterialLabel is None) or (entryCriterialLabel\u003d\u003d\u0027\u0027):\n\t\t\t\t\tvalid \u003d False\n\t\t\t\tentryCriteriaTime \u003d ruleData[\"entryCriteriaTime\"]\n\t\t\t\tif (entryCriteriaTime is None) or (entryCriteriaTime\u003d\u003d\u0027\u0027) or (int(entryCriteriaTime) \u003c 0):\n\t\t\t\t\tvalid \u003d False\n\t\t\t\ttaskDueDateTimeUnints \u003d ruleData[\"taskDueDateTimeUnints\"]\n\t\t\t\tif (taskDueDateTimeUnints is None) or (taskDueDateTimeUnints\u003d\u003d\u0027\u0027):\n\t\t\t\t\tvalid \u003d False\n\t\t\t\ttaskSubject \u003d ruleData[\"taskSubject\"]\n\t\t\t\tif (taskSubject is None) or (taskSubject\u003d\u003d\u0027\u0027):\n\t\t\t\t\tvalid \u003d False\n\t\t\t\tentryCriteriaTimeUnits \u003d ruleData[\"entryCriteriaTimeUnits\"]\n\t\t\t\tif (entryCriteriaTimeUnits is None) or (entryCriteriaTimeUnits\u003d\u003d\u0027\u0027):\n\t\t\t\t\tvalid \u003d False\n\t\t\t\ttaskDueDateTime \u003d ruleData[\"taskDueDateTime\"]\n\t\t\t\tif (taskDueDateTime is None) or (taskDueDateTime\u003d\u003d\u0027\u0027) or (int(taskDueDateTime) \u003c 0):\n\t\t\t\t\tvalid \u003d False\n\t\t\t\t\n\t\t\t\tif valid \u003d\u003d False:\n\t\t\t\t\tself.getSibling(\"Label\").showMessage(\"Please ensure entryCriteria, minimumTime, minimumTimeUnit, subject, taskDue and taskDueUnit fields selected for rule no. \" + str(RuleNumber) + \".\")\n\t\t\t\t\tbreak\n\t\t\t\n\t\telif valid \u003d\u003d True:\n\t\t\tsystem.perspective.print(\"Task Data Valid\")\n\t\t\n\t\t### Check if data is valid otherwise show error message.\n\t\tif valid:\t\t\t\n\t\t\t### Check if the user is creating new data\n\t\t\tif automatedTaskId \u003d\u003d 0:#Insert new data, no row_id\n\t\t\t\tpass\n\t\t\t\t\n\t\t\t##### Check if the user is editing existing data\n\t\t\telif automatedTaskId \u003e 0:#Update existing data on specified row_id\n\t\t\t\t## update task type\n\t\t\t\tpath \u003d \"Settings/Tasks/UpdateAutomatedTasks\"\n\t\t\t\tparameters \u003d {\"taskId\":automatedTaskId,\n\t\t\t\t\t\t\t\"taskType\":taskType,\n\t\t\t\t\t\t\t\"taskDesc\":taskDesc,\n\t\t\t\t\t\t\t\"isActive\":taskIsActive}\n\t\t\t\tsystem.db.runNamedQuery(project\u003dproject,path\u003dpath,parameters\u003dparameters, getKey\u003dTrue)\t\n\t\t\t\t\n\t\t\t\t## update rules\n\t\t\t\tfor ruleData in taskRules:\n\t\t\t\t\tentryCriteriaTime \u003d ruleData[\"entryCriteriaTime\"]\n\t\t\t\t\tentryCriteriaTimeUnits \u003d ruleData[\"entryCriteriaTimeUnits\"]\n\t\t\t\t\ttaskDueDateTime \u003d ruleData[\"taskDueDateTime\"]\n\t\t\t\t\ttaskDueDateTimeUnints \u003d ruleData[\"taskDueDateTimeUnints\"]\n\t\t\t\t\ttaskSubject \u003d ruleData[\"taskSubject\"]\n\t\t\t\t\ttaskType \u003d ruleData[\"taskType\"]\n\t\t\t\t\ttaskPriority \u003d ruleData[\"taskPriority\"]\n\t\t\t\t\ttaskNotes \u003d ruleData[\"taskNotes\"]\n\t\t\t\t\truleId \u003d ruleData[\"id\"]\n\t\t\t\t\t\n\t\t\t\t\tpath \u003d \"Settings/Tasks/UpdateAutomatedTaskRules\"\n\t\t\t\t\tparameters \u003d {\"entryCriteriaTime\":entryCriteriaTime,\n\t\t\t\t\t\t\t\t\"entryCriteriaTimeUnits\":entryCriteriaTimeUnits,\n\t\t\t\t\t\t\t\t\"taskDueDateTime\":taskDueDateTime,\n\t\t\t\t\t\t\t\t\"taskDueDateTimeUnints\":taskDueDateTimeUnints,\n\t\t\t\t\t\t\t\t\"taskSubject\":taskSubject,\n\t\t\t\t\t\t\t\t\"taskType\":taskType,\n\t\t\t\t\t\t\t\t\"taskPriority\":taskPriority,\n\t\t\t\t\t\t\t\t\"taskNotes\":taskNotes,\n\t\t\t\t\t\t\t\t\"ruleId\":ruleId}\n\t\t\t\t\tsystem.db.runNamedQuery(project\u003dproject,path\u003dpath,parameters\u003dparameters, getKey\u003dTrue)\t\n\t\t\t\tsystem.perspective.sendMessage(messageType\u003d\"taskSettingUpdated\",payload\u003d{},scope\u003d\"session\")\n\t\t\t\tself.getSibling(\"Label\").showMessage(\"Task updated successfully.\")\n\t\t\t\t\n\texcept:\n\t\tlogger \u003d system.util.getLogger(\"Setting Task Dashboard\")\n\t   \tmsg \u003d traceback.format_exc()\n\t   \tlogger.error(msg)\n\t\tself.getSibling(\"Label\").showMessage(\"Something went wrong while saving data. Please try again.\")\t"
                  },
                  "scope": "G",
                  "type": "script"
                }
              }
            },
            "meta": {
              "name": "button_save"
            },
            "position": {
              "basis": "120px",
              "shrink": 0
            },
            "propConfig": {
              "position.display": {
                "binding": {
                  "config": {
                    "expression": "if({view.custom.edit_data.autoTaskId} \u003e -1,True,False)"
                  },
                  "type": "expr"
                }
              },
              "props.text": {
                "binding": {
                  "config": {
                    "expression": "//if({view.custom.taskId}\u003d0,\u0027Save Task\u0027,\u0027Update Task\u0027)\r\n\u0027Update Task\u0027"
                  },
                  "type": "expr"
                }
              }
            },
            "props": {
              "style": {
                "classes": "Buttons/Main",
                "marginBottom": "5px",
                "marginLeft": "10px",
                "marginTop": "5px"
              }
            },
            "type": "ia.input.button"
          },
          {
            "events": {
              "component": {
                "onActionPerformed": {
                  "config": {
                    "script": "\t### Declare parameters\n\tproject \u003d \"RITI\" \n\tnote_id \u003d self.view.custom.edit_data.note_id\n\t\t\n\t## Check if parameters are filled in correctly \n\tif (note_id is None) or (int(note_id) \u003c 0):\n\t\tvalid \u003d False\n\t\tsystem.perspective.print(\"Note ID Error\")\n\telse:\n\t\tvalid \u003d True\n\t\tsystem.perspective.print(\"Case Notes Dashboard Data Valid\")\n\t\t\t\n\t### Check if data is valid otherwise show error message.\n\tif valid:\n\t\ttry:\n\t\t\t#Query and delete all services linked to the case note\n\t\t\tpath \u003d \"Participants/Services/ServicesDetailNoteServiceSelect\"\n\t\t\tparameters \u003d {\"note_id\":note_id}\n\t\t\tservice_list \u003d system.db.runNamedQuery(project\u003dproject,path\u003dpath,parameters\u003dparameters, getKey\u003dTrue)\t\n\t\t\t#system.perspective.print(str(service_list.getRowCount()) + \u0027 linked services found\u0027)\n\t\t\tif service_list.getRowCount():\n\t\t\t\tfor service in range(service_list.getRowCount()):\n\t\t\t\t\tservice_id \u003d service_list.getValueAt(service,\u0027ServicesId\u0027)\n\t\t\t\t\t#Delete the links to the Case Notes\n\t\t\t\t\t#system.perspective.print(\u0027Delete Case Note Link. Case Note:\u0027 + str(note_id) + \u0027 Service:\u0027 + str(service_id))\n\t\t\t\t\tpath \u003d \"Participants/Services/ServicesDetailCaseNoteDelete\"\n\t\t\t\t\tparameters \u003d {\"note_id\":note_id,\"service_id\":service_id}\n\t\t\t\t\tRefresh_link \u003d system.db.runNamedQuery(project\u003dproject,path\u003dpath,parameters\u003dparameters, getKey\u003dTrue)\t\n\t\t\t\t\t#Delete the data for the Services\n\t\t\t\t\tpath \u003d \"Participants/Services/ServicesDetailDelete\"\n\t\t\t\t\tparameters \u003d {\"row_id\":service_id}\n\t\t\t\t\t#system.perspective.print(\u0027Delete Service: \u0027 + str(service_id))\n\t\t\t\t\tRefresh_service \u003d system.db.runNamedQuery(project\u003dproject,path\u003dpath,parameters\u003dparameters, getKey\u003dTrue)\t\n\t\t\t\n\t\t\t## Delete the case notes types record(s) before deleting the case note\n\t\t\tpath \u003d \"Participants/CaseNotes/CaseNotesTypesDelete\"\n\t\t\tparameters \u003d {\"case_note_id\":note_id}\n\t\t\tsystem.db.runNamedQuery(project\u003dproject,path\u003dpath,parameters\u003dparameters)\t\t\n\t\t\t\n\t\t\t#Delete the Case Note\n\t\t\tpath \u003d \"Participants/CaseNotes/CaseNotesDetailDelete\"\n\t\t\tparameters \u003d {\"row_id\":note_id}\n\t\t\t#system.perspective.print(\u0027Delete Case Note: \u0027 + str(note_id))\n\t\t\tRefresh \u003d system.db.runNamedQuery(project\u003dproject,path\u003dpath,parameters\u003dparameters, getKey\u003dTrue)\t\t\n\n\t\t\t##### Refresh the table\n\t\t\tsystem.perspective.sendMessage(messageType\u003d\"refreshCaseNotesDashboardData\", payload\u003d{}, scope\u003d\"session\")\n\t\t\t\n\t\texcept:\n\t\t\tself.getSibling(\"Label\").showMessage(\"Something went wrong while deleting data. Please try again.\")\t\n\telse:\n\t\tself.getSibling(\"Label\").showMessage(\"Something went wrong while saving data. Please try again.\")\n\t\t\n\t"
                  },
                  "scope": "G",
                  "type": "script"
                }
              }
            },
            "meta": {
              "name": "button_delete"
            },
            "position": {
              "basis": "120px",
              "display": false,
              "shrink": 0
            },
            "props": {
              "style": {
                "classes": "Buttons/Delete",
                "marginBottom": "5px",
                "marginLeft": "10px",
                "marginTop": "5px"
              },
              "text": "Delete Task"
            },
            "type": "ia.input.button"
          },
          {
            "meta": {
              "name": "Label",
              "visible": false
            },
            "position": {
              "basis": "50px",
              "grow": 1
            },
            "props": {
              "style": {
                "classes": "Text/Error_Message"
              },
              "text": "Please fill in all the fields correctly before saving."
            },
            "scripts": {
              "customMethods": [
                {
                  "name": "showMessage",
                  "params": [
                    "message"
                  ],
                  "script": "\timport time\n\tself.props.text \u003d message\n\tself.meta.visible \u003d True\n\ttime.sleep(5)\n\tself.meta.visible \u003d False\n\t"
                }
              ],
              "extensionFunctions": null,
              "messageHandlers": []
            },
            "type": "ia.display.label"
          }
        ],
        "meta": {
          "name": "root Actions"
        },
        "position": {
          "basis": "50px",
          "shrink": 0
        },
        "props": {
          "style": {
            "borderTopColor": "#9db8d1",
            "borderTopStyle": "solid",
            "borderTopWidth": "1px",
            "classes": "Background/Default",
            "marginTop": "5px",
            "paddingTop": "5px"
          }
        },
        "type": "ia.container.flex"
      },
      {
        "meta": {
          "name": "Label"
        },
        "position": {
          "basis": "32px",
          "display": false
        },
        "propConfig": {
          "props.text": {
            "binding": {
              "config": {
                "expression": "\u0027Note:\u0027 +\r\n{view.custom.edit_data.note_id} +\r\n\u0027, Participant:\u0027 + \r\nif({view.custom.edit_data.note_id} \u003e -1,{view.custom.edit_data.participant_id},{view.params.output_id}) + \r\n\u0027, Employee:\u0027 +\r\n{view.custom.edit_data.employee_id} + \r\n\u0027, HMIS:\u0027 +\r\n{view.custom.edit_data.hmis} + \r\n\u0027, Note:\u0027 +\r\n{view.custom.edit_data.note}"
              },
              "overlayOptOut": true,
              "type": "expr"
            }
          }
        },
        "props": {
          "style": {
            "classes": "Text/Error_Message"
          }
        },
        "type": "ia.display.label"
      },
      {
        "meta": {
          "name": "Label_0"
        },
        "position": {
          "basis": "32px",
          "display": false
        },
        "propConfig": {
          "props.text": {
            "binding": {
              "config": {
                "path": "../FlexRepeater.props.instances"
              },
              "overlayOptOut": true,
              "type": "property"
            }
          }
        },
        "props": {
          "style": {
            "classes": "Text/Error_Message"
          }
        },
        "type": "ia.display.label"
      }
    ],
    "meta": {
      "name": "root"
    },
    "props": {
      "direction": "column",
      "style": {
        "classes": "Background/Default"
      }
    },
    "scripts": {
      "customMethods": [],
      "extensionFunctions": null,
      "messageHandlers": [
        {
          "messageType": "RemoveTaskRule",
          "pageScope": true,
          "script": "\t# implement your handler here\n\trowNo \u003d payload[\u0027row_num\u0027]\n#\toriginalRules \u003d self.view.custom.rules\n#\tremoveItemIndexList \u003d [i for i in range(0,len(originalRules)) if originalRules[i][\u0027RuleNumber\u0027]\u003d\u003drowNo]\n#\tif len(removeItemIndexList)\u003e0:\n#\t\tremoveItemIndex \u003d removeItemIndexList[0]\n#\t\tdel (self.view.custom.rules)[removeItemIndex]",
          "sessionScope": true,
          "viewScope": true
        }
      ]
    },
    "type": "ia.container.flex"
  }
}