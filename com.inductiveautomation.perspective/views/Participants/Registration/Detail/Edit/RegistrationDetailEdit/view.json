{
  "custom": {
    "RegistrationData": {
      "active": 1,
      "additional_income_amount": 0,
      "additional_income_source": -1,
      "alt_phone": "000-000-0000",
      "biracial_id": null,
      "case_manager_id": 0,
      "chronic_health_conditions": 0,
      "chronic_homeless": 0,
      "chronic_homeless_date": null,
      "city": "",
      "communication_type_id": 3,
      "congregation": "",
      "developmental_disability": 0,
      "disability_id": 1,
      "dob": {
        "$": [
          "ts",
          192,
          1738240421115
        ],
        "$ts": 521571600000
      },
      "dob_quality": 2,
      "email": "",
      "emergency_contact_email": "",
      "emergency_contact_name": "Melissa Anthony",
      "emergency_contact_phone": "757-515-9341",
      "emergency_contact_type_id": 6,
      "employer": "",
      "employment_type": null,
      "ethnicity_id": 1,
      "family_id": 18,
      "first_name": "Robert",
      "food_stamps": -1,
      "gender_id": 0,
      "hmis_number": 5,
      "hmis_update_by": "Test",
      "hmis_update_date": {
        "$": [
          "ts",
          192,
          1738240421133
        ],
        "$ts": 1737352800000
      },
      "hoh_relationship_id": 0,
      "human_id": 18,
      "income_amount": 0,
      "income_source": -1,
      "income_start_date": null,
      "insurance_type_id": 2,
      "last_name": "Green",
      "mail_service": -1,
      "mental_health": 0,
      "middle_name": "",
      "nick_name": "",
      "participant_id": 18,
      "phone": "000-000-0000",
      "physical_disability": 0,
      "race_id": 5,
      "school": "",
      "so_registry": -1,
      "so_registry_date": null,
      "ssn": "000-00-0000",
      "ssn_quality_id": 2,
      "state": "",
      "street": "",
      "substance_abuse": "Drugs",
      "suffix_name": "",
      "timeRetired": null,
      "time_deceased": null,
      "tri_morbid": -1,
      "va_healthcare_eligible": 2,
      "veteran_id": 1,
      "vi_spidat_date": null,
      "vi_spidat_on_file": 0,
      "vi_spidat_score": 4,
      "zip_code": ""
    },
    "func_refresh": false,
    "sql_data": {
      "$": [
        "ds",
        192,
        1738240421097
      ],
      "$columns": [
        {
          "data": [
            18
          ],
          "name": "human_id",
          "type": "Integer"
        },
        {
          "data": [
            true
          ],
          "name": "fullRegistration",
          "type": "Boolean"
        },
        {
          "data": [
            null
          ],
          "name": "time_retired",
          "type": "Date"
        },
        {
          "data": [
            1737730221733
          ],
          "name": "time_registered",
          "type": "Date"
        },
        {
          "data": [
            false
          ],
          "name": "suspension_active",
          "type": "Boolean"
        },
        {
          "data": [
            0
          ],
          "name": "case_manager_id",
          "type": "Integer"
        },
        {
          "data": [
            ""
          ],
          "name": "employee_name",
          "type": "String"
        },
        {
          "data": [
            "000000000"
          ],
          "name": "ssn",
          "type": "String"
        },
        {
          "data": [
            2
          ],
          "name": "ssn_quality_id",
          "type": "Integer"
        },
        {
          "data": [
            "Full SSN Reported"
          ],
          "name": "ssn_quality",
          "type": "String"
        },
        {
          "data": [
            "Robert"
          ],
          "name": "first_name",
          "type": "String"
        },
        {
          "data": [
            ""
          ],
          "name": "middle_name",
          "type": "String"
        },
        {
          "data": [
            "Green"
          ],
          "name": "last_name",
          "type": "String"
        },
        {
          "data": [
            ""
          ],
          "name": "suffix_name",
          "type": "String"
        },
        {
          "data": [
            ""
          ],
          "name": "nick_name",
          "type": "String"
        },
        {
          "data": [
            521571600000
          ],
          "name": "dob",
          "type": "Date"
        },
        {
          "data": [
            2
          ],
          "name": "dob_quality_id",
          "type": "Integer"
        },
        {
          "data": [
            "Full DOB Reported"
          ],
          "name": "dob_quality",
          "type": "String"
        },
        {
          "data": [
            38
          ],
          "name": "Age",
          "type": "Integer"
        },
        {
          "data": [
            0
          ],
          "name": "gender_id",
          "type": "Integer"
        },
        {
          "data": [
            "Male"
          ],
          "name": "gender",
          "type": "String"
        },
        {
          "data": [
            5
          ],
          "name": "race_id",
          "type": "Integer"
        },
        {
          "data": [
            "White"
          ],
          "name": "race",
          "type": "String"
        },
        {
          "data": [
            1
          ],
          "name": "ethnicity_id",
          "type": "Integer"
        },
        {
          "data": [
            "Non-Hispanic/Latino"
          ],
          "name": "ethnicity",
          "type": "String"
        },
        {
          "data": [
            null
          ],
          "name": "time_deceased",
          "type": "Date"
        },
        {
          "data": [
            1
          ],
          "name": "veteran_id",
          "type": "Integer"
        },
        {
          "data": [
            "No"
          ],
          "name": "veteran",
          "type": "String"
        },
        {
          "data": [
            1
          ],
          "name": "disability_id",
          "type": "Integer"
        },
        {
          "data": [
            "No"
          ],
          "name": "disability",
          "type": "String"
        },
        {
          "data": [
            null
          ],
          "name": "tri_morbid",
          "type": "Boolean"
        },
        {
          "data": [
            false
          ],
          "name": "chronic_homeless",
          "type": "Boolean"
        },
        {
          "data": [
            null
          ],
          "name": "so_registry",
          "type": "Boolean"
        },
        {
          "data": [
            null
          ],
          "name": "mail_service",
          "type": "Boolean"
        },
        {
          "data": [
            18
          ],
          "name": "family_id",
          "type": "Integer"
        },
        {
          "data": [
            "Green, Robert - 1986"
          ],
          "name": "family",
          "type": "String"
        },
        {
          "data": [
            0
          ],
          "name": "hoh_relationship_id",
          "type": "Integer"
        },
        {
          "data": [
            "Self"
          ],
          "name": "hoh_relationship",
          "type": "String"
        },
        {
          "data": [
            ""
          ],
          "name": "street",
          "type": "String"
        },
        {
          "data": [
            null
          ],
          "name": "city",
          "type": "String"
        },
        {
          "data": [
            null
          ],
          "name": "state",
          "type": "String"
        },
        {
          "data": [
            0
          ],
          "name": "zip_code",
          "type": "Integer"
        },
        {
          "data": [
            "0000000000"
          ],
          "name": "phone",
          "type": "String"
        },
        {
          "data": [
            "0000000000"
          ],
          "name": "alt_phone",
          "type": "String"
        },
        {
          "data": [
            ""
          ],
          "name": "email",
          "type": "String"
        },
        {
          "data": [
            3
          ],
          "name": "communication_type_id",
          "type": "Integer"
        },
        {
          "data": [
            2
          ],
          "name": "insurance_type_id",
          "type": "Integer"
        },
        {
          "data": [
            "Data Not Collected"
          ],
          "name": "communication_type",
          "type": "String"
        },
        {
          "data": [
            "Melissa Anthony"
          ],
          "name": "emergency_contact_name",
          "type": "String"
        },
        {
          "data": [
            6
          ],
          "name": "emergency_contact_type_id",
          "type": "Integer"
        },
        {
          "data": [
            "7575159341"
          ],
          "name": "emergency_contact_phone",
          "type": "String"
        },
        {
          "data": [
            ""
          ],
          "name": "emergency_contact_email",
          "type": "String"
        },
        {
          "data": [
            ""
          ],
          "name": "employer",
          "type": "String"
        },
        {
          "data": [
            null
          ],
          "name": "school",
          "type": "String"
        },
        {
          "data": [
            "fix_me"
          ],
          "name": "congregation",
          "type": "String"
        },
        {
          "data": [
            null
          ],
          "name": "chronicHomelessDate",
          "type": "Date"
        },
        {
          "data": [
            null
          ],
          "name": "soRegistryDate",
          "type": "Date"
        },
        {
          "data": [
            false
          ],
          "name": "mentalHealth",
          "type": "Boolean"
        },
        {
          "data": [
            false
          ],
          "name": "chronicHealthCoditions",
          "type": "Boolean"
        },
        {
          "data": [
            false
          ],
          "name": "physicalDisability",
          "type": "Boolean"
        },
        {
          "data": [
            false
          ],
          "name": "developmentalDisability",
          "type": "Boolean"
        },
        {
          "data": [
            "Drugs"
          ],
          "name": "substanceAbuse",
          "type": "String"
        },
        {
          "data": [
            1737352800000
          ],
          "name": "lastHmisUpdateDate",
          "type": "Date"
        },
        {
          "data": [
            "Test"
          ],
          "name": "lastHmisUpdateBy",
          "type": "String"
        },
        {
          "data": [
            5
          ],
          "name": "hmis_number",
          "type": "Integer"
        },
        {
          "data": [
            4
          ],
          "name": "viSpidatScore",
          "type": "Integer"
        },
        {
          "data": [
            null
          ],
          "name": "viSpidatAssessmentDate",
          "type": "Date"
        },
        {
          "data": [
            null
          ],
          "name": "vaHealthcareEligible",
          "type": "Boolean"
        },
        {
          "data": [
            null
          ],
          "name": "incomeSourceID",
          "type": "Integer"
        },
        {
          "data": [
            0
          ],
          "name": "incomeAmount",
          "type": "Double"
        },
        {
          "data": [
            null
          ],
          "name": "incomeStartDate",
          "type": "Date"
        },
        {
          "data": [
            null
          ],
          "name": "biracialId",
          "type": "Integer"
        },
        {
          "data": [
            null
          ],
          "name": "employment_type",
          "type": "String"
        },
        {
          "data": [
            0
          ],
          "name": "viSpidatOnFile",
          "type": "Integer"
        },
        {
          "data": [
            null
          ],
          "name": "additional_incomeSourceID",
          "type": "Integer"
        },
        {
          "data": [
            0
          ],
          "name": "additional_incomeAmount",
          "type": "Double"
        },
        {
          "data": [
            null
          ],
          "name": "foodStamps",
          "type": "Boolean"
        }
      ]
    }
  },
  "params": {
    "participant_id": 18
  },
  "propConfig": {
    "custom.RegistrationData": {
      "persistent": true
    },
    "custom.RegistrationData.active": {
      "onChange": {
        "enabled": null,
        "script": "\tif currentValue.value \u003d\u003d True or currentValue.value \u003d\u003d 1:\n\t\tself.custom.RegistrationData.time_deceased \u003d None"
      }
    },
    "custom.RegistrationData.chronic_health_conditions": {
      "onChange": {
        "enabled": null,
        "script": "\tif self.custom.RegistrationData.mental_health \u003d\u003d 1 and self.custom.RegistrationData.substance_abuse \u003d\u003d 1 and (self.custom.RegistrationData.physical_disability \u003d\u003d1 or currentValue.value \u003d\u003d 1):\n\t\tself.custom.RegistrationData.tri_morbid \u003d 1"
      }
    },
    "custom.RegistrationData.mental_health": {
      "onChange": {
        "enabled": null,
        "script": "\tif currentValue.value \u003d\u003d 1 and self.custom.RegistrationData.substance_abuse \u003d\u003d 1 and (self.custom.RegistrationData.chronic_health_conditions \u003d\u003d1 or self.custom.RegistrationData.physical_disability \u003d\u003d 1):\n\t\tself.custom.RegistrationData.tri_morbid \u003d 1\n\t\t"
      }
    },
    "custom.RegistrationData.physical_disability": {
      "onChange": {
        "enabled": null,
        "script": "\tif self.custom.RegistrationData.mental_health \u003d\u003d 1 and self.custom.RegistrationData.substance_abuse \u003d\u003d 1 and (self.custom.RegistrationData.chronic_health_conditions \u003d\u003d1 or currentValue.value \u003d\u003d 1):\n\t\tself.custom.RegistrationData.tri_morbid \u003d 1"
      }
    },
    "custom.RegistrationData.substance_abuse": {
      "onChange": {
        "enabled": null,
        "script": "\tif self.custom.RegistrationData.mental_health \u003d\u003d 1 and currentValue.value \u003d\u003d 1 and (self.custom.RegistrationData.physical_disability \u003d\u003d1 or self.custom.RegistrationData.chronic_health_conditions \u003d\u003d 1):\n\t\tself.custom.RegistrationData.tri_morbid \u003d 1"
      }
    },
    "custom.RegistrationData.time_deceased": {
      "onChange": {
        "enabled": null,
        "script": "\tif currentValue.value is not None:\n\t\tself.custom.RegistrationData.active \u003d 0"
      }
    },
    "custom.RegistrationData.tri_morbid": {
      "onChange": {
        "enabled": false,
        "script": "\tsystem.perspective.sendMessage(\"tri_morbid_value_changed\", payload\u003d{\u0027trimorbid_value\u0027:currentValue.value}, scope\u003d\u0027page\u0027)"
      }
    },
    "custom.RegistrationData.veteran_id": {
      "onChange": {
        "enabled": null,
        "script": "\tif currentValue.value \u003d\u003d 1:\n\t\tself.custom.RegistrationData.va_healthcare_eligible \u003d 0"
      }
    },
    "custom.func_refresh": {
      "onChange": {
        "enabled": null,
        "script": "\timport traceback\n\ttry:\n\t\trowCount \u003d 0\n\t\tif self.custom.sql_data is not None:\n\t\t\trowCount \u003d self.custom.sql_data.getRowCount()\n\t\tif self.custom.func_refresh and rowCount \u003e 0:\n\t\t\tdata \u003d self.custom.sql_data\n\t\t\t#ID\n\t\t\tself.custom.RegistrationData.human_id \u003d data.getValueAt(0,\u0027human_id\u0027)\n\t\t\tself.custom.RegistrationData.participant_id \u003d self.params.participant_id\n\t\t\t#Name\n\t\t\t#Set values to empty string as default\n\t\t\tself.custom.RegistrationData.first_name \u003d \u0027\u0027\n\t\t\tself.custom.RegistrationData.middle_name \u003d \u0027\u0027\n\t\t\tself.custom.RegistrationData.last_name \u003d \u0027\u0027\n\t\t\tself.custom.RegistrationData.suffix_name \u003d \u0027\u0027\n\t\t\tself.custom.RegistrationData.nick_name \u003d \u0027\u0027\n\t\t\t#Only load the data if not null\n\t\t\tif data.getValueAt(0,\u0027first_name\u0027) !\u003d None:\n\t\t\t\tself.custom.RegistrationData.first_name \u003d data.getValueAt(0,\u0027first_name\u0027)\n\t\t\tif data.getValueAt(0,\u0027middle_name\u0027) !\u003d None:\n\t\t\t\tself.custom.RegistrationData.middle_name \u003d data.getValueAt(0,\u0027middle_name\u0027)\n\t\t\tif data.getValueAt(0,\u0027last_name\u0027) !\u003d None:\n\t\t\t\tself.custom.RegistrationData.last_name \u003d data.getValueAt(0,\u0027last_name\u0027)\n\t\t\tif data.getValueAt(0,\u0027suffix_name\u0027) !\u003d None:\n\t\t\t\tself.custom.RegistrationData.suffix_name \u003d data.getValueAt(0,\u0027suffix_name\u0027)\n\t\t\tif data.getValueAt(0,\u0027nick_name\u0027) !\u003d None:\n\t\t\t\tself.custom.RegistrationData.nick_name \u003d data.getValueAt(0,\u0027nick_name\u0027)\n\t\t\tself.custom.RegistrationData.gender_id \u003d data.getValueAt(0,\u0027gender_id\u0027)\n\t\t\t#Numbers\n\t\t\tactive \u003d data.getValueAt(0,\u0027time_retired\u0027)\n\t\t\tif active !\u003d None: #Participant is not active if time retired has a date\n\t\t\t\tself.custom.RegistrationData.timeRetired \u003d active\n\t\t\t\tself.custom.RegistrationData.active \u003d 0\n\t\t\telse:\n\t\t\t\tself.custom.RegistrationData.timeRetired \u003d active\n\t\t\t\tself.custom.RegistrationData.active \u003d 1\n\t\t\tself.custom.RegistrationData.case_manager_id \u003d data.getValueAt(0,\u0027case_manager_id\u0027)\n\t\t\tssn \u003d data.getValueAt(0,\u0027ssn\u0027)[:3] + \u0027-\u0027 + data.getValueAt(0,\u0027ssn\u0027)[3:5] + \u0027-\u0027 + data.getValueAt(0,\u0027ssn\u0027)[5:]\n\t\t\tself.custom.RegistrationData.ssn \u003d ssn\n\t\t\tself.custom.RegistrationData.ssn_quality_id \u003d data.getValueAt(0,\u0027ssn_quality_id\u0027)\n\t\t\tdob \u003d data.getValueAt(0,\u0027dob\u0027)\n\t\t\tif dob \u003d\u003d None:\n\t\t\t\tself.custom.RegistrationData.dob \u003d None\n\t\t\telse:\n\t\t\t\tself.custom.RegistrationData.dob \u003d system.date.fromMillis(system.date.toMillis(dob))\n\t\t\t\n\t\t\tself.custom.RegistrationData.dob_quality \u003d data.getValueAt(0,\u0027dob_quality_id\u0027)\n\n\t\t\t#Status\t\n\t\t\tself.custom.RegistrationData.race_id \u003d data.getValueAt(0,\u0027race_id\u0027)\n\t\t\tself.custom.RegistrationData.ethnicity_id \u003d data.getValueAt(0,\u0027ethnicity_id\u0027)\n\t\t\tself.custom.RegistrationData.veteran_id \u003d data.getValueAt(0,\u0027veteran_id\u0027)\n\t\t\tself.custom.RegistrationData.disability_id \u003d data.getValueAt(0,\u0027disability_id\u0027)\n\t\t\ttime_deceased \u003d data.getValueAt(0,\u0027time_deceased\u0027)\n\t\t\tif time_deceased \u003d\u003d None:\n\t\t\t\tself.custom.RegistrationData.time_deceased \u003d None\n\t\t\telse:\n\t\t\t\tself.custom.RegistrationData.time_deceased \u003d time_deceased\t##system.date.toMillis(time_deceased)\n\t\t\t#Tri-morbid\n\t\t\ttri_morbid \u003d data.getValueAt(0,\u0027tri_morbid\u0027)\n\t\t\tif tri_morbid \u003d\u003d True:\n\t\t\t\tself.custom.RegistrationData.tri_morbid \u003d 1\n\t\t\telif tri_morbid \u003d\u003d False:\n\t\t\t\tself.custom.RegistrationData.tri_morbid \u003d 0\n\t\t\telse:\n\t\t\t\tself.custom.RegistrationData.tri_morbid \u003d -1\t\t\n\t\t\t#Chronic Homeless\n\t\t\tchronic_homeless \u003d data.getValueAt(0,\u0027chronic_homeless\u0027)\n\t\t\tif chronic_homeless \u003d\u003d True:\n\t\t\t\tself.custom.RegistrationData.chronic_homeless \u003d 1\n\t\t\telif chronic_homeless \u003d\u003d False:\n\t\t\t\tself.custom.RegistrationData.chronic_homeless \u003d 0\n\t\t\telse:\n\t\t\t\tself.custom.RegistrationData.chronic_homeless \u003d -1\n\t\t\tself.custom.RegistrationData.chronic_homeless_date \u003d  data.getValueAt(0,\u0027chronicHomelessDate\u0027)\t\n\t\t\t#SO Registry\n\t\t\tso_registry \u003d data.getValueAt(0,\u0027so_registry\u0027)\n\t\t\tif so_registry \u003d\u003d True:\n\t\t\t\tself.custom.RegistrationData.so_registry \u003d 1\n\t\t\telif so_registry \u003d\u003d False:\n\t\t\t\tself.custom.RegistrationData.so_registry \u003d 0\n\t\t\telse:\n\t\t\t\tself.custom.RegistrationData.so_registry \u003d -1\n\t\t\tself.custom.RegistrationData.so_registry_date \u003d  data.getValueAt(0,\u0027soRegistryDate\u0027)\t\n\t\t\t#Mail Service\n\t\t\tmail_service \u003d data.getValueAt(0,\u0027mail_service\u0027)\n\t\t\tif mail_service \u003d\u003d True:\n\t\t\t\tself.custom.RegistrationData.mail_service \u003d 1\n\t\t\telif mail_service \u003d\u003d False:\n\t\t\t\tself.custom.RegistrationData.mail_service \u003d 0\n\t\t\telse:\n\t\t\t\tself.custom.RegistrationData.mail_service \u003d -1\n\t\t\t#Address\n\t\t\t#Set values to empty string as default\n\t\t\tself.custom.RegistrationData.street \u003d \u0027\u0027\n\t\t\tself.custom.RegistrationData.city \u003d \u0027\u0027\n\t\t\tself.custom.RegistrationData.state \u003d \u0027\u0027\n\t\t\tself.custom.RegistrationData.zip_code \u003d \u0027\u0027\n\t\t\t#Only load the data if not null\n\t\t\tif data.getValueAt(0,\u0027street\u0027) !\u003d None:\n\t\t\t\tself.custom.RegistrationData.street \u003d data.getValueAt(0,\u0027street\u0027)\n\t\t\tif data.getValueAt(0,\u0027city\u0027) !\u003d None:\n\t\t\t\tself.custom.RegistrationData.city \u003d data.getValueAt(0,\u0027city\u0027)\n\t\t\tif data.getValueAt(0,\u0027state\u0027) !\u003d None:\n\t\t\t\tself.custom.RegistrationData.state \u003d data.getValueAt(0,\u0027state\u0027)\n\t\t\tif data.getValueAt(0,\u0027zip_code\u0027) !\u003d None:\n\t\t\t\tif int(data.getValueAt(0,\u0027zip_code\u0027)) \u003e 0:\n\t\t\t\t\tself.custom.RegistrationData.zip_code \u003d data.getValueAt(0,\u0027zip_code\u0027)\n\t\t\t#Contact info\n\t\t\t#Set values to empty string as default\n\t\t\tself.custom.RegistrationData.phone \u003d \u0027\u0027\n\t\t\tself.custom.RegistrationData.alt_phone \u003d \u0027\u0027\n\t\t\tself.custom.RegistrationData.email \u003d \u0027\u0027\n\t\t\t#Only load the data if not null\n\t\t\tif data.getValueAt(0,\u0027phone\u0027) !\u003d None:\n\t\t\t\tphone \u003d data.getValueAt(0,\u0027phone\u0027)[:3] + \u0027-\u0027 + data.getValueAt(0,\u0027phone\u0027)[3:6] + \u0027-\u0027 + data.getValueAt(0,\u0027phone\u0027)[6:]\n\t\t\t\tself.custom.RegistrationData.phone \u003d phone\n\t\t\tif data.getValueAt(0,\u0027alt_phone\u0027) !\u003d None:\n\t\t\t\talt_phone \u003d data.getValueAt(0,\u0027alt_phone\u0027)[:3] + \u0027-\u0027 + data.getValueAt(0,\u0027alt_phone\u0027)[3:6] + \u0027-\u0027 + data.getValueAt(0,\u0027alt_phone\u0027)[6:]\n\t\t\t\tself.custom.RegistrationData.alt_phone \u003d alt_phone\n\t\t\tif data.getValueAt(0,\u0027email\u0027) !\u003d None:\n\t\t\t\tself.custom.RegistrationData.email \u003d data.getValueAt(0,\u0027email\u0027)\n\t\t\tself.custom.RegistrationData.communication_type_id \u003d data.getValueAt(0,\u0027communication_type_id\u0027)\n\t\t\tself.custom.RegistrationData.insurance_type_id \u003d data.getValueAt(0,\u0027insurance_type_id\u0027)\n\t\t\t#Emergency Contact info\n\t\t\t#Set values to empty string as default\n\t\t\tself.custom.RegistrationData.emergency_contact_name \u003d \u0027\u0027\n\t\t\tself.custom.RegistrationData.emergency_contact_phone \u003d \u0027\u0027\n\t\t\tself.custom.RegistrationData.emergency_contact_email \u003d \u0027\u0027\n\t\t\t#Only load the data if not null\n\t\t\tif data.getValueAt(0,\u0027emergency_contact_name\u0027) !\u003d None:\n\t\t\t\tself.custom.RegistrationData.emergency_contact_name \u003d data.getValueAt(0,\u0027emergency_contact_name\u0027)\n\t\t\tif data.getValueAt(0,\u0027emergency_contact_phone\u0027) !\u003d None:\n\t\t\t\tec_phone \u003d data.getValueAt(0,\u0027emergency_contact_phone\u0027)[:3] + \u0027-\u0027 + data.getValueAt(0,\u0027emergency_contact_phone\u0027)[3:6] + \u0027-\u0027 + data.getValueAt(0,\u0027emergency_contact_phone\u0027)[6:]\n\t\t\t\tself.custom.RegistrationData.emergency_contact_phone \u003d ec_phone\n\t\t\tif data.getValueAt(0,\u0027emergency_contact_email\u0027) !\u003d None:\n\t\t\t\tself.custom.RegistrationData.emergency_contact_email \u003d data.getValueAt(0,\u0027emergency_contact_email\u0027)\n\t\t\tself.custom.RegistrationData.emergency_contact_type_id \u003d data.getValueAt(0,\u0027emergency_contact_type_id\u0027)\n\t\t\t#Misc info\t\t\t\n\t\t\tself.custom.RegistrationData.family_id \u003d data.getValueAt(0,\u0027family_id\u0027)\n\t\t\tself.custom.RegistrationData.hoh_relationship_id \u003d data.getValueAt(0,\u0027hoh_relationship_id\u0027)\n\t\t\t#Set values to empty string as default\n\t\t\tself.custom.RegistrationData.employer \u003d \u0027\u0027\n\t\t\tself.custom.RegistrationData.school \u003d \u0027\u0027\n\t\t\tself.custom.RegistrationData.congregation \u003d \u0027\u0027\n\t\t\t#Only load the data if not null\n\t\t\tif data.getValueAt(0,\u0027employer\u0027) !\u003d None:\n\t\t\t\tself.custom.RegistrationData.employer \u003d data.getValueAt(0,\u0027employer\u0027)\n#\t\t\tif data.getValueAt(0,\u0027school\u0027) !\u003d None:\n#\t\t\t\tself.custom.RegistrationData.school \u003d data.getValueAt(0,\u0027school\u0027)\n#\t\t\tif data.getValueAt(0,\u0027congregation\u0027) !\u003d None:\n#\t\t\t\tself.custom.RegistrationData.congregation \u003d data.getValueAt(0,\u0027congregation\u0027)\n\t\t\n\t\t\t## set the values as empty be defult for health conditions\n\t\t\tmentalHealth \u003d data.getValueAt(0,\u0027mentalHealth\u0027)\n\t\t\tif mentalHealth \u003d\u003d True:\n\t\t\t\tself.custom.RegistrationData.mental_health \u003d 1\n\t\t\telif mentalHealth \u003d\u003d False:\n\t\t\t\tself.custom.RegistrationData.mental_health \u003d 0\n\t\t\telse:\n\t\t\t\tself.custom.RegistrationData.mental_health \u003d -1\n\t\t\t\n\t\t\tchronicHealthConditions \u003d data.getValueAt(0,\u0027chronicHealthCoditions\u0027)\n\t\t\tif chronicHealthConditions \u003d\u003d True:\n\t\t\t\tself.custom.RegistrationData.chronic_health_conditions \u003d 1\n\t\t\telif chronicHealthConditions \u003d\u003d False:\n\t\t\t\tself.custom.RegistrationData.chronic_health_conditions \u003d 0\n\t\t\telse:\n\t\t\t\tself.custom.RegistrationData.chronic_health_conditions \u003d -1\n\t\t\t\n\t\t\tphysicalDisability \u003d data.getValueAt(0,\u0027physicalDisability\u0027)\n\t\t\tif physicalDisability \u003d\u003d True:\n\t\t\t\tself.custom.RegistrationData.physical_disability \u003d 1\n\t\t\telif physicalDisability \u003d\u003d False:\n\t\t\t\tself.custom.RegistrationData.physical_disability \u003d 0\n\t\t\telse:\n\t\t\t\tself.custom.RegistrationData.physical_disability \u003d -1\n\t\t\t\n\t\t\tdevelopmentalDisability \u003d data.getValueAt(0,\u0027developmentalDisability\u0027)\n\t\t\tif developmentalDisability \u003d\u003d True:\n\t\t\t\tself.custom.RegistrationData.developmental_disability \u003d 1\n\t\t\telif developmentalDisability \u003d\u003d False:\n\t\t\t\tself.custom.RegistrationData.developmental_disability \u003d 0\n\t\t\telse:\n\t\t\t\tself.custom.RegistrationData.developmental_disability \u003d -1\n\t\t\t\n\t\t\tsubstanceAbuse \u003d data.getValueAt(0,\u0027substanceAbuse\u0027)\n\t\t\tself.custom.RegistrationData.substance_abuse \u003d substanceAbuse\n#\t\t\tif substanceAbuse \u003d\u003d True:\n#\t\t\t\tself.custom.RegistrationData.substance_abuse \u003d 1\n#\t\t\telif substanceAbuse \u003d\u003d False:\n#\t\t\t\tself.custom.RegistrationData.substance_abuse \u003d 0\n#\t\t\telse:\n#\t\t\t\tself.custom.RegistrationData.substance_abuse \u003d -1\n\t\t\t\n\t\t\t## set other values \n\t\t\tif data.getValueAt(0,\u0027lastHmisUpdateBy\u0027) is None:\n\t\t\t\tself.custom.RegistrationData.hmis_update_by \u003d \u0027\u0027\n\t\t\telse:\n\t\t\t\tself.custom.RegistrationData.hmis_update_by \u003d data.getValueAt(0,\u0027lastHmisUpdateBy\u0027)\n\t\t\tif data.getValueAt(0,\u0027hmis_number\u0027) is None:\n\t\t\t\tself.custom.RegistrationData.hmis_number \u003d \u0027\u0027\n\t\t\telse:\n\t\t\t\tself.custom.RegistrationData.hmis_number \u003d data.getValueAt(0,\u0027hmis_number\u0027)\n\t\t\tself.custom.RegistrationData.hmis_update_date \u003d data.getValueAt(0,\u0027lastHmisUpdateDate\u0027)\n\t\t\tif data.getValueAt(0,\u0027vaHealthcareEligible\u0027) \u003d\u003d True:\n\t\t\t\tself.custom.RegistrationData.va_healthcare_eligible  \u003d 1\n\t\t\telif data.getValueAt(0,\u0027vaHealthcareEligible\u0027) \u003d\u003d False:\n\t\t\t\tself.custom.RegistrationData.va_healthcare_eligible  \u003d 0\n\t\t\telse:\n\t\t\t\tself.custom.RegistrationData.va_healthcare_eligible  \u003d 2\n\t\t\t\n\t\t\tself.custom.RegistrationData.vi_spidat_date \u003d data.getValueAt(0,\u0027viSpidatAssessmentDate\u0027)\n\t\t\tviSpidatOnFile\u003d data.getValueAt(0,\u0027viSpidatOnFile\u0027)\n#\t\t\tsystem.perspective.print(\"viSpidatOnFile\" + str(viSpidatOnFile))\n\t\t\tif viSpidatOnFile \u003d\u003d True:\n\t\t\t\tself.custom.RegistrationData.vi_spidat_on_file \u003d 1\n\t\t\telif viSpidatOnFile \u003d\u003d False:\n\t\t\t\tself.custom.RegistrationData.vi_spidat_on_file \u003d 0\n\t\t\telse:\n\t\t\t\tself.custom.RegistrationData.vi_spidat_on_file \u003d -1\n\t\t\t\t\n\t\t\tif data.getValueAt(0,\u0027viSpidatScore\u0027) is None:\n\t\t\t\tself.custom.RegistrationData.vi_spidat_score \u003d -1\n\t\t\telse:\n\t\t\t\tself.custom.RegistrationData.vi_spidat_score \u003d data.getValueAt(0,\u0027viSpidatScore\u0027)\n\t\t\tif data.getValueAt(0,\u0027incomeSourceID\u0027) is None:\n\t\t\t\tself.custom.RegistrationData.income_source \u003d -1\n\t\t\telse:\n\t\t\t\tself.custom.RegistrationData.income_source \u003d data.getValueAt(0,\u0027incomeSourceID\u0027)\n\t\t\tif data.getValueAt(0,\u0027incomeAmount\u0027) is None:\n\t\t\t\tself.custom.RegistrationData.income_amount \u003d 0\n\t\t\telse:\n\t\t\t\tself.custom.RegistrationData.income_amount \u003d data.getValueAt(0,\u0027incomeAmount\u0027)\n\t\t\tself.custom.RegistrationData.income_start_date \u003d data.getValueAt(0,\u0027incomeStartDate\u0027)\n\t\t\tself.custom.RegistrationData.employment_type \u003d data.getValueAt(0,\u0027employment_type\u0027)\n\t\t\t\n\t\t\t## adding biracial selection\n\t\t\tself.custom.RegistrationData.biracial_id \u003d data.getValueAt(0,\u0027biracialId\u0027)\n\t\t\t\n\t\t\t## add new details as per ticket 305\n\t\t\tif data.getValueAt(0,\u0027additional_incomeSourceID\u0027) is None:\n\t\t\t\tself.custom.RegistrationData.additional_income_source \u003d -1\n\t\t\telse:\n\t\t\t\tself.custom.RegistrationData.additional_income_source \u003d data.getValueAt(0,\u0027additional_incomeSourceID\u0027)\n\t\t\t\n\t\t\tif data.getValueAt(0,\u0027additional_incomeAmount\u0027) is None:\n\t\t\t\tself.custom.RegistrationData.additional_income_amount \u003d 0\n\t\t\telse:\n\t\t\t\tself.custom.RegistrationData.additional_income_amount \u003d data.getValueAt(0,\u0027additional_incomeAmount\u0027)\n\t\t\t\n\t\t\tfoodStamps\u003d data.getValueAt(0,\u0027foodStamps\u0027)\n\t\t\tif foodStamps \u003d\u003d True:\n\t\t\t\tself.custom.RegistrationData.food_stamps \u003d 1\n\t\t\telif foodStamps \u003d\u003d False:\n\t\t\t\tself.custom.RegistrationData.food_stamps \u003d 0\n\t\t\telse:\n\t\t\t\tself.custom.RegistrationData.food_stamps \u003d -1\t\n\t\t#set the refresh trigger to false when finished\n\t\tself.custom.func_refresh \u003d False\n\t\n\texcept:\n\t\tlogger \u003d system.util.getLogger(\"Participants Personal Detail Edit view.custom.func_refresh\")\n\t\tmsg \u003d traceback.format_exc()\n\t\tlogger.error(msg)"
      },
      "persistent": true
    },
    "custom.sql_data": {
      "binding": {
        "config": {
          "parameters": {
            "participant_id": "{view.params.participant_id}"
          },
          "queryPath": "Participants/Personal/PersonalDetailSelect",
          "returnFormat": "dataset"
        },
        "type": "query"
      },
      "onChange": {
        "enabled": null,
        "script": "\tself.custom.func_refresh \u003d True"
      },
      "persistent": true
    },
    "params.participant_id": {
      "paramDirection": "input",
      "persistent": true
    }
  },
  "props": {
    "defaultSize": {
      "height": 703,
      "width": 1344
    }
  },
  "root": {
    "children": [
      {
        "meta": {
          "name": "Header"
        },
        "position": {
          "shrink": 0
        },
        "props": {
          "params": {
            "Text": "Personal Information"
          },
          "path": "Participants/Templates/Header",
          "useDefaultViewHeight": true
        },
        "type": "ia.display.view"
      },
      {
        "meta": {
          "name": "Label_0"
        },
        "position": {
          "basis": "100px",
          "display": false,
          "shrink": 0
        },
        "propConfig": {
          "props.text": {
            "binding": {
              "config": {
                "path": "view.custom.sql_data"
              },
              "type": "property"
            }
          }
        },
        "props": {
          "style": {
            "classes": "Text/Error_Message"
          }
        },
        "type": "ia.display.label"
      },
      {
        "meta": {
          "name": "Label_1"
        },
        "position": {
          "basis": "32px",
          "display": false
        },
        "propConfig": {
          "props.text": {
            "binding": {
              "config": {
                "expression": "\u0027First:\u0027 +\r\n{view.custom.RegistrationData.first_name} +\r\n\u0027, Middle:\u0027 +\r\n{view.custom.RegistrationData.middle_name}+\r\n\u0027, Last:\u0027 +\r\n{view.custom.RegistrationData.last_name} +\r\n\u0027, Suffix:\u0027 +\r\n{view.custom.RegistrationData.suffix_name} +\r\n\u0027, Nick:\u0027 +\r\n{view.custom.RegistrationData.nick_name} +\r\n\u0027, Gender:\u0027 +\r\n{view.custom.RegistrationData.gender_id}"
              },
              "type": "expr"
            }
          }
        },
        "props": {
          "style": {
            "classes": "Text/Error_Message"
          }
        },
        "type": "ia.display.label"
      },
      {
        "meta": {
          "name": "Row10"
        },
        "position": {
          "basis": "60px",
          "shrink": 0
        },
        "propConfig": {
          "props.params.first_name": {
            "binding": {
              "config": {
                "bidirectional": true,
                "path": "view.custom.RegistrationData.first_name"
              },
              "type": "property"
            }
          },
          "props.params.last_name": {
            "binding": {
              "config": {
                "bidirectional": true,
                "path": "view.custom.RegistrationData.last_name"
              },
              "type": "property"
            }
          },
          "props.params.middle_name": {
            "binding": {
              "config": {
                "bidirectional": true,
                "path": "view.custom.RegistrationData.middle_name"
              },
              "type": "property"
            }
          },
          "props.params.nick_name": {
            "binding": {
              "config": {
                "bidirectional": true,
                "path": "view.custom.RegistrationData.nick_name"
              },
              "type": "property"
            }
          },
          "props.params.ssn": {
            "binding": {
              "config": {
                "bidirectional": true,
                "path": "view.custom.RegistrationData.ssn"
              },
              "type": "property"
            }
          },
          "props.params.ssn_quality_id": {
            "binding": {
              "config": {
                "bidirectional": true,
                "path": "view.custom.RegistrationData.ssn_quality_id"
              },
              "type": "property"
            }
          },
          "props.params.suffix_name": {
            "binding": {
              "config": {
                "bidirectional": true,
                "path": "view.custom.RegistrationData.suffix_name"
              },
              "type": "property"
            }
          }
        },
        "props": {
          "path": "Participants/Registration/Detail/Edit/Row10",
          "style": {
            "marginLeft": "25px",
            "marginRight": "25px"
          }
        },
        "type": "ia.display.view"
      },
      {
        "meta": {
          "name": "Label"
        },
        "position": {
          "basis": "32px",
          "display": false,
          "shrink": 0
        },
        "propConfig": {
          "props.text": {
            "binding": {
              "config": {
                "expression": "\u0027Active:\u0027 +\r\n{view.custom.RegistrationData.active} +\r\n\u0027, Case Mgr:\u0027 +\r\n{view.custom.RegistrationData.case_manager_id}+\r\n\u0027, ssn:\u0027 +\r\n{view.custom.RegistrationData.ssn} +\r\n\u0027, ssn qual:\u0027 +\r\n{view.custom.RegistrationData.ssn_quality_id} +\r\n\u0027, dob:\u0027 +\r\n{view.custom.RegistrationData.dob} +\r\n\u0027, dob qual:\u0027 + \r\n{view.custom.RegistrationData.dob_quality}"
              },
              "type": "expr"
            }
          }
        },
        "props": {
          "style": {
            "classes": "Text/Error_Message"
          }
        },
        "type": "ia.display.label"
      },
      {
        "meta": {
          "name": "Row20"
        },
        "position": {
          "basis": "60px",
          "shrink": 0
        },
        "propConfig": {
          "props.params.biracial_id": {
            "binding": {
              "config": {
                "bidirectional": true,
                "path": "view.custom.RegistrationData.biracial_id"
              },
              "type": "property"
            }
          },
          "props.params.dob": {
            "binding": {
              "config": {
                "bidirectional": true,
                "path": "view.custom.RegistrationData.dob"
              },
              "type": "property"
            }
          },
          "props.params.dob_quality_id": {
            "binding": {
              "config": {
                "bidirectional": true,
                "path": "view.custom.RegistrationData.dob_quality"
              },
              "type": "property"
            }
          },
          "props.params.ethnicity_id": {
            "binding": {
              "config": {
                "bidirectional": true,
                "path": "view.custom.RegistrationData.ethnicity_id"
              },
              "type": "property"
            }
          },
          "props.params.gender_id": {
            "binding": {
              "config": {
                "bidirectional": true,
                "path": "view.custom.RegistrationData.gender_id"
              },
              "type": "property"
            }
          },
          "props.params.hoh_relationship_id": {
            "binding": {
              "config": {
                "bidirectional": true,
                "path": "view.custom.RegistrationData.hoh_relationship_id"
              },
              "type": "property"
            }
          },
          "props.params.race_id": {
            "binding": {
              "config": {
                "bidirectional": true,
                "path": "view.custom.RegistrationData.race_id"
              },
              "type": "property"
            }
          }
        },
        "props": {
          "path": "Participants/Registration/Detail/Edit/Row20",
          "style": {
            "marginLeft": "25px",
            "marginRight": "25px"
          }
        },
        "type": "ia.display.view"
      },
      {
        "meta": {
          "name": "Label_2"
        },
        "position": {
          "basis": "32px",
          "display": false
        },
        "propConfig": {
          "props.text": {
            "binding": {
              "config": {
                "expression": "\u0027Race:\u0027 +\r\n{view.custom.RegistrationData.race_id} +\r\n\u0027, Ethnicity:\u0027 +\r\n{view.custom.RegistrationData.ethnicity_id}+\r\n\u0027, Veteran:\u0027 +\r\n{view.custom.RegistrationData.veteran_id} +\r\n\u0027, Disability:\u0027 +\r\n{view.custom.RegistrationData.disability_id} +\r\n\u0027, Deceased:\u0027 +\r\n{view.custom.RegistrationData.time_deceased}"
              },
              "type": "expr"
            }
          }
        },
        "props": {
          "style": {
            "classes": "Text/Error_Message"
          }
        },
        "type": "ia.display.label"
      },
      {
        "meta": {
          "name": "Row30"
        },
        "position": {
          "basis": "60px",
          "shrink": 0
        },
        "propConfig": {
          "props.params.insurance_type_id": {
            "binding": {
              "config": {
                "bidirectional": true,
                "path": "view.custom.RegistrationData.insurance_type_id"
              },
              "type": "property"
            }
          },
          "props.params.va_healthcare_eligibility": {
            "binding": {
              "config": {
                "bidirectional": true,
                "path": "view.custom.RegistrationData.va_healthcare_eligible"
              },
              "type": "property"
            }
          },
          "props.params.veteran_id": {
            "binding": {
              "config": {
                "bidirectional": true,
                "path": "view.custom.RegistrationData.veteran_id"
              },
              "type": "property"
            }
          }
        },
        "props": {
          "path": "Participants/Registration/Detail/Edit/Row30",
          "style": {
            "marginLeft": "25px",
            "marginRight": "25px"
          }
        },
        "type": "ia.display.view"
      },
      {
        "meta": {
          "name": "Label_3"
        },
        "position": {
          "basis": "32px",
          "display": false
        },
        "propConfig": {
          "props.text": {
            "binding": {
              "config": {
                "expression": "\u0027Street:\u0027 +\r\n{view.custom.RegistrationData.street} +\r\n\u0027, City:\u0027 +\r\n{view.custom.RegistrationData.city}+\r\n\u0027, State:\u0027 +\r\n{view.custom.RegistrationData.state} +\r\n\u0027, Zip:\u0027 +\r\n{view.custom.RegistrationData.zip_code}"
              },
              "type": "expr"
            }
          }
        },
        "props": {
          "style": {
            "classes": "Text/Error_Message"
          }
        },
        "type": "ia.display.label"
      },
      {
        "meta": {
          "name": "Row32"
        },
        "position": {
          "basis": "60px",
          "shrink": 0
        },
        "propConfig": {
          "props.params.chronic_health_conditions": {
            "binding": {
              "config": {
                "bidirectional": true,
                "path": "view.custom.RegistrationData.chronic_health_conditions"
              },
              "type": "property"
            }
          },
          "props.params.developmental_disability": {
            "binding": {
              "config": {
                "bidirectional": true,
                "path": "view.custom.RegistrationData.developmental_disability"
              },
              "type": "property"
            }
          },
          "props.params.disability_id": {
            "binding": {
              "config": {
                "bidirectional": true,
                "path": "view.custom.RegistrationData.disability_id"
              },
              "type": "property"
            }
          },
          "props.params.mental_health": {
            "binding": {
              "config": {
                "bidirectional": true,
                "path": "view.custom.RegistrationData.mental_health"
              },
              "type": "property"
            }
          },
          "props.params.physical_disability": {
            "binding": {
              "config": {
                "bidirectional": true,
                "path": "view.custom.RegistrationData.physical_disability"
              },
              "type": "property"
            }
          },
          "props.params.substance_abuse": {
            "binding": {
              "config": {
                "bidirectional": true,
                "path": "view.custom.RegistrationData.substance_abuse"
              },
              "type": "property"
            }
          }
        },
        "props": {
          "path": "Participants/Registration/Detail/Edit/Row32",
          "style": {
            "marginLeft": "25px",
            "marginRight": "25px"
          }
        },
        "type": "ia.display.view"
      },
      {
        "meta": {
          "name": "Row33"
        },
        "position": {
          "basis": "60px",
          "shrink": 0
        },
        "propConfig": {
          "props.params.chronic_homeless": {
            "binding": {
              "config": {
                "bidirectional": true,
                "path": "view.custom.RegistrationData.chronic_homeless"
              },
              "type": "property"
            }
          },
          "props.params.hmis_number": {
            "binding": {
              "config": {
                "bidirectional": true,
                "path": "view.custom.RegistrationData.hmis_number"
              },
              "type": "property"
            }
          },
          "props.params.hmis_update_by": {
            "binding": {
              "config": {
                "bidirectional": true,
                "path": "view.custom.RegistrationData.hmis_update_by"
              },
              "type": "property"
            }
          },
          "props.params.hmis_update_date": {
            "binding": {
              "config": {
                "bidirectional": true,
                "path": "view.custom.RegistrationData.hmis_update_date"
              },
              "type": "property"
            }
          },
          "props.params.physical_disability": {
            "binding": {
              "config": {
                "bidirectional": true,
                "path": "view.custom.RegistrationData.physical_disability"
              },
              "type": "property"
            }
          },
          "props.params.vi_spidat_on_file": {
            "binding": {
              "config": {
                "bidirectional": true,
                "path": "view.custom.RegistrationData.vi_spidat_on_file"
              },
              "type": "property"
            }
          },
          "props.params.vi_spidat_score": {
            "binding": {
              "config": {
                "bidirectional": true,
                "path": "view.custom.RegistrationData.vi_spidat_score"
              },
              "type": "property"
            }
          }
        },
        "props": {
          "path": "Participants/Registration/Detail/Edit/Row33",
          "style": {
            "marginLeft": "25px",
            "marginRight": "25px"
          }
        },
        "type": "ia.display.view"
      },
      {
        "meta": {
          "name": "Row35"
        },
        "position": {
          "basis": "60px",
          "shrink": 0
        },
        "propConfig": {
          "props.params.emergency_contact_email": {
            "binding": {
              "config": {
                "bidirectional": true,
                "path": "view.custom.RegistrationData.emergency_contact_email"
              },
              "type": "property"
            }
          },
          "props.params.emergency_contact_name": {
            "binding": {
              "config": {
                "bidirectional": true,
                "path": "view.custom.RegistrationData.emergency_contact_name"
              },
              "type": "property"
            }
          },
          "props.params.emergency_contact_phone": {
            "binding": {
              "config": {
                "bidirectional": true,
                "path": "view.custom.RegistrationData.emergency_contact_phone"
              },
              "type": "property"
            }
          },
          "props.params.emergency_contact_type_id": {
            "binding": {
              "config": {
                "bidirectional": true,
                "path": "view.custom.RegistrationData.emergency_contact_type_id"
              },
              "type": "property"
            }
          },
          "props.params.family_id": {
            "binding": {
              "config": {
                "bidirectional": true,
                "path": "view.custom.RegistrationData.family_id"
              },
              "type": "property"
            }
          }
        },
        "props": {
          "path": "Participants/Registration/Detail/Edit/Row35",
          "style": {
            "marginLeft": "25px",
            "marginRight": "25px"
          }
        },
        "type": "ia.display.view"
      },
      {
        "meta": {
          "name": "Row40"
        },
        "position": {
          "basis": "60px",
          "shrink": 0
        },
        "propConfig": {
          "props.params.alt_phone": {
            "binding": {
              "config": {
                "bidirectional": true,
                "path": "view.custom.RegistrationData.alt_phone"
              },
              "type": "property"
            }
          },
          "props.params.communication_type_id": {
            "binding": {
              "config": {
                "bidirectional": true,
                "path": "view.custom.RegistrationData.communication_type_id"
              },
              "type": "property"
            }
          },
          "props.params.email": {
            "binding": {
              "config": {
                "bidirectional": true,
                "path": "view.custom.RegistrationData.email"
              },
              "type": "property"
            }
          },
          "props.params.mail_service": {
            "binding": {
              "config": {
                "bidirectional": true,
                "path": "view.custom.RegistrationData.mail_service"
              },
              "type": "property"
            }
          },
          "props.params.phone": {
            "binding": {
              "config": {
                "bidirectional": true,
                "path": "view.custom.RegistrationData.phone"
              },
              "type": "property"
            }
          },
          "props.params.zip_code": {
            "binding": {
              "config": {
                "bidirectional": true,
                "path": "view.custom.RegistrationData.zip_code"
              },
              "type": "property"
            }
          }
        },
        "props": {
          "path": "Participants/Registration/Detail/Edit/Row40",
          "style": {
            "marginLeft": "25px",
            "marginRight": "25px"
          }
        },
        "type": "ia.display.view"
      },
      {
        "meta": {
          "name": "Row50"
        },
        "position": {
          "basis": "60px",
          "shrink": 0
        },
        "propConfig": {
          "props.params.employer": {
            "binding": {
              "config": {
                "bidirectional": true,
                "path": "view.custom.RegistrationData.employer"
              },
              "type": "property"
            }
          },
          "props.params.fullTime_partTime": {
            "binding": {
              "config": {
                "bidirectional": true,
                "path": "view.custom.RegistrationData.employment_type"
              },
              "type": "property"
            }
          },
          "props.params.income_amount": {
            "binding": {
              "config": {
                "bidirectional": true,
                "path": "view.custom.RegistrationData.income_amount"
              },
              "type": "property"
            }
          },
          "props.params.income_source": {
            "binding": {
              "config": {
                "bidirectional": true,
                "path": "view.custom.RegistrationData.income_source"
              },
              "type": "property"
            }
          },
          "props.params.income_start_date": {
            "binding": {
              "config": {
                "bidirectional": true,
                "path": "view.custom.RegistrationData.income_start_date"
              },
              "type": "property"
            }
          }
        },
        "props": {
          "path": "Participants/Registration/Detail/Edit/Row50",
          "style": {
            "marginLeft": "25px",
            "marginRight": "25px"
          }
        },
        "type": "ia.display.view"
      },
      {
        "meta": {
          "name": "Row55"
        },
        "position": {
          "basis": "60px",
          "shrink": 0
        },
        "propConfig": {
          "props.params.additional_income_amount": {
            "binding": {
              "config": {
                "bidirectional": true,
                "path": "view.custom.RegistrationData.additional_income_amount"
              },
              "type": "property"
            }
          },
          "props.params.additional_income_source": {
            "binding": {
              "config": {
                "bidirectional": true,
                "path": "view.custom.RegistrationData.additional_income_source"
              },
              "type": "property"
            }
          },
          "props.params.food_stamps": {
            "binding": {
              "config": {
                "bidirectional": true,
                "path": "view.custom.RegistrationData.food_stamps"
              },
              "type": "property"
            }
          }
        },
        "props": {
          "path": "Participants/Registration/Detail/Edit/Row55",
          "style": {
            "marginLeft": "25px",
            "marginRight": "25px"
          }
        },
        "type": "ia.display.view"
      },
      {
        "meta": {
          "name": "Row60"
        },
        "position": {
          "basis": "60px",
          "shrink": 0
        },
        "propConfig": {
          "props.params.active": {
            "binding": {
              "config": {
                "bidirectional": true,
                "path": "view.custom.RegistrationData.active"
              },
              "type": "property"
            }
          },
          "props.params.case_manager_id": {
            "binding": {
              "config": {
                "bidirectional": true,
                "path": "view.custom.RegistrationData.case_manager_id"
              },
              "type": "property"
            }
          },
          "props.params.so_registry": {
            "binding": {
              "config": {
                "bidirectional": true,
                "path": "view.custom.RegistrationData.so_registry"
              },
              "type": "property"
            }
          },
          "props.params.so_registry_date": {
            "binding": {
              "config": {
                "bidirectional": true,
                "path": "view.custom.RegistrationData.so_registry_date"
              },
              "type": "property"
            }
          },
          "props.params.time_deceased": {
            "binding": {
              "config": {
                "bidirectional": true,
                "path": "view.custom.RegistrationData.time_deceased"
              },
              "type": "property"
            }
          }
        },
        "props": {
          "params": {
            "callTheNameService": "No"
          },
          "path": "Participants/Registration/Detail/Edit/Row60",
          "style": {
            "marginLeft": "25px",
            "marginRight": "25px"
          }
        },
        "type": "ia.display.view"
      },
      {
        "children": [
          {
            "events": {
              "component": {
                "onActionPerformed": {
                  "config": {
                    "script": "\timport traceback\n\timport re\n\ttry:\n\t\tproject \u003d \"RITI\"\n\t\t### Declare parameters \n\t\tdataPrevSQL \u003d self.view.custom.sql_data\n\t\t#General Info\n\t\tuser_name \u003d self.session.props.auth.user.userName\n\t\thuman_id \u003d self.view.custom.RegistrationData.human_id\n\t\tparticipant_id \u003d self.view.custom.RegistrationData.participant_id\n\t\t#First Row\t\t\n\t\tfirst_name \u003d self.view.custom.RegistrationData.first_name\n\t\tmiddle_name \u003d self.view.custom.RegistrationData.middle_name\n\t\tlast_name \u003d self.view.custom.RegistrationData.last_name\n\t\tsuffix_name \u003d self.view.custom.RegistrationData.suffix_name\n\t\tnick_name \u003d self.view.custom.RegistrationData.nick_name\n\t\tif nick_name \u003d\u003d None:\n\t\t\tnick_name \u003d \u0027\u0027\n\t\tgender_id \u003d self.view.custom.RegistrationData.gender_id\n\t\tcallTheNameService \u003d self.parent.parent.getChild(\"Row60\").props.params.callTheNameService\n#\t\tsystem.perspective.print(\"after first row\")\n\t\t#Second Row\n\t\tif self.view.custom.RegistrationData.active \u003d\u003d 0:#Retire Inactive Participant\n\t\t\tif self.view.custom.RegistrationData.timeRetired is None:\n\t\t\t\tactive \u003d system.date.now()\n\t\t\telse:\n\t\t\t\tactive \u003d self.view.custom.RegistrationData.timeRetired\n\t\telse:\n\t\t\tactive \u003d None\n\t\t\n\t\tcase_manager_id \u003d self.view.custom.RegistrationData.case_manager_id\n\t\tssn \u003d self.view.custom.RegistrationData.ssn\n\t\tssn_quality_id \u003d self.view.custom.RegistrationData.ssn_quality_id\n\t\tdob \u003d self.view.custom.RegistrationData.dob\n\t\tdob_quality_id \u003d self.view.custom.RegistrationData.dob_quality\n\t\tdobForFamilyCreation \u003d \u00271900\u0027\n\t\t\n#\t\tsystem.perspective.print(\"after second row\")\n\t\t#Third Row\n\t\trace_id \u003d self.view.custom.RegistrationData.race_id\n\t\tethnicity_id \u003d self.view.custom.RegistrationData.ethnicity_id\n\t\tveteran_id \u003d self.view.custom.RegistrationData.veteran_id\n\t\tdisability_id \u003d self.view.custom.RegistrationData.disability_id\n\t\ttime_deceased \u003d self.view.custom.RegistrationData.time_deceased\n\t\tbiracial_id \u003d self.view.custom.RegistrationData.biracial_id\n#\t\tsystem.perspective.print(\"after third row\")\n#\t\tAdded 07/30/2022 Andrew Hunt. Autoset Active status to false if deceased\n#\t\tActive Status derived from participant.timeRetired, which is the key to all \u0027live\u0027 dashboard filtering\n#\t\tif time_deceased is not None:\n#\t\t\tactive \u003d system.date.now()\n\t\t\n\t\t#fourth Row\n\t\tmentalHealth \u003d self.view.custom.RegistrationData.mental_health\n\t\tif mentalHealth \u003d\u003d -1 or mentalHealth \u003d\u003d \u0027\u0027:\n\t\t\tmentalHealth \u003d None\n\t\tchronicHealthConditions \u003d self.view.custom.RegistrationData.chronic_health_conditions\n\t\tif chronicHealthConditions \u003d\u003d -1 or chronicHealthConditions \u003d\u003d \u0027\u0027:\n\t\t\tchronicHealthConditions \u003d None\n\t\tphysicalDisability \u003d self.view.custom.RegistrationData.physical_disability\n\t\tif physicalDisability \u003d\u003d -1 or physicalDisability \u003d\u003d \u0027\u0027:\n\t\t\tphysicalDisability \u003d None\n\t\tdevelopmentalDisability \u003d self.view.custom.RegistrationData.developmental_disability\n\t\tif developmentalDisability \u003d\u003d -1 or developmentalDisability \u003d\u003d \u0027\u0027:\n\t\t\tdevelopmentalDisability \u003d None\n\t\tsubstanceAbuse \u003d self.view.custom.RegistrationData.substance_abuse\n\t\tif substanceAbuse \u003d\u003d -1 or substanceAbuse \u003d\u003d \u0027\u0027:\n\t\t\tsubstanceAbuse \u003d None\n\t\t\n\t\t#fifth Row\n\t\tif self.view.custom.RegistrationData.tri_morbid \u003d\u003d -1:\n\t\t\ttri_morbid \u003d None\n\t\telse:\n\t\t\ttri_morbid \u003d self.view.custom.RegistrationData.tri_morbid\n\t\t\n\t\tif self.view.custom.RegistrationData.chronic_homeless \u003d\u003d -1:\n\t\t\tchronic_homeless \u003d None\n\t\telse:\n\t\t\tchronic_homeless \u003d self.view.custom.RegistrationData.chronic_homeless\n\t\t\n\t\tif self.view.custom.RegistrationData.chronic_homeless \u003d\u003d -1 or self.view.custom.RegistrationData.chronic_homeless \u003d\u003d 0:\n\t\t\tchronic_homeless_date \u003d None\n\t\telse:\n\t\t\tif self.view.custom.RegistrationData.chronic_homeless_date \u003d\u003d None: \n\t\t\t## previous was No\n\t\t\t\tchronic_homeless_date \u003d system.date.now()\n\t\t\telse:\n\t\t\t\tchronic_homeless_date \u003d self.view.custom.RegistrationData.chronic_homeless_date\n\t\t\t\n\t\tif self.view.custom.RegistrationData.so_registry \u003d\u003d -1:\n\t\t\tso_registry \u003d None\n\t\telse:\n\t\t\tso_registry \u003d self.view.custom.RegistrationData.so_registry\n\t\t\n\t\t\t\n\t\tif self.view.custom.RegistrationData.mail_service \u003d\u003d -1:\n\t\t\tmail_service \u003d None\n\t\telse:\n\t\t\tmail_service \u003d self.view.custom.RegistrationData.mail_service\n\t\t\n\t\t\n#\t\tstreet \u003d self.view.custom.RegistrationData.street\n#\t\tcity \u003d self.view.custom.RegistrationData.city\n#\t\tstate \u003d self.view.custom.RegistrationData.state\n\t\tzip_code \u003d self.view.custom.RegistrationData.zip_code\n\t\tif zip_code \u003d\u003d None:\n\t\t\tzip_code \u003d \u0027\u0027\n\t\t\n\t\t#sixth Row\n\t\tlastHmisUpdateDate \u003d self.view.custom.RegistrationData.hmis_update_date\n\t\tlastHmisUpdateBy \u003d self.view.custom.RegistrationData.hmis_update_by\n\t\thmis_number \u003d self.view.custom.RegistrationData.hmis_number\n\t\tviSpidatScore \u003d self.view.custom.RegistrationData.vi_spidat_score\n\t\tviSpidateAssessmentDate \u003d self.view.custom.RegistrationData.vi_spidat_date\n\t\tviSpidatOnFile \u003d self.view.custom.RegistrationData.vi_spidat_on_file\n\t\tif viSpidatOnFile \u003d\u003d -1 or viSpidatOnFile \u003d\u003d \u0027\u0027:\n\t\t\tviSpidatOnFile \u003d None\n\t\t\t\t\t\n\t\tvaHealthCareEligible \u003d self.view.custom.RegistrationData.va_healthcare_eligible\n\t\tif vaHealthCareEligible \u003d\u003d -1 or vaHealthCareEligible \u003d\u003d \u0027\u0027 or vaHealthCareEligible \u003d\u003d 2:\n\t\t\tvaHealthCareEligible \u003d None\n\t\t\n\t\t#seventh Row\n\t\tphone \u003d self.view.custom.RegistrationData.phone\n\t\talt_phone \u003d self.view.custom.RegistrationData.alt_phone\n\t\temail \u003d self.view.custom.RegistrationData.email\n\t\tcommunication_type_id \u003d self.view.custom.RegistrationData.communication_type_id\n\t\tinsurance_type_id \u003d self.view.custom.RegistrationData.insurance_type_id\n\t\t#eightth Row\n\t\temergency_contact_name \u003d self.view.custom.RegistrationData.emergency_contact_name\n\t\temergency_contact_phone \u003d self.view.custom.RegistrationData.emergency_contact_phone\n\t\temergency_contact_email \u003d self.view.custom.RegistrationData.emergency_contact_email\n\t\temergency_contact_type_id \u003d self.view.custom.RegistrationData.emergency_contact_type_id\n#\t\tsystem.perspective.print(\"after sixth row\")\n\t\t\n\t\t#ninth Row\n\t\tfamily_id \u003d self.view.custom.RegistrationData.family_id\n\t\thoh_relationship_id \u003d self.view.custom.RegistrationData.hoh_relationship_id\n\t\temployer \u003d self.view.custom.RegistrationData.employer\n#\t\tschool \u003d self.view.custom.RegistrationData.school\n\t\t#congregation \u003d self.view.custom.RegistrationData.congregation\n\t\tincomeSource \u003d self.view.custom.RegistrationData.income_source\n\t\tif incomeSource \u003d\u003d -1:\n\t\t\tincomeSource \u003d None\n\t\tincomeAmount \u003d self.view.custom.RegistrationData.income_amount\n\t\tincomeStartDate \u003d self.view.custom.RegistrationData.income_start_date\n\t\tif incomeStartDate \u003d\u003d \u0027\u0027:\n\t\t\tincomeStartDate \u003d None\n\t\temployment_type \u003d self.view.custom.RegistrationData.employment_type\n\t\t\n\t\t## new fields as per ticket 305\n\t\tadditional_incomeSource \u003d self.view.custom.RegistrationData.additional_income_source\n\t\tif additional_incomeSource \u003d\u003d -1:\n\t\t\tadditional_incomeSource \u003d None\n\t\tadditional_incomeAmount \u003d self.view.custom.RegistrationData.additional_income_amount\n\t\tfoodStamps \u003d self.view.custom.RegistrationData.food_stamps\n\t\tif foodStamps \u003d\u003d -1 or foodStamps \u003d\u003d \u0027\u0027:\n\t\t\tfoodStamps \u003d None\n\t\t## Check if parameters are filled in correctly \n\t\tif None in [human_id,participant_id,first_name,last_name,gender_id,dob_quality_id,ssn_quality_id]:\n\t\t\tvalid \u003d False\n\t\t\t#system.perspective.print(\u0027Null Error\u0027)\n\t\t\terror_message \u003d \"Please fill in all the mandatory fields correctly before saving (Null Error).\"\n\t\telif None in [race_id,veteran_id]:\n\t\t\tvalid \u003d False\n\t\t\t#system.perspective.print(\u0027Null Error\u0027)\n\t\t\terror_message \u003d \"Please fill in all the mandatory fields correctly before saving (Null Error).\"\n\t\telif first_name.strip() \u003d\u003d \"\":\n\t\t\tvalid \u003d False\n\t\t\t#system.perspective.print(\u0027First Name Error\u0027)\n\t\t\terror_message \u003d \"Please fill in the Participant First Name before saving.\"\n\t\telif last_name.strip() \u003d\u003d \"\":\n\t\t\tvalid \u003d False\n\t\t\t#system.perspective.print(\u0027Last Name Error\u0027)\n\t\t\terror_message \u003d \"Please fill in the Participant Last Name before saving.\"\n\t\telif gender_id \u003c 0:\n\t\t\tvalid \u003d False\n\t\t\t#system.perspective.print(\u0027Gender Error\u0027)\n\t\t\terror_message \u003d \"Please fill in the Participant Gender before saving.\"\n\t\telif ssn_quality_id \u003c 0:\n\t\t\tvalid \u003d False\n\t\t\t#system.perspective.print(\u0027SSN Quality Error\u0027)\n\t\t\terror_message \u003d \"Please fill in the SSN Quality before saving.\"\n\t\telif dob_quality_id \u003c 0:\n\t\t\tvalid \u003d False\n\t\t\t#system.perspective.print(\u0027DOB Quality Error\u0027)\n\t\t\terror_message \u003d \"Please fill in the Date of Birth Quality before saving.\"\n\t\telif race_id \u003c 0:\n\t\t\tvalid \u003d False\n\t\t\t#system.perspective.print(\u0027Race Error\u0027)\n\t\t\terror_message \u003d \"Please fill in the Participant Race before saving.\"\n\t\t\n\t\telif veteran_id \u003c 0:\n\t\t\tvalid \u003d False\n\t\t\t#system.perspective.print(\u0027Veteran Error\u0027)\n\t\t\terror_message \u003d \"Please fill in the Participant Veteran Status before saving.\"\n\t\telif chronic_homeless \u003d\u003d 1 and chronic_homeless_date is None:\n\t\t\tvalid \u003d False\n\t\t\terror_message \u003d \"Please fill in the Chronic Homeless Date before saving.\"\n\t\telse:\n\t\t\tvalid \u003d True\n\t\t\tsystem.perspective.print(\u0027Data Valid\u0027)\n\t\t### Check if data is valid otherwise show error message.\n\t\tif valid:\n\t\t\t\n\t\t\t## Convert Phone numbers to numeric value only\n\t\t\tphone \u003d normalize.phone(phone)\n\t\t\talt_phone \u003d normalize.phone(alt_phone)\n\t\t\temergency_contact_phone \u003d normalize.phone(emergency_contact_phone)\n\t\t\t\n\t\t\t#SSN validation and normalization\n\t\t\tssn \u003d normalize.ssn(ssn)\n\t\t\t#system.perspective.print(ssn)\n\t\t\t\n\t\t\t#DOB validation\t\n\t\t\ttry:\n\t\t\t\tdob \u003d system.date.parse(dob)\n\t\t\t\t#system.perspective.print(\u0027DOB sucessfully parsed: \u0027 + str(dob))\n\t\t\t\tdobForFamilyCreation \u003d system.date.getYear(dob)\n\t\t\texcept:\n\t\t\t\tdob \u003d \u00271900-01-01 00:00:00\u0027\n\t\t\t\t#system.perspective.print(\u0027DOB set to default: \u0027 + str(dob))\n#\t\t\tsystem.perspective.print(\"before family id creation \")\n\t\t\tsystem.perspective.print(family_id)\n\t\t\t\n\t\t\t## Create the default family name if family is not selected\n\t\t\tif family_id \u003d\u003d None or family_id \u003d\u003d -1 or family_id \u003d\u003d \"\":\n\t\t\t\t## create the default family as Last Name, First Name - Year of Birth\n\t\t\t\tfamilyName \u003d str(last_name) + \", \" + str(first_name) + \" - \" + str(dobForFamilyCreation)\n\t\t\t\t#\n\t\t\t\tpath \u003d \"Participants/Registration/GetOrCreateFamily\"\n\t\t\t\tsystem.perspective.print(path)\n\t\t\t\tparameters \u003d {\"familyName\":familyName}\n\t\t\t\tsystem.perspective.print(parameters)\n\t\t\t\tfamilyData \u003d system.db.runNamedQuery(project\u003dproject,path\u003dpath,parameters\u003dparameters)\n\t\t\t\tif familyData is not None and familyData.getRowCount() \u003e 0:\n\t\t\t\t\tfamily_id \u003d familyData.getValueAt(0,\u0027familyId\u0027)\n\t\t\t\t\thoh_relationship_id \u003d 0\n\t\t\t\telse:\n\t\t\t\t\tsystem.perspective.print(\"family data none\")\n\t\t\telse:\n\t\t\t\t## update the family name if there was change in First name or Last name and relationship is self\n\t\t\t\tfamilyName \u003d str(last_name) + \", \" + str(first_name) + \" - \" + str(dobForFamilyCreation)\n\t\t\t\tif hoh_relationship_id \u003d\u003d 0: ## SELF \n\t\t\t\t\tpath \u003d \"Participants/Registration/UpdateFamilyName\"\n\t\t\t\t\tparameters \u003d {\"familyName\":familyName, \"familyId\":family_id}\n\t\t\t\t\tsystem.db.runNamedQuery(project\u003dproject,path\u003dpath,parameters\u003dparameters)\n\t\t\t\t\tsystem.perspective.sendMessage(\"UpdateFamilyNames\", payload\u003d{}, scope\u003d\"session\")\n\t\t\t\t\n#\t\t\tsystem.perspective.print(\"after creating family id\")\n#\t\t\tsystem.perspective.print(family_id)\n\t\t\t#Full registration\n\t\t\t#If any item is \u0027Data not Collected\u0027 then registration is partial\n\t\t\t#If full registration then set the timeRegistered in the db\n\t\t\tPrev_full_register \u003d (self.view.custom.sql_data).getValueAt(0,\u0027fullRegistration\u0027)\n#\t\t\tsystem.perspective.print(\u0027Prev_full_register: \u0027+str(Prev_full_register))\n\t\t\tfull_register \u003d True\n\t\t\tif gender_id \u003d\u003d 5:\n\t\t\t\tfull_register \u003d False\n\t\t\telif ssn_quality_id \u003d\u003d 6:\n\t\t\t\tfull_register \u003d False\n\t\t\telif dob_quality_id \u003d\u003d 6:\n\t\t\t\tfull_register \u003d False\n\t\t\telif race_id \u003d\u003d 8:\n\t\t\t\tfull_register \u003d False\n\t\t\telif veteran_id \u003d\u003d 4:\n\t\t\t\tfull_register \u003d False\t\n\t\t\t### Create transaction\n\t\t\ttransactionFailed \u003d False\n\t\t\ttxId \u003d system.db.beginTransaction(timeout\u003d10000)\n\t\t\ttry:\n\t\t\t\tsystem.perspective.print(\"viSpidatOnFile : \" + str(viSpidatOnFile))\n\t\t\t\t## If HMIS updated then mark auto created task as completed\n\t\t\t\tparticipantDataDB \u003d self.view.custom.sql_data\n\t\t\t\tif participantDataDB.getRowCount()\u003e0:\n\t\t\t\t\thmis_last_update_db \u003d participantDataDB.getValueAt(0,\u0027lastHmisUpdateDate\u0027)\n\t\t\t\t\t#### Task 2A : If HMIS update in Registration is blank within 72 hours of Program entry ####\n\t\t\t\t\t#### Task 3A : If HMIS update in Registration is blank within 1 week of Program entry ####\n\t\t\t\t\ttask_subject \u003d \u0027\u0027\n\t\t\t\t\tif (hmis_last_update_db\u003d\u003dNone or hmis_last_update_db\u003d\u003d\u0027\u0027) and (lastHmisUpdateDate!\u003dNone and lastHmisUpdateDate!\u003d\u0027\u0027):\n\t\t\t\t\t\tif veteran_id !\u003d 0:\n\t\t\t\t\t\t\ttask_subject \u003d \u0027Non-VA HMIS Update\u0027\n\t\t\t\t\t\tif veteran_id \u003d\u003d 0:\n\t\t\t\t\t\t\ttask_subject \u003d \u0027VA HMIS Update\u0027\n\t\t\t\t\t\ttask_note \u003d \"notes \u003d \u0027Enter HMIS Update date in the Participant Registration.\u0027\"\n\t\t\t\t\t#### Task 2B : If a non-VA Participant is in Shelter, and the Last HMIS Update in Registration is equal to 80 days ####\n\t\t\t\t\t#### Task 3B : If a VA Participant is in Shelter, and the HMIS update in Registration is equal to 25 days ####\n\t\t\t\t\tif (hmis_last_update_db!\u003dNone and hmis_last_update_db!\u003d\u0027\u0027) and (hmis_last_update_db!\u003dlastHmisUpdateDate):\n\t\t\t\t\t\tif veteran_id !\u003d 0:\n\t\t\t\t\t\t\ttask_subject \u003d \u0027Non-VA HMIS Update\u0027\n\t\t\t\t\t\tif veteran_id \u003d\u003d 0:\n\t\t\t\t\t\t\ttask_subject \u003d \u0027VA HMIS Update\u0027\n\t\t\t\t\t\ttask_note \u003d \"1\u003d1\"\n\t\t\t\t\tif task_subject !\u003d \u0027\u0027:\n\t\t\t\t\t\tparam \u003d {\u0027participantId\u0027:participant_id,\n\t\t\t\t\t\t\t\t\u0027subject\u0027:task_subject,\n\t\t\t\t\t\t\t\t\u0027note\u0027:task_note}\n\t\t\t\t\t\tsystem.perspective.print(param)\n\t\t\t\t\t\tsystem.db.runNamedQuery(\"Settings/Tasks/SetAutoTaskToCompleted\", parameters\u003dparam)\n\t\t\t\t####################################################\n\t\t\t\t#Update the Human Data\n\t\t\t\tpath \u003d \"Participants/Personal/PersonalDetailUpdate\"\n\t\t\t\tparameters \u003d {\"full_register\":full_register,\n\t\t\t\t\t\t\t\"first_name\":first_name,\n\t\t\t\t\t\t\t\"middle_name\":middle_name,\n\t\t\t\t\t\t\t\"last_name\":last_name,\n\t\t\t\t\t\t\t\"suffix_name\":suffix_name,\n\t\t\t\t\t\t\t\"nick_name\":nick_name,\n\t\t\t\t\t\t\t\"dob\":dob,\n\t\t\t\t\t\t\t\"dob_quality_id\":dob_quality_id,\n\t\t\t\t\t\t\t\"ssn\":ssn,\n\t\t\t\t\t\t\t\"ssn_quality_id\":ssn_quality_id,\n\t\t\t\t\t\t\t\"gender_id\":gender_id,\n\t\t\t\t\t\t\t\"race_id\":race_id,\n\t\t\t\t\t\t\t\"ethnicity_id\":ethnicity_id,\n\t\t\t\t\t\t\t\"veteran_id\":veteran_id,\n\t\t\t\t\t\t\t\"disability_id\":disability_id,\n\t\t\t\t\t\t\t\"time_deceased\":time_deceased,\n\t\t\t\t\t\t\t\"tri_morbid\":tri_morbid,\n\t\t\t\t\t\t\t\"chronic_homeless\":chronic_homeless,\n\t\t\t\t\t\t\t\"so_registry\":so_registry,\n\t\t\t\t\t\t\t\"mail_service\":mail_service,\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\"zip_code\":zip_code,\n\t\t\t\t\t\t\t\"phone\":phone,\n\t\t\t\t\t\t\t\"alt_phone\":alt_phone,\n\t\t\t\t\t\t\t\"email\":email,\n\t\t\t\t\t\t\t\"communication_type_id\":communication_type_id,\n\t\t\t\t\t\t\t\"insurance_type_id\":insurance_type_id,\n\t\t\t\t\t\t\t\"emergency_contact_name\":emergency_contact_name,\n\t\t\t\t\t\t\t\"emergency_contact_phone\":emergency_contact_phone,\n\t\t\t\t\t\t\t\"emergency_contact_email\":emergency_contact_email,\n\t\t\t\t\t\t\t\"emergency_contact_type_id\":emergency_contact_type_id,\n\t\t\t\t\t\t\t\"family_id\":family_id,\n\t\t\t\t\t\t\t\"hoh_relationship_id\":hoh_relationship_id,\n\t\t\t\t\t\t\t\"employer\":employer,\n\t\t\t\t\t\t\t\"mentalHealth\":mentalHealth,\n\t\t\t\t\t\t\t\"chronicHealthConditions\":chronicHealthConditions,\n\t\t\t\t\t\t\t\"physicalDisability\":physicalDisability,\n\t\t\t\t\t\t\t\"developmentalDisability\":developmentalDisability,\n\t\t\t\t\t\t\t\"substanceAbuse\":substanceAbuse,\n\t\t\t\t\t\t\t\"lastHmisUpdateDate\":lastHmisUpdateDate,\n\t\t\t\t\t\t\t\"lastHmisUpdateBy\":lastHmisUpdateBy,\n\t\t\t\t\t\t\t\"viSpidatScore\":viSpidatScore,\n\t\t\t\t\t\t\t\"viSpidateAssessmentDate\":viSpidateAssessmentDate,\n\t\t\t\t\t\t\t\"vaHealthCareEligible\":vaHealthCareEligible,\n\t\t\t\t\t\t\t\"incomeSource\":incomeSource,\n\t\t\t\t\t\t\t\"incomeAmount\":incomeAmount,\n\t\t\t\t\t\t\t\"incomeStartDate\":incomeStartDate,\n\t\t\t\t\t\t\t\"biracialId\":biracial_id,\n\t\t\t\t\t\t\t\"human_id\":human_id,\n\t\t\t\t\t\t\t\"time_retired\":active,\n\t\t\t\t\t\t\t\"employment_type\":employment_type,\n\t\t\t\t\t\t\t\"viSpidatOnFile\":viSpidatOnFile,\n\t\t\t\t\t\t\t\"additional_incomeSource\":additional_incomeSource,\n\t\t\t\t\t\t\t\"additional_incomeAmount\":additional_incomeAmount,\n\t\t\t\t\t\t\t\"foodStamps\":foodStamps,\n\t\t\t\t\t\t\t\"hmis_number\":hmis_number\n\t\t\t\t\t\t\t}\n\t\t\t\tRefresh \u003d system.db.runNamedQuery(project\u003dproject,path\u003dpath,parameters\u003dparameters, tx\u003dtxId, getKey\u003dTrue)\n\t\t\t\t\n\t\t\t\t## \"call the name list\" service for selected participant if selected to yes\n\t\t\t\tif callTheNameService \u003d\u003d \u0027Yes\u0027:\n\t\t\t\t\ttime_created \u003d system.date.now()\n\t\t\t\t\tget_service_id \u003d system.db.runPrepQuery(\"SELECT id FROM interaction.Service where serviceName \u003d \u0027Call the Name List\u0027 and timeRetired IS NULL\")\n\t\t\t\t\tservice_id \u003d get_service_id.getValueAt(0,0) #261 #Call The Name List\n\t\t\t\t\tgetParticipant_enrollment \u003d system.db.runPrepQuery(\"SELECT * FROM participant.Enrollments where particpantId \u003d \" + str(participant_id))\n#\t\t\t\t\tenrollment_id \u003d getParticipant_enrollment.getValueAt(0,\u0027programId\u0027)#50 #Recuperative Care\n\t\t\t\t\tget_enrollment_id \u003d system.db.runPrepQuery(\"SELECT id FROM interaction.Program where programName \u003d \u0027Hope University\u0027 and timeRetired IS NULL\")\n\t\t\t\t\tenrollment_id \u003d get_enrollment_id.getValueAt(0,0) #29 #Hope University\n\t\t\t\t\tget_service_location_id \u003d system.db.runPrepQuery(\"SELECT id FROM interaction.ServiceLocation where location \u003d \u0027Hope U\u0027 and timeRetired IS NULL\")\n\t\t\t\t\tservice_location_id \u003d get_service_location_id.getValueAt(0,0) #29 #Hope University\n\t\t\t\t\t\n\t\t\t\t\tuser_name \u003d self.session.props.auth.user.userName\n\t\t\t\t\temployee_id \u003d self.session.custom.loggedInStaffEmployeeID\n\t\t\t\t\tsystem.perspective.print(\"Add \u0027call the name list\u0027 service\")\n\t\t\t\t\tpath \u003d \"Participants/Services/ServicesDetailInsert\"\n\t\t\t\t\tparameters \u003d {\"time_created\":time_created,\"participant_id\":participant_id,\n\t\t\t\t\t\t\t\t\"employee_id\":employee_id,\"enrollment_id\":enrollment_id, \n\t\t\t\t\t\t\t\t\"service_id\":service_id,\"user_name\":user_name,\n\t\t\t\t\t\t\t\t\"HMIS\":\u0027No\u0027 ,\"quantity\":1,\n\t\t\t\t\t\t\t\t\"comment\":\u0027\u0027,\"service_location_id\":service_location_id}\n#\t\t\t\t\tsystem.perspective.print(parameters)\n\t\t\t\t\tRefresh \u003d system.db.runNamedQuery(project\u003dproject,path\u003dpath,parameters\u003dparameters, getKey\u003dTrue)\t\n\t\t\t\t\n\t\t\t\t#Update the participant data\n\t\t\t\t#\n\t\t\t\t#\n\t\t\t\tpath \u003d \"Participants/Personal/ParticipantUpdate\"\n\t\t\t\tparameters \u003d {\"participant_id\":participant_id,\n\t\t\t\t\t\t\"case_manager_id\":case_manager_id,\n\t\t\t\t\t\t\"time_retired\":active}\n\t\t\t\tRefresh \u003d system.db.runNamedQuery(project\u003dproject,path\u003dpath,parameters\u003dparameters, tx\u003dtxId, getKey\u003dTrue)\n\t\t\t\t#check if participant being updated is deceased\n\t\t\t\tif time_deceased is not None:\n\t\t\t\t\t## remove the enrollments\n\t\t\t\t\tdeleteEnrollments \u003d \"DELETE FROM [participant].[Enrollments] where particpantId \u003d ?\"\n\t\t\t\t\tsystem.db.runPrepUpdate(deleteEnrollments, [participant_id], tx\u003dtxId)\n\t\t\t\t\t\n\t\t\t\t\t## also update to participant program history table\n\t\t\t\t\t## added by Yogini on 21-Feb-2023 for Ticket 64\n\t\t\t\t\tupdateProgramHistory \u003d \"UPDATE [participant].[ProgramsHistory] SET ExitDate \u003d GETDATE() WHERE ParticipantID \u003d ? AND ExitDate IS NULL\"\n\t\t\t\t\tsystem.db.runPrepUpdate(updateProgramHistory, [participant_id], tx\u003dtxId)\n\t\t\t\t\t## remove the suspensions\n\t\t\t\t\tupdateSuspensionStatus \u003d \"UPDATE [participant].[Participant] set suspensionActive \u003d 0 WHERE id \u003d ?\"\n\t\t\t\t\tsystem.db.runPrepUpdate(updateSuspensionStatus, [participant_id],  tx\u003dtxId)\n\t\t\t\t\t## update suspension records\n#\t\t\t\t\tupdateSuspensionRecord \u003d \"\"\" UPDATE [participant].[Suspension] SET dateEnd \u003d CURRENT_TIMESTAMP , \n#\t\t\t\t\tdateReinstated \u003d CURRENT_TIMESTAMP, dateEndRevised \u003d CURRENT_TIMESTAMP , reinstateRequired \u003d 0 , \n#\t\t\t\t\tuserName \u003d ?, suspensionNotes \u003d \u0027Deceased\u0027 \n#\t\t\t\t\tWHERE participantId \u003d ? AND (dateEnd \u003e\u003d CURRENT_TIMESTAMP or dateEndRevised \u003e\u003d CURRENT_TIMESTAMP )\"\"\"\n\t\t\t\t\tupdateSuspensionRecord \u003d \"\"\" UPDATE [participant].[Suspension] SET dateEnd \u003d CURRENT_TIMESTAMP , \n\t\t\t\t\tdateReinstated \u003d CURRENT_TIMESTAMP, dateEndRevised \u003d CURRENT_TIMESTAMP , reinstateRequired \u003d 0 , \n\t\t\t\t\tuserName \u003d ?, suspensionNotes \u003d \u0027Deceased\u0027 \n\t\t\t\t\tWHERE participantId \u003d ?\"\"\"\n\t\t\t\t\tsystem.db.runPrepUpdate(updateSuspensionRecord, [self.session.props.auth.user.userName, participant_id],  tx\u003dtxId)\n\t\t\t\tif active is not None:\n\t\t\t\t\t## check out if participant was checked into a shelter\n\t\t\t\t\tcheckoutQ \u003d \"UPDATE lodging.BedLog SET eventEnd \u003d CURRENT_TIMESTAMP WHERE participantId \u003d ? and eventEnd IS NULL\"\n\t\t\t\t\tsystem.db.runPrepUpdate(checkoutQ, [participant_id],  tx\u003dtxId)\n\t\t\t\t\t\n\t\t\t\t\t## Added by Yogini Marathe : 08-Aug-2023 as per comment from ticket #137.\n\t\t\t\t\t## dispose medication bin when participant is set to inactive\n\t\t\t\t\t\n\t\t\t\t\tmedicationBinQ \u003d \"\"\" UPDATE participant.MedicationBinsLog \n\t\t\t\t\tSET exitAction\u003d2, exitedOn \u003d CURRENT_TIMESTAMP, disposedOn \u003d CURRENT_TIMESTAMP,\n\t\t\t\t\texitedByStaffEmployeeId \u003d 0 , disposedByStaffEmployeeId \u003d 0\n\t\t\t\t\tWHERE participantId \u003d ?\n\t\t\t\t\t\"\"\"\n\t\t\t\t\tsystem.db.runPrepUpdate(medicationBinQ, [participant_id],  tx\u003dtxId)\n\t\t\t\t\t## End Addition on 08-Aug-2023\n\t\t\t\t## Added by Yogini Marathe : 12-Jan-2023 , update for chronic homeless date\n\t\t\t\t## check if Chronic homeless record needs to be insterted\n\t\t\t\toriginalChronicHomeless \u003d self.view.custom.sql_data.getValueAt(0,\u0027chronic_homeless\u0027)\n\t\t\t\toriginalChronicHomelessDate \u003d self.view.custom.sql_data.getValueAt(0,\u0027chronicHomelessDate\u0027)\n\t\t\t\tinsertChronicHomeless \u003d False\n\t\t\t\tupdateChronicHomeless \u003d False\n\t\t\t\t\n\t\t\t\tif originalChronicHomeless !\u003d chronic_homeless and chronic_homeless !\u003d None:\n\t\t\t\t\tinsertChronicHomeless \u003d True\n\t\t\t\telif chronic_homeless \u003d\u003d 1 and chronic_homeless_date !\u003d originalChronicHomelessDate:\n\t\t\t\t\tif originalChronicHomelessDate is not None and system.date.isBefore(chronic_homeless_date, originalChronicHomelessDate):\n\t\t\t\t\t\tupdateChronicHomeless \u003d True ## update only in case new date is earlier \n\t\t\t\t\telse:\n\t\t\t\t\t\tinsertChronicHomeless \u003d True\n\t\t\t\t\n\t\t\t\tif insertChronicHomeless:\n\t\t\t\t\t\n\t\t\t\t\tpath \u003d \u0027Participants/Personal/ChronicHomelessHistoryInsert\u0027\n\t\t\t\t\tparameters \u003d {\"participant_id\":participant_id,\n\t\t\t\t\t\t\t\t\t\t\t\"chronic_homeless\":chronic_homeless,\n\t\t\t\t\t\t\t\t\t\t\t\"chronic_homelessDate\":chronic_homeless_date}\n\t\t\t\t\tRefresh \u003d system.db.runNamedQuery(project\u003dproject,path\u003dpath,parameters\u003dparameters, tx\u003dtxId)\n\t\t\t\t\n\t\t\t\tif updateChronicHomeless:\n\t\t\t\t\t\n\t\t\t\t\tpath \u003d \u0027Participants/Personal/ChronicHomelessHistoryUpdate\u0027\n\t\t\t\t\tparameters \u003d {\"participant_id\":participant_id,\n\t\t\t\t\t\t\t\t\t\t\t\"chronic_homelessDateOld\":originalChronicHomelessDate,\n\t\t\t\t\t\t\t\t\t\t\t\"chronic_homelessDateNew\":chronic_homeless_date}\n\t\t\t\t\tRefresh \u003d system.db.runNamedQuery(project\u003dproject,path\u003dpath,parameters\u003dparameters, tx\u003dtxId)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t## Added by Yogini Marathe : 24-Jan-2023 , update for so reg date\n\t\t\t\t## check if so registry record needs to be insterted\n\t\t\t\toriginalSORegistry \u003d self.view.custom.sql_data.getValueAt(0,\u0027so_registry\u0027)\n\t\t\t\tif originalSORegistry !\u003d so_registry and so_registry !\u003d None:\n\t\t\t\t\tpath \u003d \u0027Participants/Personal/SORegistryHistoryInsert\u0027\n\t\t\t\t\tparameters \u003d {\"participant_id\":participant_id,\n\t\t\t\t\t\t\t\t\t\t\t\"so_registry\":so_registry,\n\t\t\t\t\t\t\t\t\t\t\t\"so_registryDate\":system.date.now()}\n\t\t\t\t\tRefresh \u003d system.db.runNamedQuery(project\u003dproject,path\u003dpath,parameters\u003dparameters, tx\u003dtxId)\n\t\t\t\t\t\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\n\t\t\texcept:\n\t\t\t\ttransactionFailed \u003d True\n\t\t\t\tlogger \u003d system.util.getLogger(\"Participants RegisterParticipant Button Save\")\n\t\t\t\tmsg \u003d traceback.format_exc()\n\t\t\t\tlogger.error(msg)\n\t\t\t\t\n\t\t\t### Check if an error occured rollback the transaction\n\t\t\tif transactionFailed:\n\t\t\t\tsystem.db.rollbackTransaction(txId)\n\t\t\t\tself.getSibling(\"Label\").showMessage(\"Something went wrong while saving data. Please try again.\")\n\t\t\t\tRefresh \u003d 0\n\t\t\t### Otherwise commit \n\t\t\telse:\n\t\t\t\tsystem.db.commitTransaction(txId)\n\t\t\t\t#\n\t\t\t\t#Enroll in the Hope University and Guest House programs only when deceased is not true\n\t\t\t\tif time_deceased is None:\n\t\t\t\t\tparticipants.autoEnroll(participant_id)\n\n## Change for Participant Event --- Commenting out Breeze Integration\n\n\t\t\t\t\"\"\"#Send participant to Breeze\n\t\t\t\tupdateBreezeAdd \u003d False\n\t\t\t\tupdateBreezeRemove \u003d False\n\t\t\t\t# Added Andrew Hunt 08/21/22. If participant has been set to inactive, we need to remove their Breeze link. If \"reactivated\", resend Breeze data\n\t\t\t\t#get previous active status\n\t\t\t\tdata \u003d self.view.custom.sql_data\n\t\t\t\ttimeRetiredSQL \u003d data.getValueAt(0,\u0027time_retired\u0027)\n\t\t\t\tif timeRetiredSQL is None:\n\t\t\t\t\tactiveSQL \u003d 1\n\t\t\t\telse:\n\t\t\t\t\tactiveSQL \u003d 0\n\t\t\t\t#Get current active status\n\t\t\t\tactiveCurrent \u003d self.view.custom.RegistrationData.active\n\t\t\t\tif activeSQL \u003d\u003d 1 and activeCurrent \u003d\u003d 0:\n\t\t\t\t\tupdateBreezeRemove \u003d True#Changing an active participant to Inactive. Remove from Breeze\n\t\t\t\t\n\t\t\t\t\n\n\t\t\t\tif full_register \u003d\u003d True and activeCurrent \u003d\u003d 1:\n\t\t\t\t\t#Only add a participant to Breeze if full registration\n\t\t\t\t\t#determine if key fields have changed\n\t\t\t\t\tdata \u003d self.view.custom.sql_data\n\t\t\t\t\tfirstNameSQL \u003d data.getValueAt(0,\u0027first_name\u0027)\n\t\t\t\t\tlastNameSQL \u003d data.getValueAt(0,\u0027last_name\u0027)\n\t\t\t\t\tdobSQL \u003d data.getValueAt(0,\u0027dob\u0027)\n\t\t\t\t\tstreetSQL \u003d data.getValueAt(0,\u0027street\u0027)\n\t\t\t\t\tcitySQL \u003d data.getValueAt(0,\u0027city\u0027)\n\t\t\t\t\tstateSQL \u003d data.getValueAt(0,\u0027state\u0027)\n\t\t\t\t\tzipSQL \u003d str(data.getValueAt(0,\u0027zip_code\u0027))\n\t\t\t\t\tphoneSQL \u003d data.getValueAt(0,\u0027phone\u0027)\n\t\t\t\t\temailSQL \u003d data.getValueAt(0,\u0027email\u0027)\n\t\t\t\t\tnickNameSQL \u003d data.getValueAt(0,\u0027nick_name\u0027)\n\t\t\t\t\t#Normailize the new and old dob\n\t\t\t\t\tdobSQL \u003d system.date.format(dobSQL,\u0027yyyy-MM-dd\u0027)\n\t\t\t\t\tdobBreeze \u003d system.date.format(dob,\u0027yyyy-MM-dd\u0027)\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t#Ignore zip if not five digits\n\t\t\t\t\tif zipSQL \u003d\u003d None or len(zipSQL) \u003c 5:\n\t\t\t\t\t\tzipSQL \u003d \u0027\u0027\n## Yogini Marathe - 16-Dec-2022 removing street, city , state, phone , email - adding nickname field dependency for breeze update\n#\t\t\t\t\tsystem.perspective.print(zipSQL + \u0027,\u0027 + zip_code)\n#\t\t\t\t\tsystem.perspective.print(str(firstNameSQL).strip() !\u003d str(first_name).strip())\n#\t\t\t\t\tsystem.perspective.print(str(lastNameSQL).strip() !\u003d str(last_name).strip())\n#\t\t\t\t\tsystem.perspective.print(dobSQL !\u003d dobBreeze)\n#\t\t\t\t\tsystem.perspective.print((zip_code !\u003d None and zip_code !\u003d \u0027\u0027 and str(zipSQL).strip() !\u003d str(zip_code).strip()))\n#\t\t\t\t\tsystem.perspective.print((nickNameSQL) + \", \" + (nick_name))\n#\t\t\t\t\tsystem.perspective.print(str(nickNameSQL).strip() !\u003d str(nick_name).strip())\n\t\t\t\t\t\n\t\t\t\t\tif (\n\t\t\t\t\t\tstr(firstNameSQL).strip() !\u003d str(first_name).strip()\n\t\t\t\t\t\tor str(lastNameSQL).strip() !\u003d str(last_name).strip()\n\t\t\t\t\t\tor dobSQL !\u003d dobBreeze\n\t\t\t\t\t\t\n\t\t\t\t\t\tor (zip_code !\u003d None and zip_code !\u003d \u0027\u0027 and str(zipSQL).strip() !\u003d str(zip_code).strip())\n\t\t\t\t\t\tor str(nickNameSQL).strip() !\u003d str(nick_name).strip()\n\t\t\t\t\t\t\n\t\t\t\t\t\t):\n\t\t\t\t\t\tupdateBreezeRemove \u003d True #Information has changed, remove and re-insert\n\t\t\t\t\t\tupdateBreezeAdd \u003d True\n\t\t\t\t\tif activeSQL \u003d\u003d 0 and activeCurrent \u003d\u003d 1: #Changing an inactive participant back to Active. Add to Breeze\n\t\t\t\t\t\tupdateBreezeAdd \u003d True\n\t\t\t\t\n\t\t\t\t# Changing an partial register participant to fully register participant. Add to Breeze\t\t\n\t\t\t\t\n\t\t\t\tif (Prev_full_register \u003d\u003d False and full_register \u003d\u003d True):\n\t\t\t\t\tupdateBreezeAdd \u003d True\n\t\t\t\tsystem.perspective.print(\u0027updateBreezeAdd: \u0027+str(updateBreezeAdd))\t\n\t\t\t\tif updateBreezeRemove:\n\t\t\t\t\tsystem.perspective.print(\u0027Breeze Removal Required\u0027)\n\t\t\t\t\tIntegrations.breeze.helper.removeBreezePerson(humanID\u003dhuman_id)\n\t\t\t\tif updateBreezeAdd:\n\t\t\t\t\tsystem.perspective.print(\u0027Breeze Addition Required\u0027)\n\t\t\t\t\tIntegrations.breeze.helper.addHumanToBreeze(human_id, tags \u003d [\u0027Participant\u0027])\"\"\"\n# End change for Participant Events\n\t\t\t\tif full_register \u003d\u003d True:\n\t\t\t\t\tmessage \u003d \"Participant Discovery\"\n#\t\t\t\t\tif updateBreezeAdd or updateBreezeRemove:\n#\t\t\t\t\t\tmessage +\u003d \" and Breeze\"\n\t\t\t\t\tmessage +\u003d \" Data Updated Successfully.\"\n\t\t\t\t\tself.getSibling(\"Label\").showMessage(message)\n\t\t\t\telse:\n#\t\t\t\t\tsystem.perspective.print(\u0027 Data Not Collected: \u0027)\t\n\t\t\t\t\tself.getSibling(\"Label\").showMessage(\"Participant Updated Successfully with Data Not Collected\")\n\t\t\t\t\n\t\t\t\t## Also insert the log\n\t\t\t\t## CHange added by Yogini for ticket 111 \n\t\t\t\t## get all fields from SQL and compare to determine which fields channged\n\t\t\t\tupdatedFields \u003d \"\"\n\t\t\t\tfirstNameSQL \u003d dataPrevSQL.getValueAt(0,\u0027first_name\u0027)\n\t\t\t\tif firstNameSQL is None:\n\t\t\t\t\tfirstNameSQL \u003d \u0027\u0027\n\t\t\t\t\n\t\t\t\tmiddleNameSQL \u003d dataPrevSQL.getValueAt(0,\u0027middle_name\u0027)\n\t\t\t\tif middleNameSQL is None:\n\t\t\t\t\tmiddleNameSQL \u003d \u0027\u0027\n\t\t\t\t\n\t\t\t\tlastNameSQL \u003d dataPrevSQL.getValueAt(0,\u0027last_name\u0027)\n\t\t\t\tif lastNameSQL is None:\n\t\t\t\t\tlastNameSQL \u003d \u0027\u0027\n\t\t\t\t\t\n\t\t\t\tsuffixSQL \u003d dataPrevSQL.getValueAt(0,\u0027suffix_name\u0027)\n\t\t\t\tif suffixSQL is None:\n\t\t\t\t\tsuffixSQL \u003d \u0027\u0027\n\t\t\t\t\n\t\t\t\tnickNameSQL \u003d dataPrevSQL.getValueAt(0,\u0027nick_name\u0027)\n\t\t\t\tif nickNameSQL is None:\n\t\t\t\t\tnickNameSQL \u003d \u0027\u0027\n\t\t\t\t\n\t\t\t\tssnSQL \u003d dataPrevSQL.getValueAt(0,\u0027ssn\u0027)\n\t\t\t\tssnQualityIdSQL \u003d dataPrevSQL.getValueAt(0,\u0027ssn_quality_id\u0027)\n\t\t\t\tdobSQL \u003d dataPrevSQL.getValueAt(0,\u0027dob\u0027)\n\t\t\t\tdobQualityIdSQL \u003d dataPrevSQL.getValueAt(0,\u0027dob_quality_id\u0027)\n\t\t\t\tethnicityIdSQL \u003d dataPrevSQL.getValueAt(0,\u0027ethnicity_id\u0027)\n\t\t\t\t\n\t\t\t\traceIdSQL \u003d dataPrevSQL.getValueAt(0,\u0027race_id\u0027)\n\t\t\t\tbiracialIdSQL \u003d dataPrevSQL.getValueAt(0,\u0027biracialId\u0027)\n\t\t\t\tgenderIdSQL \u003d dataPrevSQL.getValueAt(0,\u0027gender_id\u0027)\n\t\t\t\thohRelationshipIdSQL \u003d dataPrevSQL.getValueAt(0,\u0027hoh_relationship_id\u0027)\n\t\t\t\tveteranIdSQL \u003d dataPrevSQL.getValueAt(0,\u0027veteran_id\u0027)\n\t\t\t\tvaHealthcareEligibleSQL \u003d dataPrevSQL.getValueAt(0,\u0027vaHealthcareEligible\u0027)\n\t\t\t\tdisabilityIdSQL \u003d dataPrevSQL.getValueAt(0,\u0027disability_id\u0027)\n\t\t\t\t\n\t\t\t\tsubstanceAbuseSQL \u003d dataPrevSQL.getValueAt(0,\u0027substanceAbuse\u0027)\n\t\t\t\tchronicHealthCoditionsSQL \u003d dataPrevSQL.getValueAt(0,\u0027chronicHealthCoditions\u0027)\n\t\t\t\tdevelopmentalDisabilitySQL \u003d dataPrevSQL.getValueAt(0,\u0027developmentalDisability\u0027)\n\t\t\t\tmentalHealthSQL \u003d dataPrevSQL.getValueAt(0,\u0027mentalHealth\u0027)\n\t\t\t\tphysicalDisabilitySQL \u003d dataPrevSQL.getValueAt(0,\u0027physicalDisability\u0027)\n\t\t\t\t\n\t\t\t\tinsuranceTypeId \u003d dataPrevSQL.getValueAt(0,\u0027insurance_type_id\u0027)\n\t\t\t\tchronicHomelessSQL \u003d dataPrevSQL.getValueAt(0,\u0027chronic_homeless\u0027)\n\t\t\t\tviSpidatScoreSQL \u003d dataPrevSQL.getValueAt(0,\u0027viSpidatScore\u0027)\n\t\t\t\tif viSpidatScoreSQL is None:\n\t\t\t\t\tviSpidatScoreSQL \u003d -1\n\t\t\t\tviSpidatAssessmentDateSQL \u003d dataPrevSQL.getValueAt(0,\u0027viSpidatAssessmentDate\u0027)\n\t\t\t\tviSpidatOnFileSQL \u003d dataPrevSQL.getValueAt(0,\u0027viSpidatOnFile\u0027)\n\t\t\t\tif viSpidatOnFileSQL \u003d\u003d True:\n\t\t\t\t\tviSpidatOnFileSQL \u003d 1\n\t\t\t\telif viSpidatOnFileSQL \u003d\u003d False:\n\t\t\t\t\tviSpidatOnFileSQL \u003d 0\n\t\t\t\telse:\n\t\t\t\t\tviSpidatOnFileSQL \u003d None\n\t\t\t\t\t\n\t\t\t\tlastHmisUpdateDateSQL \u003d dataPrevSQL.getValueAt(0,\u0027lastHmisUpdateDate\u0027)\n\t\t\t\tlastHmisUpdateBySQL \u003d dataPrevSQL.getValueAt(0,\u0027lastHmisUpdateBy\u0027)\n\t\t\t\thmis_numberSQL \u003d dataPrevSQL.getValueAt(0,\u0027hmis_number\u0027)\n\t\t\t\tif hmis_number is None:\n\t\t\t\t\thmis_numberSQL \u003d \u0027\u0027\n\t\t\t\tif lastHmisUpdateBySQL is None:\n\t\t\t\t\tlastHmisUpdateBySQL \u003d \u0027\u0027\n\t\t\t\temergencyContactNameSQL \u003d dataPrevSQL.getValueAt(0,\u0027emergency_contact_name\u0027)\n\t\t\t\tif emergencyContactNameSQL is None:\n\t\t\t\t\temergencyContactNameSQL \u003d \u0027\u0027\n\t\t\t\t\t\n\t\t\t\temergencyContactPhoneSQL \u003d dataPrevSQL.getValueAt(0,\u0027emergency_contact_phone\u0027)\n\t\t\t\tif emergencyContactPhoneSQL is None:\n\t\t\t\t\temergencyContactPhoneSQL \u003d \u0027\u0027\n\t\t\t\temergencyContactPhoneSQL \u003d normalize.phone(emergencyContactPhoneSQL)\t\n\t\t\t\temergencyContactEmailSQL \u003d dataPrevSQL.getValueAt(0,\u0027emergency_contact_email\u0027)\n\t\t\t\tif emergencyContactEmailSQL is None:\n\t\t\t\t\temergencyContactEmailSQL \u003d \u0027\u0027\n\t\t\t\t\n\t\t\t\temergencyContactTypeIdSQL \u003d dataPrevSQL.getValueAt(0,\u0027emergency_contact_type_id\u0027)\n\t\t\t\tfamilyIdSQL \u003d dataPrevSQL.getValueAt(0,\u0027family_id\u0027)\n\t\t\t\tphoneSQL \u003d dataPrevSQL.getValueAt(0,\u0027phone\u0027)\n\t\t\t\tif phoneSQL is None:\n\t\t\t\t\tphoneSQL \u003d \u0027\u0027\n\t\t\t\tphoneSQL \u003d normalize.phone(phoneSQL)\n\t\t\t\t\n\t\t\t\taltPhoneSQL \u003d dataPrevSQL.getValueAt(0,\u0027alt_phone\u0027)\n\t\t\t\tif altPhoneSQL is None:\n\t\t\t\t\taltPhoneSQL \u003d \u0027\u0027\n\t\t\t\taltPhoneSQL \u003d normalize.phone(altPhoneSQL)\n\t\t\t\t\n\t\t\t\temailSQL \u003d dataPrevSQL.getValueAt(0,\u0027email\u0027)\n\t\t\t\tif emailSQL is None:\n\t\t\t\t\temailSQL \u003d \u0027\u0027\n\t\t\t\t\t\n\t\t\t\tcommunicationTypeIdSQL \u003d dataPrevSQL.getValueAt(0,\u0027communication_type_id\u0027)\n\t\t\t\tmailServiceSQL \u003d dataPrevSQL.getValueAt(0,\u0027mail_service\u0027)\n\t\t\t\tzipCodeSQL \u003d dataPrevSQL.getValueAt(0,\u0027zip_code\u0027)\n\t\t\t\t\n\t\t\t\tif zipCodeSQL \u003d\u003d None or len(str(zipCodeSQL)) \u003c 5:\n\t\t\t\t\tzipCodeSQL \u003d \u0027\u0027\n\t\t\t\t\n\t\t\t\temployerSQL \u003d dataPrevSQL.getValueAt(0,\u0027employer\u0027)\n\t\t\t\tif employerSQL is None:\n\t\t\t\t\temployerSQL \u003d \u0027\u0027\n\t\t\t\t\t\n\t\t\t\tincomeSourceIDSQL \u003d dataPrevSQL.getValueAt(0,\u0027incomeSourceID\u0027)\n#\t\t\t\tif incomeSourceIDSQL is None:\n#\t\t\t\t\tincomeSourceIDSQL \u003d -1\n\t\t\t\t\t\n\t\t\t\tincomeAmountSQL \u003d dataPrevSQL.getValueAt(0,\u0027incomeAmount\u0027)\n\t\t\t\tif incomeAmountSQL is None:\n\t\t\t\t\tincomeAmountSQL \u003d 0\n\t\t\t\t\t\n\t\t\t\tincomeStartDateSQL \u003d dataPrevSQL.getValueAt(0,\u0027incomeStartDate\u0027)\n\t\t\t\t\n\t\t\t\temploymentTypeSQL \u003d dataPrevSQL.getValueAt(0,\u0027employment_type\u0027)\n\t\t\t\tcaseManagerIdSQL \u003d dataPrevSQL.getValueAt(0,\u0027case_manager_id\u0027)\n\t\t\t\ttimeRetiredSQL \u003d dataPrevSQL.getValueAt(0,\u0027time_retired\u0027)\n\t\t\t\t\n\t\t\t\tif timeRetiredSQL is None:\n\t\t\t\t\tactiveSQL \u003d 1\n\t\t\t\telse:\n\t\t\t\t\tactiveSQL \u003d 0\n\t\t\t\ttimeDeceasedSQL \u003d dataPrevSQL.getValueAt(0,\u0027time_deceased\u0027)\n\t\t\t\tsoRegistrySQL \u003d dataPrevSQL.getValueAt(0,\u0027so_registry\u0027)\n\t\t\t\t\n\t\t\t\t## additional fields as per ticket 305\n\t\t\t\tadditional_incomeSourceIDSQL \u003d dataPrevSQL.getValueAt(0,\u0027additional_incomeSourceID\u0027)\n#\t\t\t\tif incomeSourceIDSQL is None:\n#\t\t\t\t\tincomeSourceIDSQL \u003d -1\n\t\t\t\t\t\n\t\t\t\tadditional_incomeAmountSQL \u003d dataPrevSQL.getValueAt(0,\u0027additional_incomeAmount\u0027)\n\t\t\t\tif additional_incomeAmountSQL is None:\n\t\t\t\t\tadditional_incomeAmountSQL \u003d 0\n\t\t\t\tfoodStampsSQL \u003d dataPrevSQL.getValueAt(0,\u0027foodStamps\u0027)\n\t\t\t\tif foodStampsSQL \u003d\u003d True:\n\t\t\t\t\tfoodStampsSQL \u003d 1\n\t\t\t\telif foodStampsSQL \u003d\u003d False:\n\t\t\t\t\tfoodStampsSQL \u003d 0\n\t\t\t\telse:\n\t\t\t\t\tfoodStampsSQL \u003d None\n\t\t\t\t\t\n\t\t\t\tdobSQL \u003d system.date.format(dobSQL,\u0027yyyy-MM-dd\u0027)\n\t\t\t\tdobBreeze \u003d system.date.format(dob,\u0027yyyy-MM-dd\u0027)\n\t\t\t\tif first_name !\u003d firstNameSQL:\n\t\t\t\t\tupdatedFields \u003d updatedFields + \" first_name,\"\n\t\t\t\tif middleNameSQL !\u003d middle_name:\n\t\t\t\t\tupdatedFields \u003d updatedFields + \" middle_name,\"\n\t\t\t\tif lastNameSQL !\u003d last_name:\n\t\t\t\t\tupdatedFields \u003d updatedFields + \" last_name,\"\n\t\t\t\tif suffixSQL !\u003d suffix_name:\n\t\t\t\t\tupdatedFields \u003d updatedFields + \" suffix,\"\n\t\t\t\tif nickNameSQL !\u003d nick_name:\n\t\t\t\t\tupdatedFields \u003d updatedFields + \" nick_name,\"\n\t\t\t\tif ssnSQL !\u003d ssn:\n\t\t\t\t\tupdatedFields \u003d updatedFields + \" ssn,\"\n\t\t\t\tif ssnQualityIdSQL !\u003d ssn_quality_id:\n\t\t\t\t\tupdatedFields \u003d updatedFields + \" ssn_quality,\"\n\t\t\t\tif dobSQL !\u003d dobBreeze:\n\t\t\t\t\tupdatedFields \u003d updatedFields + \" dob,\"\n\t\t\t\tif dobQualityIdSQL !\u003d dob_quality_id:\n\t\t\t\t\tupdatedFields \u003d updatedFields + \" dob_quality,\"\n\t\t\t\tif ethnicityIdSQL !\u003d ethnicity_id:\n\t\t\t\t\tupdatedFields \u003d updatedFields + \" ethnicity,\"\n\t\t\t\tif raceIdSQL !\u003d race_id:\n\t\t\t\t\tupdatedFields \u003d updatedFields + \" race,\"\n\t\t\t\tif biracialIdSQL !\u003d biracial_id:\n\t\t\t\t\tupdatedFields \u003d updatedFields + \" biracial,\"\n\t\t\t\tif genderIdSQL !\u003d gender_id:\n\t\t\t\t\tupdatedFields \u003d updatedFields + \" gender,\"\n\t\t\t\tif hohRelationshipIdSQL !\u003d hoh_relationship_id:\n\t\t\t\t\tupdatedFields \u003d updatedFields + \" family_relationship,\"\n\t\t\t\tif veteranIdSQL !\u003d veteran_id:\n\t\t\t\t\tupdatedFields \u003d updatedFields + \" veteran,\"\n\t\t\t\tif vaHealthcareEligibleSQL !\u003d vaHealthCareEligible:\n\t\t\t\t\tupdatedFields \u003d updatedFields + \" va_health_care_eligible,\"\n\t\t\t\tif disabilityIdSQL !\u003d disability_id:\n\t\t\t\t\tupdatedFields \u003d updatedFields + \" disability,\"\n\t\t\t\tif substanceAbuseSQL !\u003d substanceAbuse:\n\t\t\t\t\tupdatedFields \u003d updatedFields + \" substance_abuse,\"\n\t\t\t\tif chronicHealthCoditionsSQL !\u003d chronicHealthConditions:\n\t\t\t\t\tupdatedFields \u003d updatedFields + \" chronic_health_conditions,\"\n\t\t\t\tif developmentalDisabilitySQL !\u003d developmentalDisability:\n\t\t\t\t\tupdatedFields \u003d updatedFields + \" developmental_disability,\"\n\t\t\t\tif mentalHealthSQL !\u003d mentalHealth:\n\t\t\t\t\tupdatedFields \u003d updatedFields + \" mental_health,\"\n\t\t\t\tif physicalDisabilitySQL !\u003d physicalDisability:\n\t\t\t\t\tupdatedFields \u003d updatedFields + \" physical_disability,\"\n\t\t\t\tif insuranceTypeId !\u003d insurance_type_id:\n\t\t\t\t\tupdatedFields \u003d updatedFields + \" insurance,\"\n\t\t\t\tif chronicHomelessSQL !\u003d chronic_homeless:\n\t\t\t\t\tupdatedFields \u003d updatedFields + \" chronic_homeless,\"\n\t\t\t\tif viSpidatScoreSQL !\u003d viSpidatScore:\n\t\t\t\t\tupdatedFields \u003d updatedFields + \" vi_spidat_score,\"\n\t\t\t\tif viSpidatAssessmentDateSQL !\u003d viSpidateAssessmentDate:\n\t\t\t\t\tupdatedFields \u003d updatedFields + \" vi_spidate_assessment_date,\"\n\t\t\t\tsystem.perspective.print(\"viSpidatOnFileSQL  : \" + str(viSpidatOnFileSQL))\n\t\t\t\tsystem.perspective.print(\"viSpidatOnFile  : \" + str(viSpidatOnFile))\n\t\t\t\tif viSpidatOnFileSQL !\u003d viSpidatOnFile:\n\t\t\t\t\tupdatedFields \u003d updatedFields + \" vi_spidat_on_file,\"\n\t\t\t\tif lastHmisUpdateDateSQL !\u003d lastHmisUpdateDate:\n\t\t\t\t\tupdatedFields \u003d updatedFields + \" last_hmis_update_date,\"\n\t\t\t\tif lastHmisUpdateBySQL !\u003d lastHmisUpdateBy:\n\t\t\t\t\tupdatedFields \u003d updatedFields + \" last_hmis_update_by,\"\n\t\t\t\tif hmis_numberSQL !\u003d hmis_number:\n\t\t\t\t\tupdatedFields \u003d updatedFields + \" hmis_number,\"\n\t\t\t\tif emergencyContactNameSQL !\u003d emergency_contact_name:\n\t\t\t\t\tupdatedFields \u003d updatedFields + \" emergency_contact_name,\"\n\t\t\t\tif emergencyContactPhoneSQL !\u003d emergency_contact_phone:\n\t\t\t\t\tupdatedFields \u003d updatedFields + \" emergency_contact_phone,\"\n\t\t\t\tif emergencyContactEmailSQL !\u003d emergency_contact_email:\n\t\t\t\t\tupdatedFields \u003d updatedFields + \" emergency_contact_email,\"\n\t\t\t\tif emergencyContactTypeIdSQL !\u003d emergency_contact_type_id:\n\t\t\t\t\tupdatedFields \u003d updatedFields + \" emergency_contact_type,\"\n\t\t\t\tif familyIdSQL !\u003d family_id:\n\t\t\t\t\tupdatedFields \u003d updatedFields + \" family,\"\n\t\t\t\t\n#\t\t\t\tsystem.perspective.print(\"phoneSQL\")\n#\t\t\t\tsystem.perspective.print(phoneSQL)\n#\t\t\t\tsystem.perspective.print(\"phone\")\n#\t\t\t\tsystem.perspective.print(phone)\n\t\t\t\t\n\t\t\t\tif phoneSQL !\u003d phone:\n\t\t\t\t\tupdatedFields \u003d updatedFields + \" phone,\"\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tif altPhoneSQL !\u003d alt_phone:\n\t\t\t\t\tupdatedFields \u003d updatedFields + \" alt_phone,\"\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tif emailSQL !\u003d email:\n\t\t\t\t\tupdatedFields \u003d updatedFields + \" email,\"\n\t\t\t\t\n\t\t\t\tif communicationTypeIdSQL !\u003d communication_type_id:\n\t\t\t\t\tupdatedFields \u003d updatedFields + \" preferred_method,\"\n\t\t\t\tif mailServiceSQL !\u003d mail_service:\n\t\t\t\t\tupdatedFields \u003d updatedFields + \" mail_service,\"\n\t\t\t\t\n\t\t\t\tif (zip_code !\u003d None and zip_code !\u003d \u0027\u0027 and str(zipCodeSQL).strip() !\u003d str(zip_code).strip()):\n\t\t\t\t\tupdatedFields \u003d updatedFields + \" zip_code,\"\n\t\t\t\tif employerSQL !\u003d employer:\n\t\t\t\t\tupdatedFields \u003d updatedFields + \" employer,\"\n\t\t\t\t\n\t\t\t\tsystem.perspective.print(\"incomeSourceIDSQL\")\n\t\t\t\tsystem.perspective.print(incomeSourceIDSQL)\n\t\t\t\tsystem.perspective.print(\"incomeSource\")\n\t\t\t\tsystem.perspective.print(incomeSource)\n\t\t\t\tif incomeSourceIDSQL !\u003d incomeSource:\n\t\t\t\t\tupdatedFields \u003d updatedFields + \" income_source,\"\n\t\t\t\tif incomeAmountSQL !\u003d incomeAmount:\n\t\t\t\t\tupdatedFields \u003d updatedFields + \" income_amount,\"\n\t\t\t\tif incomeStartDateSQL !\u003d incomeStartDate:\n\t\t\t\t\tupdatedFields \u003d updatedFields + \" income_start_date,\"\n\t\t\t\tif employmentTypeSQL !\u003d employment_type:\n\t\t\t\t\tupdatedFields \u003d updatedFields + \" full_time_part_time,\"\n\t\t\t\tif caseManagerIdSQL !\u003d case_manager_id:\n\t\t\t\t\tupdatedFields \u003d updatedFields + \" case_manager,\"\n\t\t\t\tif activeSQL !\u003d self.view.custom.RegistrationData.active:\n\t\t\t\t\tupdatedFields \u003d updatedFields + \" active,\"\n\t\t\t\tif soRegistrySQL  !\u003d so_registry:\n\t\t\t\t\tupdatedFields \u003d updatedFields + \" so_registry,\"\n\t\t\t\tif timeDeceasedSQL !\u003d time_deceased:\n\t\t\t\t\tupdatedFields \u003d updatedFields + \" time_deceased,\"\n\t\t\t\t\n\t\t\t\t## new fields as per ticket 305\n\t\t\t\tif foodStampsSQL !\u003d foodStamps:\n\t\t\t\t\tupdatedFields \u003d updatedFields + \" foodStamps,\"\n\t\t\t\tif additional_incomeSourceIDSQL !\u003d additional_incomeSource:\n\t\t\t\t\tupdatedFields \u003d updatedFields + \" additional_income_source,\"\n\t\t\t\tif additional_incomeAmountSQL !\u003d additional_incomeAmount:\n\t\t\t\t\tupdatedFields \u003d updatedFields + \" additional_income_amount,\"\n\t\t\t\t\t\n\t\t\t\tif updatedFields is not None:\n\t\t\t\t\tupdatedFields \u003d updatedFields[:-1]\n\t\t\t\tpath \u003d \"Participants/Registration/InsertRegistrationLog\"\n\t\t\t\tparameters \u003d {\"participantId\":participant_id, \"actionBy\":self.session.custom.loggedInStaffEmployeeID, \"action\":\"Edit Registration\", \"actionFields\":updatedFields, \"userName\":self.session.props.auth.user.userName}\n\t\t\t\tsystem.db.runNamedQuery(project\u003dproject,path\u003dpath,parameters\u003dparameters)\n\t\t\t\t## Change End\n\t\t\t\tsystem.perspective.sendMessage(messageType\u003d\"refreshPersonalData\", payload\u003d{}, scope\u003d\"session\")\n\t\t\t\tsystem.perspective.sendMessage(messageType\u003d\"refreshPersonalInformation\", payload\u003d{}, scope\u003d\"session\")\n\t\t\t\t\t\t\t\t\n\t\t\t### Always close the transaction\t\n\t\t\tsystem.db.closeTransaction(txId)\n\t\t\t\n\t\telse:\n\t\t\tself.getSibling(\"Label\").showMessage(error_message)\n\t\t\t\n\texcept:\n\t\tlogger \u003d system.util.getLogger(\"Participants Personal Detail Edit Button Save\")\n\t\tmsg \u003d traceback.format_exc()\n\t\tlogger.error(msg)"
                  },
                  "scope": "G",
                  "type": "script"
                }
              }
            },
            "meta": {
              "name": "Button Save"
            },
            "position": {
              "basis": "120px",
              "shrink": 0
            },
            "props": {
              "style": {
                "classes": "Buttons/Main",
                "marginBottom": "15px",
                "marginLeft": "20px",
                "marginRight": "20px",
                "marginTop": "15px"
              },
              "text": "Save"
            },
            "type": "ia.input.button"
          },
          {
            "events": {
              "component": {
                "onActionPerformed": {
                  "config": {
                    "script": "\tsystem.perspective.sendMessage(messageType\u003d\"refreshPersonalData\", payload\u003d{}, scope\u003d\"session\")"
                  },
                  "scope": "G",
                  "type": "script"
                }
              }
            },
            "meta": {
              "name": "Button Cancel"
            },
            "position": {
              "basis": "120px",
              "shrink": 0
            },
            "props": {
              "style": {
                "classes": "Buttons/Secondary_Orange",
                "marginBottom": "15px",
                "marginTop": "15px"
              },
              "text": "Undo/Reload"
            },
            "type": "ia.input.button"
          },
          {
            "meta": {
              "name": "Label",
              "visible": false
            },
            "position": {
              "basis": "50px",
              "grow": 1
            },
            "props": {
              "style": {
                "classes": "Text/Error_Message"
              },
              "text": "Participant Discovery Data Updated Successfully."
            },
            "scripts": {
              "customMethods": [
                {
                  "name": "showMessage",
                  "params": [
                    "message"
                  ],
                  "script": "\timport time\n\tself.props.text \u003d message\n\tself.meta.visible \u003d True\n\ttime.sleep(5)\n\tself.meta.visible \u003d False\n\t"
                }
              ],
              "extensionFunctions": null,
              "messageHandlers": []
            },
            "type": "ia.display.label"
          }
        ],
        "meta": {
          "name": "root actions"
        },
        "position": {
          "basis": "65px",
          "shrink": 0
        },
        "propConfig": {
          "position.display": {
            "binding": {
              "config": {
                "expression": "{session.custom.isSupportCoordinator} || {session.custom.isWSSupportCoordinator} || {session.custom.isManager} || {session.custom.isWSManager} || {session.custom.isAdministrator}"
              },
              "type": "expr"
            }
          }
        },
        "type": "ia.container.flex"
      }
    ],
    "meta": {
      "name": "root"
    },
    "props": {
      "direction": "column",
      "style": {
        "classes": "Background/Default"
      }
    },
    "scripts": {
      "customMethods": [],
      "extensionFunctions": null,
      "messageHandlers": [
        {
          "messageType": "refreshPersonalData",
          "pageScope": true,
          "script": "\tsystem.perspective.print(\"in refreshPersonalData msg recvd\")\n\tview \u003d self.view\n\tview.refreshBinding(\"custom.sql_data\")",
          "sessionScope": true,
          "viewScope": true
        }
      ]
    },
    "type": "ia.container.flex"
  }
}