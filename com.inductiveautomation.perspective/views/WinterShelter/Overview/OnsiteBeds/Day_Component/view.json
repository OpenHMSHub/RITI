{
  "custom": {},
  "params": {
    "addition": false,
    "blocked": true,
    "cancelled": false,
    "dayOfYear": 135,
    "enabled": true,
    "label": 0,
    "limitDate": 361,
    "noshow": false,
    "selected": false
  },
  "propConfig": {
    "params.addition": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.blocked": {
      "onChange": {
        "enabled": null,
        "script": "\t#if blocked remove from schedule\n\tif origin \u003d\u003d \u0027Script\u0027:\n\t\tadd \u003d False\n\t\tdayOfYear \u003d self.params.dayOfYear\n\t\tpayload \u003d {\u0027add\u0027:add,\u0027dayOfYear\u0027:dayOfYear}\n\t\tmessageType \u003d \u0027hostDay\u0027\n\t\tsystem.perspective.sendMessage(messageType, payload, scope \u003d \u0027page\u0027)"
      },
      "paramDirection": "inout",
      "persistent": true
    },
    "params.cancelled": {
      "paramDirection": "inout",
      "persistent": true
    },
    "params.dayOfYear": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.enabled": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.label": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.limitDate": {
      "binding": {
        "config": {
          "expression": "//dateFormat(\"2022-01-01\", \"yyyy-MM-dd\")\r\n//now()\r\n//\"01/11/2022\"\r\n{[default]RITI/Winter Shelter/CurrentDate.value}"
        },
        "transforms": [
          {
            "code": "\tfrom datetime import datetime, date\n\tday_of_year_limit \u003d date(2022, 10, 31).timetuple().tm_yday\n#\tday_of_year \u003d date(2022, 11, 30).timetuple().tm_yday\n\tday_of_year \u003d datetime.now().timetuple().tm_yday\n\tvalue \u003d system.date.format(value,\u0027yyyy/MM/dd\u0027)\n\tTodayDate_year \u003d int(value.split(\u0027/\u0027)[0])\n\tTodayDate_month \u003d int(value.split(\u0027/\u0027)[1])\n\tTodayDate_date \u003d int(value.split(\u0027/\u0027)[2])\n\tday_of_year \u003d date(TodayDate_year,TodayDate_month,TodayDate_date).timetuple().tm_yday\n\tif day_of_year \u003e day_of_year_limit:\n\t\tcondition \u003d True\n\telse:\n\t\tcondition \u003d False\n\treturn day_of_year",
            "type": "script"
          }
        ],
        "type": "expr"
      },
      "paramDirection": "output",
      "persistent": true
    },
    "params.noshow": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.selected": {
      "onChange": {
        "enabled": null,
        "script": "\tif origin \u003d\u003d \u0027Script\u0027 and not self.params.blocked:\n\t\tadd \u003d currentValue.value\n\t\tdayOfYear \u003d self.params.dayOfYear\n\t\tpayload \u003d {\u0027add\u0027:add,\u0027dayOfYear\u0027:dayOfYear}\n\t\tmessageType \u003d \u0027hostDay\u0027\n\t\tsystem.perspective.sendMessage(messageType, payload, scope \u003d \u0027page\u0027)"
      },
      "paramDirection": "inout",
      "persistent": true
    }
  },
  "props": {
    "defaultSize": {
      "height": 50,
      "width": 50
    }
  },
  "root": {
    "children": [
      {
        "meta": {
          "name": "Label"
        },
        "position": {
          "basis": "30px",
          "shrink": 0
        },
        "propConfig": {
          "position.display": {
            "binding": {
              "config": {
                "expression": "{view.params.label} !\u003d \u0027\u0027 \u0026\u0026 !isNull({view.params.label})"
              },
              "type": "expr"
            }
          },
          "props.style.backgroundColor": {
            "binding": {
              "config": {
                "expression": "if({view.params.blocked},\"#DDDDDD\",\r\n\tif({view.params.selected}, \"#0066FF\",\r\n\t\tif({view.params.noshow},\"#FF0000\",\r\n\t\t\"#FFFFFF00\")))"
              },
              "type": "expr"
            }
          },
          "props.style.borderColor": {
            "binding": {
              "config": {
                "expression": "if({view.params.addition} \u0026\u0026 {view.params.selected}, \"#3ec3d9\",\"#FF0000\")"
              },
              "type": "expr"
            }
          },
          "props.style.borderStyle": {
            "binding": {
              "config": {
                "expression": "if(({view.params.cancelled}) || ({view.params.addition} \u0026\u0026 {view.params.selected}), \u0027solid\u0027, \u0027none\u0027)"
              },
              "type": "expr"
            }
          },
          "props.style.color": {
            "binding": {
              "config": {
                "expression": "if({view.params.blocked} || {view.params.selected},\"#FFFFFF\", \u0027#9db8d1\u0027)"
              },
              "type": "expr"
            }
          },
          "props.text": {
            "binding": {
              "config": {
                "path": "view.params.label"
              },
              "type": "property"
            }
          }
        },
        "props": {
          "style": {
            "borderBottomLeftRadius": "50px",
            "borderBottomRightRadius": "50px",
            "borderTopLeftRadius": "50px",
            "borderTopRightRadius": "50px",
            "borderWidth": "2px",
            "marginLeft": "10px",
            "marginRight": 10,
            "textAlign": "center"
          }
        },
        "type": "ia.display.label"
      }
    ],
    "meta": {
      "name": "root"
    },
    "props": {
      "alignContent": "center",
      "direction": "column",
      "justify": "center"
    },
    "type": "ia.container.flex"
  }
}