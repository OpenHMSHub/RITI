{
  "custom": {
    "exportDataSet": {
      "$": [
        "ds",
        192,
        1738578987534
      ],
      "$columns": []
    },
    "seasonName": ""
  },
  "params": {
    "seasonId": 13
  },
  "propConfig": {
    "custom.exportDataSet": {
      "binding": {
        "config": {
          "struct": {
            "columns": "{/root/Table.props.columns}",
            "data": "{/root/Table.props.data}"
          },
          "waitOnAll": true
        },
        "transforms": [
          {
            "code": "\tcolumns \u003d value[\u0027columns\u0027]\n\tdata \u003d value[\u0027data\u0027]\n\tdatasetHeaders \u003d []\n\tdatasetRows \u003d []\n\tfor i in range(1, len(columns)):\n\t\tdatasetHeaders.append(columns[i].field)\n\t\n\tfor i in range(len(data)):\n\t\toneRow \u003d []\n\t\tfor j in range(len(datasetHeaders)):\n\t\t\toneRow.append(data[i][datasetHeaders[j]].value)\n\t\tdatasetRows.append(oneRow)\n\treturnDataSet \u003d system.dataset.toDataSet(datasetHeaders, datasetRows)\n\treturn returnDataSet",
            "type": "script"
          }
        ],
        "type": "expr-struct"
      },
      "persistent": true
    },
    "custom.seasonName": {
      "binding": {
        "config": {
          "parameters": {
            "id": "{view.params.seasonId}"
          },
          "queryPath": "WinterShelterGlobal/Registration/getSeasonBySeasonId"
        },
        "transforms": [
          {
            "code": "\tseasonName \u003d \"\"\n\tif value is not None and value.getRowCount() \u003e 0 and value.getValueAt(0,0) !\u003d None:\n\t\tseasonName \u003d value.getValueAt(0,0)\n\treturn seasonName",
            "type": "script"
          }
        ],
        "type": "query"
      },
      "persistent": true
    },
    "params.seasonId": {
      "paramDirection": "input",
      "persistent": true
    }
  },
  "props": {
    "defaultSize": {
      "height": 350,
      "width": 1045
    },
    "loading": {
      "mode": "blocking"
    }
  },
  "root": {
    "children": [
      {
        "meta": {
          "name": "EmbeddedView Header"
        },
        "position": {
          "basis": "25px",
          "shrink": 0
        },
        "props": {
          "params": {
            "Text": "Congregation Trends"
          },
          "path": "1_globalTEMPLATES/Header/Header"
        },
        "type": "ia.display.view"
      },
      {
        "children": [
          {
            "children": [
              {
                "meta": {
                  "name": "Image"
                },
                "position": {
                  "basis": "20px"
                },
                "props": {
                  "fit": {
                    "height": 15,
                    "mode": "absolute",
                    "width": 15
                  },
                  "source": "/system/images/SVGs/Navigation Arrow Box.svg",
                  "style": {
                    "marginLeft": "10px",
                    "marginTop": "10px"
                  },
                  "tint": {
                    "color": "#0D80E3"
                  }
                },
                "type": "ia.display.image"
              },
              {
                "meta": {
                  "name": "Label"
                },
                "position": {
                  "basis": "50px",
                  "grow": 1
                },
                "props": {
                  "text": "Congregations Dashboard",
                  "textStyle": {
                    "classes": "ActivityCards/Card_TextLight"
                  }
                },
                "type": "ia.display.label"
              }
            ],
            "events": {
              "dom": {
                "onClick": {
                  "config": {
                    "params": {
                      "tab_id": "Congregations"
                    },
                    "view": "WinterShelter/Dashboard/WinterShelter_Dashboard"
                  },
                  "scope": "C",
                  "type": "nav"
                }
              }
            },
            "meta": {
              "name": "labels"
            },
            "position": {
              "basis": "200px",
              "grow": 1
            },
            "type": "ia.container.flex"
          },
          {
            "children": [
              {
                "meta": {
                  "name": "Search"
                },
                "position": {
                  "basis": "320px",
                  "grow": 1
                },
                "props": {
                  "params": {
                    "searchText": ""
                  },
                  "path": "1_TEMPLATES/Filtering/Filters/Search_Bar"
                },
                "type": "ia.display.view"
              },
              {
                "meta": {
                  "name": "Clear"
                },
                "position": {
                  "basis": "60px",
                  "display": false
                },
                "props": {
                  "path": "1_TEMPLATES/Filtering/Filters/ClearFilters"
                },
                "type": "ia.display.view"
              }
            ],
            "meta": {
              "name": "SearchFilter"
            },
            "position": {
              "basis": "250px"
            },
            "props": {
              "style": {
                "marginBottom": "3px",
                "marginRight": "5px",
                "marginTop": "3px"
              }
            },
            "type": "ia.container.flex"
          },
          {
            "meta": {
              "name": "TableToExcel"
            },
            "position": {
              "basis": "35px"
            },
            "props": {
              "params": {
                "messageType": "WS_CongregationTrends"
              },
              "path": "1_TEMPLATES/Tables/TableToExcelCustomMessageType"
            },
            "type": "ia.display.view"
          }
        ],
        "meta": {
          "name": "Labels"
        },
        "position": {
          "basis": "35px"
        },
        "props": {
          "style": {
            "classes": "Background/Default",
            "overflow": "hidden"
          }
        },
        "type": "ia.container.flex"
      },
      {
        "meta": {
          "name": "Error"
        },
        "position": {
          "basis": "25px",
          "display": false
        },
        "props": {
          "style": {
            "classes": "Text/Error_Message"
          }
        },
        "type": "ia.display.label"
      },
      {
        "custom": {
          "DockID": -1
        },
        "events": {
          "component": {
            "onRowClick": {
              "config": {
                "script": "\tselectedColumn \u003d self.props.selection.selectedColumn\n\tlocationId \u003d event.value[\"locationId\"]\n\n\tif selectedColumn \u003d\u003d \"locationId\": \n\t\tid \u003d \"PreviewCongregation\" \n\t\tparams \u003d {\"locationId\":locationId}\n\t\tif self.custom.DockID !\u003d locationId:\n\t\t\tsystem.perspective.openDock(id\u003did,params\u003dparams)\n\t\t\tpayload \u003d {\"locationId\":locationId}\n\t\t\tsystem.perspective.sendMessage(\"DockUpdate\", payload\u003dpayload, scope \u003d \u0027page\u0027 )\n\t\telse:\n\t\t\tsystem.perspective.toggleDock(id\u003did,params\u003dparams)\n\t\tself.custom.DockID \u003d locationId"
              },
              "scope": "G",
              "type": "script"
            }
          }
        },
        "meta": {
          "name": "Table"
        },
        "position": {
          "basis": "200px",
          "grow": 1
        },
        "propConfig": {
          "props.data": {
            "binding": {
              "config": {
                "struct": {
                  "searchText": "{../Labels/SearchFilter/Search.props.params.searchText}",
                  "seasonId": "{view.params.seasonId}"
                },
                "waitOnAll": true
              },
              "transforms": [
                {
                  "code": "\tseasonId \u003d value[\u0027seasonId\u0027]\n\tdef getColumnDataset(field,header,render,width,justify):\n\t  \tcolumn_dataset \u003d {\n\t\t\t\t\t    \"field\": field,\n\t\t\t\t\t    \"visible\": True,\n\t\t\t\t\t    \"editable\": False,\n\t\t\t\t\t    \"render\": render,\n\t\t\t\t\t    \"justify\": justify,\n\t\t\t\t\t    \"align\": \"center\",\n\t\t\t\t\t    \"resizable\": True if header!\u003dNone and header!\u003d\u0027 \u0027 else False,\n\t\t\t\t\t    \"sortable\": True if header!\u003dNone and header!\u003d\u0027 \u0027 else False,\n\t\t\t\t\t    \"sort\": \"none\",\n\t\t\t\t\t    \"viewPath\": \"1_TEMPLATES/Tables/TableOptions\",\n\t\t\t\t\t    \"viewParams\": {},\n\t\t\t\t\t    \"boolean\": \"checkbox\",\n\t\t\t\t\t    \"number\": \"value\",\n\t\t\t\t\t    \"progressBar\": {\n\t\t\t\t\t      \"max\": 100,\n\t\t\t\t\t      \"bar\": {\n\t\t\t\t\t        \"color\": \"#62A3F6\",\n\t\t\t\t\t        \"linecap\": \"round\",\n\t\t\t\t\t        \"width\": 5\n\t\t\t\t\t      },\n\t\t\t\t\t      \"track\": {\n\t\t\t\t\t        \"color\": \"#DADADA\",\n\t\t\t\t\t        \"linecap\": \"round\",\n\t\t\t\t\t        \"width\": 2\n\t\t\t\t\t      },\n\t\t\t\t\t      \"value\": {\n\t\t\t\t\t        \"color\": \"#7D7D7D\",\n\t\t\t\t\t        \"show\": True\n\t\t\t\t\t      }\n\t\t\t\t\t    },\n\t\t\t\t\t    \"toggleSwitch\": {\n\t\t\t\t\t      \"color\": {\n\t\t\t\t\t        \"selected\": \"#2196F3\",\n\t\t\t\t\t        \"unselected\": \"#FFFFFF\"\n\t\t\t\t\t      }\n\t\t\t\t\t    },\n\t\t\t\t\t    \"numberFormat\": \"0,0.##\",\n\t\t\t\t\t    \"dateFormat\": \"MM/DD/YYYY\",\n\t\t\t\t\t    \"width\": width,\n\t\t\t\t\t    \"strictWidth\": False,\n\t\t\t\t\t    \"header\": {\n\t\t\t\t\t      \"title\": header,\n\t\t\t\t\t      \"justify\": justify,\n\t\t\t\t\t      \"align\": \"center\",\n\t\t\t\t\t      \"style\": {\n\t\t\t\t\t        \"classes\": \"Table/Column_Header_Line\"\n\t\t\t\t\t      }\n\t\t\t\t\t    },\n\t\t\t\t\t    \"footer\": {\n\t\t\t\t\t      \"title\": \"\",\n\t\t\t\t\t      \"justify\": \"left\",\n\t\t\t\t\t      \"align\": \"center\",\n\t\t\t\t\t      \"style\": {\n\t\t\t\t\t        \"classes\": \"\"\n\t\t\t\t\t      }\n\t\t\t\t\t    },\n\t\t\t\t\t    \"style\": {\n\t\t\t\t\t      \"classes\": \"Table/Column_Normal_Detail\"\n\t\t\t\t\t    }\n\t\t\t\t\t  }\n\t\treturn column_dataset\n\t\t\n\tpath \u003d \u0027WinterShelter/Overview/GetCongreagtionTrends\u0027\n\tsearch_location \u003d value[\u0027searchText\u0027]\n\tget_seasons \u003d system.db.runPrepQuery(\u0027SELECT * FROM shelter.Seasons where Seasons \u003c\u003d (select Seasons from shelter.seasons where id \u003d \u0027+str(seasonId)+\u0027) order by Seasons\u0027)\n\toriginal_columns \u003d [] #self.props.columns\n\tdataset \u003d []\n\tif get_seasons.getRowCount() \u003e 0:\n\t\tfor i in range(0,get_seasons.getRowCount()):\n\t\t\tseasonId \u003d get_seasons.getValueAt(i,\u0027id\u0027)\n\t\t\tseasonName \u003d get_seasons.getValueAt(i,\u0027Seasons\u0027)\n\t\t\tseasonLabel \u003d \"\u0027\" + str(seasonName.split(\u0027-\u0027)[0][-2:]) + \"-\u0027\" + str(seasonName.split(\u0027-\u0027)[1][-2:])\n\t\t\tresult \u003d system.db.runNamedQuery(path,{\u0027seasonId\u0027:seasonId, \u0027congregationSearch\u0027:search_location})\n\t\t\tif i \u003d\u003d 0:\n\t\t\t\tdatasetNew \u003d result\n\t\t\t\tdatasetNew \u003d system.dataset.addColumn(datasetNew, datasetNew.getColumnCount(), list(result.getColumnAsList(5)), seasonLabel, int)\n\t\t\t\toriginal_columns.append(getColumnDataset(\u0027locationId\u0027,\u0027 \u0027,\u0027view\u0027,50,\u0027left\u0027))\n\t\t\t\toriginal_columns.append(getColumnDataset(\u0027locationName\u0027,\u0027Congregation\u0027,\u0027string\u0027,200,\u0027left\u0027))\n\t\t\t\toriginal_columns.append(getColumnDataset(seasonLabel,seasonLabel,\u0027number\u0027,100,\u0027center\u0027))\n\t\t\telse:\n\t\t\t\tdatasetNew \u003d system.dataset.addColumn(datasetNew, datasetNew.getColumnCount(), list(result.getColumnAsList(5)), seasonLabel, int)\n\t\t\t\toriginal_columns.append(getColumnDataset(seasonLabel,seasonLabel,\u0027number\u0027,100,\u0027center\u0027))\n\t\t# set column dataset to table column\n\t\tself.props.columns \u003d original_columns\n\t\t\n\t\tdataset \u003d []\n\t\tfor r in range(0,datasetNew.getRowCount()):\n\t\t\tdict \u003d {}\n\t\t\thighestYear \u003d None\n\t\t\tlowestYear \u003d None\n\t\t\tfor c in range(0,datasetNew.getColumnCount()):\n\t\t\t\tif \"\u0027\" in datasetNew.getColumnName(c):\n\t\t\t\t\tdict[datasetNew.getColumnName(c)] \u003d {\u0027value\u0027:datasetNew.getValueAt(r,c),\u0027style\u0027:{}} # lowest:#FF7A59, highest:#3EC3D9\n\t\t\t\t\t#get highest total beds year\n\t\t\t\t\tif highestYear \u003d\u003d None:\n\t\t\t\t\t\thighestYear \u003d datasetNew.getValueAt(r,c)\n\t\t\t\t\t\thighestCol \u003d [c]\n\t\t\t\t\telse:\n\t\t\t\t\t\tif int(datasetNew.getValueAt(r,c)) \u003e int(highestYear):\n\t\t\t\t\t\t\thighestYear \u003d datasetNew.getValueAt(r,c)\n\t\t\t\t\t\t\thighestCol \u003d [c]\n\t\t\t\t\t\telif int(datasetNew.getValueAt(r,c)) \u003d\u003d int(highestYear):\n\t\t\t\t\t\t\thighestYear \u003d datasetNew.getValueAt(r,c)\n\t\t\t\t\t\t\thighestCol.append(c)\n\t\t\t\t\t#get lowest total beds year\n\t\t\t\t\tif lowestYear \u003d\u003d None:\n\t\t\t\t\t\tlowestYear \u003d datasetNew.getValueAt(r,c)\n\t\t\t\t\t\tlowestCol \u003d [c]\n\t\t\t\t\telse:\n\t\t\t\t\t\tif int(datasetNew.getValueAt(r,c)) \u003c int(lowestYear):\n\t\t\t\t\t\t\tlowestYear \u003d datasetNew.getValueAt(r,c)\n\t\t\t\t\t\t\tlowestCol \u003d [c]\n\t\t\t\t\t\telif int(datasetNew.getValueAt(r,c)) \u003d\u003d int(lowestYear):\n\t\t\t\t\t\t\tlowestYear \u003d datasetNew.getValueAt(r,c)\n\t\t\t\t\t\t\tlowestCol.append(c)\n\t\t\t\telse:\n\t\t\t\t\tdict[datasetNew.getColumnName(c)] \u003d {\u0027value\u0027:datasetNew.getValueAt(r,c),\u0027style\u0027:{}}\n\t\t\t#set lowest:#FF7A59, highest:#3EC3D9 color in table\n\t\t\tfor one_highestCol in highestCol:\n\t\t\t\tdict[datasetNew.getColumnName(one_highestCol)][\u0027style\u0027] \u003d {\u0027color\u0027:\u0027#3EC3D9\u0027} \n\t\t\tfor one_lowestCol in lowestCol:\n\t\t\t\tdict[datasetNew.getColumnName(one_lowestCol)][\u0027style\u0027] \u003d {\u0027color\u0027:\u0027#FF7A59\u0027} \n\t\t\tdataset.append(dict)\n\n\treturn dataset",
                  "type": "script"
                }
              ],
              "type": "expr-struct"
            }
          },
          "props.filter.text": {
            "access": "PUBLIC"
          },
          "props.selection.style.backgroundColor": {
            "binding": {
              "config": {
                "path": "this.props.selection.selectedRow"
              },
              "transforms": [
                {
                  "code": "\treturn \"#FFFFFF00\" if value is None or value \u003d\u003d -1 else \"#9AF4EB4D\"",
                  "type": "script"
                }
              ],
              "type": "property"
            }
          }
        },
        "props": {
          "cells": {
            "style": {
              "classes": "Table/Cell_Dashboard_NoBG"
            }
          },
          "headerStyle": {
            "classes": "Table/Column_Normal"
          },
          "pager": {
            "activeOption": 100,
            "bottom": false,
            "initialOption": 100
          },
          "rows": {
            "highlight": {
              "color": "#ccffff"
            },
            "striped": {
              "enabled": false
            },
            "style": {
              "cursor": "default"
            }
          },
          "style": {
            "classes": "Background/Default",
            "cursor": "pointer",
            "overflowX": "hidden"
          }
        },
        "scripts": {
          "customMethods": [],
          "extensionFunctions": null,
          "messageHandlers": [
            {
              "messageType": "WS_CongregationTrends",
              "pageScope": true,
              "script": "\timport traceback\n\ttry:\n\t\t#Send the dataset to Excel\n\t\t\n\t\tfilename \u003d \u0027WinterShelter_Overview_CongregationTrends_\u0027 +  self.view.custom.seasonName + \u0027.xls\u0027\n\t\t\n\t\txlFile \u003d system.dataset.toExcel(True,self.view.custom.exportDataSet)\n\t\tsystem.perspective.download(filename, xlFile)\n\texcept:   \n\t\tlogger \u003d system.util.getLogger(\"Wintershelter Overview Dashboard CongregationTrends tableToExcel\")\n\t\tmsg \u003d traceback.format_exc()\n\t\tlogger.error(msg)",
              "sessionScope": true,
              "viewScope": false
            }
          ]
        },
        "type": "ia.display.table"
      }
    ],
    "meta": {
      "name": "root"
    },
    "props": {
      "direction": "column",
      "style": {
        "classes": "Background/Alternative"
      }
    },
    "type": "ia.container.flex"
  }
}