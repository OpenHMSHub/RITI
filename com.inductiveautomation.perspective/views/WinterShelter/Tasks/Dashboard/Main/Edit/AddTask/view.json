{
  "custom": {
    "blankArray": [],
    "taskData": {
      "Congregation Name": "",
      "Created": "",
      "Notes": "",
      "congregationId": "",
      "dueDate": "",
      "id": "",
      "priority": "",
      "staffId": "",
      "statusId": "",
      "title": "",
      "typeId": ""
    }
  },
  "events": {
    "system": {
      "onStartup": {
        "config": {
          "script": "\ttaskID \u003d self.params.taskID\n\tif taskID !\u003d -1:\n\t\ttaskData \u003d system.db.runNamedQuery(\"WinterShelter/Tasks/TaskByID\", parameters \u003d {\"taskID\" : taskID})\n\t\tself.custom.taskData[\u0027Congregation Name\u0027] \u003d taskData(0,\"congregationName\")\n\t\tself.custom.taskData[\u0027congregationId\u0027] \u003d taskData(0,\"congregationId\")\n\t\tself.custom.taskData[\u0027typeId\u0027] \u003d taskData(0,\"typeId\")\n\t\tself.custom.taskData.Notes \u003d taskData(0,\"notes\")\n\t\tself.custom.taskData.title \u003d taskData(0,\"title\")\n\t\tself.custom.taskData.Created \u003d taskData(0,\"timeCreated\")\n\t\tself.custom.taskData.dueDate \u003d taskData(0,\"dueDate\")\n\t\tself.custom.taskData.id \u003d taskID\n\t\tself.custom.taskData.priority \u003d taskData(0,\"priority\")\n\t\tself.custom.taskData.staffId \u003d taskData(0,\"staffId\")\n\t\tself.custom.taskData.statusId \u003d taskData(0,\"statusId\")\n\t\t\n\t\t"
        },
        "scope": "G",
        "type": "script"
      }
    }
  },
  "params": {
    "isUpdateTask": false,
    "taskID": -1
  },
  "propConfig": {
    "custom.blankArray": {
      "persistent": true
    },
    "custom.eventFacilitators": {
      "binding": {
        "config": {
          "parameters": {
            "eventID": "{view.params.eventId}"
          },
          "queryPath": "Calendar/GetEventFacilitators"
        },
        "transforms": [
          {
            "code": "\tarray \u003d []\n\tfor row in range(value.getRowCount()):\n\t\tname \u003d value.getValueAt(row, \"name\")\n\t\tid \u003d value.getValueAt(row, \"id\")\n\t\tarray.append({\u0027text\u0027: name, \u0027id\u0027: id})\n\treturn array",
            "type": "script"
          }
        ],
        "type": "query"
      }
    },
    "custom.eventParams": {
      "binding": {
        "config": {
          "parameters": {
            "eventID": "{view.params.eventId}"
          },
          "queryPath": "Calendar/GetEventByID"
        },
        "transforms": [
          {
            "code": "\tdef getByWeekDay(row):\n\t\tweekDayDict \u003d {\n\t\t\u0027mo\u0027: value.getValueAt(row, \"monday\"),\n\t\t\u0027tu\u0027: value.getValueAt(row, \"tuesday\"),\n\t\t\u0027we\u0027: value.getValueAt(row, \"wednesday\"),\n\t\t\u0027th\u0027: value.getValueAt(row, \"thursday\"),\n\t\t\u0027fr\u0027: value.getValueAt(row, \"friday\"),\n\t\t\u0027sa\u0027: value.getValueAt(row, \"saturday\"),\n\t\t\u0027su\u0027: value.getValueAt(row, \"sunday\")}\n\t\t\t\n\t\tbyweekday \u003d []\n\t\tfor key in [\u0027mo\u0027, \u0027tu\u0027, \u0027we\u0027, \u0027th\u0027, \u0027fr\u0027, \u0027sa\u0027, \u0027su\u0027,]:\n\t\t\tif weekDayDict[key]:\n\t\t\t\tbyweekday.append(key)\n\t\t\t\n\t\treturn byweekday\n\t\n\teventParams \u003d {}\n\tif value.getRowCount() \u003d\u003d 0:\n\t\treturn {\n\t\t\u0027category\u0027: None,\n\t\t\u0027subCategory\u0027: None,\n\t\t\u0027title\u0027: None,\n\t\t\u0027description\u0027: None,\n\t\t\u0027audienceMen\u0027: None,\n\t\t\u0027audienceMinors\u0027: None,\n\t\t\u0027audienceParticipants\u0027: None,\n\t\t\u0027audienceStaff\u0027: None,\n\t\t\u0027audienceVolunteers\u0027: None,\n\t\t\u0027audienceWomen\u0027: None,\n\t\t\u0027venue\u0027: None,\n\t\t\u0027room\u0027: None,\n\t\t\u0027volunteersNeeded\u0027: None,\n\t\t\u0027staffNeeded\u0027: None,\n\t\t\u0027frequency\u0027: None,\n\t\t\u0027monday\u0027: None,\n\t\t\u0027tuesday\u0027: None,\n\t\t\u0027wednesday\u0027: None,\n\t\t\u0027thursday\u0027: None,\n\t\t\u0027friday\u0027: None,\n\t\t\u0027saturday\u0027: None,\n\t\t\u0027sunday\u0027: None,\n\t\t\u0027bysetpos\u0027: None,\n\t\t\u0027startDate\u0027: None,\n\t\t\u0027endDate\u0027: None,\n\t\t\u0027byweekday\u0027: None,\n\t\t\u0027bymonthday\u0027: None,\n\t\t\u0027bymonth\u0027: None,\n\t\t\u0027interval\u0027: None,\n\t\t\u0027yearlyType\u0027: None,\n\t\t\u0027monthlyType\u0027: None\n\t\t}\n\t\n\teventParams[\u0027category\u0027] \u003d value.getValueAt(0, \u0027category\u0027)\n\teventParams[\u0027subCategory\u0027] \u003d value.getValueAt(0, \u0027subCategory\u0027)\n\teventParams[\u0027title\u0027] \u003d value.getValueAt(0, \u0027title\u0027)\n\teventParams[\u0027description\u0027] \u003d value.getValueAt(0, \u0027description\u0027)\n\teventParams[\u0027audienceMen\u0027] \u003d value.getValueAt(0, \u0027audienceMen\u0027)\n\teventParams[\u0027audienceMinors\u0027] \u003d value.getValueAt(0, \u0027audienceMinors\u0027)\n\teventParams[\u0027audienceParticipants\u0027] \u003d value.getValueAt(0, \u0027audienceParticipants\u0027)\n\teventParams[\u0027audienceStaff\u0027] \u003d value.getValueAt(0, \u0027audienceStaff\u0027)\n\teventParams[\u0027audienceVolunteers\u0027] \u003d value.getValueAt(0, \u0027audienceVolunteers\u0027)\n\teventParams[\u0027audienceWomen\u0027] \u003d value.getValueAt(0, \u0027audienceWomen\u0027)\n\teventParams[\u0027venue\u0027] \u003d value.getValueAt(0, \u0027venue\u0027)\n\teventParams[\u0027room\u0027] \u003d value.getValueAt(0, \u0027room\u0027)\n\teventParams[\u0027volunteersNeeded\u0027] \u003d value.getValueAt(0, \u0027volunteersNeeded\u0027)\n\teventParams[\u0027staffNeeded\u0027] \u003d value.getValueAt(0, \u0027staffNeeded\u0027)\n\teventParams[\u0027frequency\u0027] \u003d value.getValueAt(0, \u0027freq\u0027)\n\teventParams[\u0027monday\u0027] \u003d value.getValueAt(0, \u0027monday\u0027)\n\teventParams[\u0027tuesday\u0027] \u003d value.getValueAt(0, \u0027tuesday\u0027)\n\teventParams[\u0027wednesday\u0027] \u003d value.getValueAt(0, \u0027wednesday\u0027)\n\teventParams[\u0027thursday\u0027] \u003d value.getValueAt(0, \u0027thursday\u0027)\n\teventParams[\u0027friday\u0027] \u003d value.getValueAt(0, \u0027friday\u0027)\n\teventParams[\u0027saturday\u0027] \u003d value.getValueAt(0, \u0027saturday\u0027)\n\teventParams[\u0027sunday\u0027] \u003d value.getValueAt(0, \u0027sunday\u0027)\n\teventParams[\u0027bysetpos\u0027] \u003d value.getValueAt(0, \u0027bysetpos\u0027)\n\teventParams[\u0027startDate\u0027] \u003d startDate \u003d value.getValueAt(0, \u0027startDate\u0027)\n\teventParams[\u0027endDate\u0027] \u003d endDate \u003d value.getValueAt(0, \u0027endDate\u0027)\n\teventParams[\u0027byweekday\u0027] \u003d byweekday \u003d getByWeekDay(0)\n\teventParams[\u0027bymonthday\u0027] \u003d system.date.getDayOfMonth(startDate)\n\teventParams[\u0027bymonth\u0027] \u003d value.getValueAt(0, \u0027bymonth\u0027)\n\teventParams[\u0027interval\u0027] \u003d value.getValueAt(0, \u0027interval\u0027)\n\tif len(byweekday) \u003d\u003d 0:\n\t\teventParams[\u0027yearlyType\u0027] \u003d \u0027yearlydate\u0027\n\t\teventParams[\u0027monthlyType\u0027] \u003d \u0027monthlydate\u0027\n\telse:\n\t\teventParams[\u0027yearlyType\u0027] \u003d \u0027yearlyday\u0027\n\t\teventParams[\u0027monthlyType\u0027] \u003d \u0027monthlyday\u0027\n\t\n\t\n\treturn eventParams",
            "type": "script"
          }
        ],
        "type": "query"
      }
    },
    "custom.taskData": {
      "persistent": true
    },
    "params.Row_Data": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.isUpdateTask": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.taskID": {
      "paramDirection": "input",
      "persistent": true
    }
  },
  "props": {
    "defaultSize": {
      "height": 1673,
      "width": 600
    }
  },
  "root": {
    "children": [
      {
        "meta": {
          "name": "Header"
        },
        "position": {
          "basis": "62px",
          "shrink": 0
        },
        "propConfig": {
          "props.params.text": {
            "binding": {
              "config": {
                "expression": "if({view.params.isUpdateTask}, \"Update Task\", \"Add Task\") "
              },
              "type": "expr"
            }
          }
        },
        "props": {
          "path": "WinterShelter/Tasks/Dashboard/Main/Edit/Cards/TaskPopupHeader",
          "useDefaultViewHeight": true
        },
        "type": "ia.display.view"
      },
      {
        "meta": {
          "name": "TaskCategory"
        },
        "position": {
          "basis": "149px",
          "shrink": 0
        },
        "propConfig": {
          "props.style.marginBottom": {
            "binding": {
              "config": {
                "path": "parent.custom.bottom-margin"
              },
              "type": "property"
            }
          },
          "props.style.marginLeft": {
            "binding": {
              "config": {
                "path": "parent.custom.left-margin"
              },
              "type": "property"
            }
          },
          "props.style.marginRight": {
            "binding": {
              "config": {
                "path": "parent.custom.right-margin"
              },
              "type": "property"
            }
          },
          "props.style.marginTop": {
            "binding": {
              "config": {
                "path": "parent.custom.top-margin"
              },
              "type": "property"
            }
          }
        },
        "props": {
          "params": {
            "Call": true,
            "Category": "Call",
            "Reminder": false,
            "ScheduleMeeting": false,
            "SendEmail": false,
            "ToDo": false,
            "TypeID": 2,
            "text": "Task Type"
          },
          "path": "WinterShelter/Tasks/Dashboard/Main/Edit/Cards/TaskTypeInput",
          "style": {
            "overflow": "visible"
          },
          "useDefaultViewHeight": true
        },
        "type": "ia.display.view"
      },
      {
        "meta": {
          "name": "Task"
        },
        "position": {
          "basis": "64px",
          "shrink": 0
        },
        "propConfig": {
          "props.params.inputText": {
            "binding": {
              "config": {
                "expression": "if({view.params.isUpdateTask}, {view.custom.taskData.title}, \"\")"
              },
              "type": "expr"
            }
          },
          "props.style.marginBottom": {
            "binding": {
              "config": {
                "path": "parent.custom.bottom-margin"
              },
              "type": "property"
            }
          },
          "props.style.marginLeft": {
            "binding": {
              "config": {
                "path": "parent.custom.left-margin"
              },
              "type": "property"
            }
          },
          "props.style.marginRight": {
            "binding": {
              "config": {
                "path": "parent.custom.right-margin"
              },
              "type": "property"
            }
          },
          "props.style.marginTop": {
            "binding": {
              "config": {
                "path": "parent.custom.top-margin"
              },
              "type": "property"
            }
          }
        },
        "props": {
          "params": {
            "area": true,
            "astrix": true,
            "astrixCorrection": -5,
            "placeholder": "enter task",
            "text": "Task"
          },
          "path": "WinterShelter/Tasks/Dashboard/Main/Edit/Cards/TextInput",
          "style": {
            "paddingTop": "10px"
          }
        },
        "type": "ia.display.view"
      },
      {
        "meta": {
          "name": "Congregation"
        },
        "position": {
          "basis": "60px",
          "shrink": 0
        },
        "propConfig": {
          "props.params.options": {
            "binding": {
              "config": {
                "queryPath": "WinterShelter/CongregationDropdownList"
              },
              "type": "query"
            }
          },
          "props.params.selectedId": {
            "binding": {
              "config": {
                "expression": "if({view.params.isUpdateTask}, {view.custom.taskData.congregationId}, \"\")"
              },
              "type": "expr"
            }
          },
          "props.style.marginBottom": {
            "binding": {
              "config": {
                "path": "parent.custom.bottom-margin"
              },
              "type": "property"
            }
          },
          "props.style.marginLeft": {
            "binding": {
              "config": {
                "path": "parent.custom.left-margin"
              },
              "type": "property"
            }
          },
          "props.style.marginRight": {
            "binding": {
              "config": {
                "path": "parent.custom.right-margin"
              },
              "type": "property"
            }
          },
          "props.style.marginTop": {
            "binding": {
              "config": {
                "path": "parent.custom.top-margin"
              },
              "type": "property"
            }
          }
        },
        "props": {
          "params": {
            "text": "Congregation"
          },
          "path": "WinterShelter/Tasks/Dashboard/Main/Edit/Cards/TextRepeat"
        },
        "type": "ia.display.view"
      },
      {
        "meta": {
          "name": "Notes"
        },
        "position": {
          "basis": "80px",
          "shrink": 0
        },
        "propConfig": {
          "props.params.inputText": {
            "binding": {
              "config": {
                "expression": "if({view.params.isUpdateTask},{view.custom.taskData.Notes} , \"\")"
              },
              "type": "expr"
            }
          },
          "props.style.marginBottom": {
            "binding": {
              "config": {
                "path": "parent.custom.bottom-margin"
              },
              "type": "property"
            }
          },
          "props.style.marginLeft": {
            "binding": {
              "config": {
                "path": "parent.custom.left-margin"
              },
              "type": "property"
            }
          },
          "props.style.marginRight": {
            "binding": {
              "config": {
                "path": "parent.custom.right-margin"
              },
              "type": "property"
            }
          },
          "props.style.marginTop": {
            "binding": {
              "config": {
                "path": "parent.custom.top-margin"
              },
              "type": "property"
            }
          }
        },
        "props": {
          "params": {
            "area": true,
            "astrix": false,
            "placeholder": "Enter task notes here",
            "text": "Notes"
          },
          "path": "WinterShelter/Tasks/Dashboard/Main/Edit/Cards/TextAreaInput",
          "style": {
            "paddingBottom": 5
          }
        },
        "type": "ia.display.view"
      },
      {
        "meta": {
          "name": "StaffAssigned"
        },
        "position": {
          "basis": "60px",
          "shrink": 0
        },
        "propConfig": {
          "props.params.options": {
            "binding": {
              "config": {
                "queryPath": "StaffDropdown"
              },
              "type": "query"
            }
          },
          "props.params.selectedId": {
            "binding": {
              "config": {
                "expression": "if({view.params.isUpdateTask}, {view.custom.taskData.staffId}, \"\")"
              },
              "type": "expr"
            }
          },
          "props.style.marginBottom": {
            "binding": {
              "config": {
                "path": "parent.custom.bottom-margin"
              },
              "type": "property"
            }
          },
          "props.style.marginLeft": {
            "binding": {
              "config": {
                "path": "parent.custom.left-margin"
              },
              "type": "property"
            }
          },
          "props.style.marginRight": {
            "binding": {
              "config": {
                "path": "parent.custom.right-margin"
              },
              "type": "property"
            }
          },
          "props.style.marginTop": {
            "binding": {
              "config": {
                "path": "parent.custom.top-margin"
              },
              "type": "property"
            }
          }
        },
        "props": {
          "params": {
            "text": "Staff Assigned"
          },
          "path": "WinterShelter/Tasks/Dashboard/Main/Edit/Cards/TextRepeat"
        },
        "type": "ia.display.view"
      },
      {
        "meta": {
          "name": "Priority"
        },
        "position": {
          "basis": "60px",
          "shrink": 0
        },
        "propConfig": {
          "props.params.options": {
            "binding": {
              "config": {
                "queryPath": "WinterShelter/Tasks/Priority"
              },
              "type": "query"
            }
          },
          "props.params.selectedId": {
            "binding": {
              "config": {
                "expression": "if({view.params.isUpdateTask}, {view.custom.taskData.priority}, \"\")"
              },
              "type": "expr"
            }
          },
          "props.style.marginBottom": {
            "binding": {
              "config": {
                "path": "parent.custom.bottom-margin"
              },
              "type": "property"
            }
          },
          "props.style.marginLeft": {
            "binding": {
              "config": {
                "path": "parent.custom.left-margin"
              },
              "type": "property"
            }
          },
          "props.style.marginRight": {
            "binding": {
              "config": {
                "path": "parent.custom.right-margin"
              },
              "type": "property"
            }
          },
          "props.style.marginTop": {
            "binding": {
              "config": {
                "path": "parent.custom.top-margin"
              },
              "type": "property"
            }
          }
        },
        "props": {
          "params": {
            "text": "Priority"
          },
          "path": "WinterShelter/Tasks/Dashboard/Main/Edit/Cards/TextRepeat"
        },
        "type": "ia.display.view"
      },
      {
        "meta": {
          "name": "Status"
        },
        "position": {
          "basis": "60px",
          "shrink": 0
        },
        "propConfig": {
          "props.params.options": {
            "binding": {
              "config": {
                "queryPath": "WinterShelter/Tasks/Status"
              },
              "type": "query"
            }
          },
          "props.params.selectedId": {
            "binding": {
              "config": {
                "expression": "if({view.params.isUpdateTask}, {view.custom.taskData.statusId}, \"\")"
              },
              "type": "expr"
            }
          },
          "props.style.marginBottom": {
            "binding": {
              "config": {
                "path": "parent.custom.bottom-margin"
              },
              "type": "property"
            }
          },
          "props.style.marginLeft": {
            "binding": {
              "config": {
                "path": "parent.custom.left-margin"
              },
              "type": "property"
            }
          },
          "props.style.marginRight": {
            "binding": {
              "config": {
                "path": "parent.custom.right-margin"
              },
              "type": "property"
            }
          },
          "props.style.marginTop": {
            "binding": {
              "config": {
                "path": "parent.custom.top-margin"
              },
              "type": "property"
            }
          }
        },
        "props": {
          "params": {
            "text": "Status"
          },
          "path": "WinterShelter/Tasks/Dashboard/Main/Edit/Cards/TextRepeat"
        },
        "type": "ia.display.view"
      },
      {
        "meta": {
          "name": "DueDate"
        },
        "position": {
          "basis": "150px"
        },
        "propConfig": {
          "props.params.inputDate": {
            "binding": {
              "config": {
                "expression": "if({view.params.isUpdateTask}, {view.custom.taskData.dueDate}, \u0027\u0027)"
              },
              "type": "expr"
            }
          },
          "props.style.marginBottom": {
            "binding": {
              "config": {
                "path": "parent.custom.bottom-margin"
              },
              "type": "property"
            }
          },
          "props.style.marginLeft": {
            "binding": {
              "config": {
                "path": "parent.custom.left-margin"
              },
              "type": "property"
            }
          },
          "props.style.marginRight": {
            "binding": {
              "config": {
                "path": "parent.custom.right-margin"
              },
              "type": "property"
            }
          },
          "props.style.marginTop": {
            "binding": {
              "config": {
                "path": "parent.custom.top-margin"
              },
              "type": "property"
            }
          }
        },
        "props": {
          "params": {
            "text": "Due Date"
          },
          "path": "WinterShelter/Tasks/Dashboard/Main/Edit/Cards/DateInput",
          "style": {
            "paddingBottom": "15px"
          }
        },
        "type": "ia.display.view"
      },
      {
        "meta": {
          "name": "Label"
        },
        "position": {
          "basis": "32px"
        },
        "propConfig": {
          "props.text": {
            "binding": {
              "config": {
                "path": "view.params.isUpdateTask"
              },
              "type": "property"
            }
          }
        },
        "props": {
          "style": {
            "color": "#000000"
          }
        },
        "type": "ia.display.label"
      },
      {
        "children": [
          {
            "events": {
              "component": {
                "onActionPerformed": [
                  {
                    "config": {
                      "script": "\t\t\n\t#define the variables\n\tcongregationId \u003d self.parent.parent.getChild(\"Congregation\").props.params.selectedId\n\ttypeId \u003d self.parent.parent.getChild(\"TaskCategory\").props.params.TypeID\n\ttitle \u003d self.parent.parent.getChild(\"Task\").props.params.inputText\n\tdueDate \u003d self.parent.parent.getChild(\"DueDate\").props.params.inputDate\n\tstaffId \u003d self.parent.parent.getChild(\"StaffAssigned\").props.params.selectedId\n\tpriority \u003d self.parent.parent.getChild(\"Priority\").props.params.selectedId\n\tstatusId \u003d self.parent.parent.getChild(\"Status\").props.params.selectedId\n\tnotes \u003d self.parent.parent.getChild(\"Notes\").props.params.inputText\n\ttimeCreated \u003d system.date.now()\n\t\n\t\n\t#Create the parameter list\n\tparams \u003d {\"congregationId\": congregationId, \"typeId\": typeId, \"title\": title, \"dueDate\": dueDate, \"staffId\": staffId, \"priority\": priority, \"statusId\": statusId, \"notes\": notes, \"timeCreated\": timeCreated}\n\t\n\t#run the named query\n\tresult \u003d system.db.runNamedQuery(\"WinterShelter/Tasks/TaskInsert\", params) \n\t\n\t\n\n\t\n\t"
                    },
                    "scope": "G",
                    "type": "script"
                  },
                  {
                    "config": {
                      "id": "AddTask",
                      "type": "close"
                    },
                    "scope": "C",
                    "type": "dock"
                  }
                ]
              }
            },
            "meta": {
              "name": "Create_Btn"
            },
            "position": {
              "basis": "150px"
            },
            "propConfig": {
              "props.text": {
                "binding": {
                  "config": {
                    "expression": "If({view.params.isUpdateTask}, \"Update\", \"Create\")"
                  },
                  "type": "expr"
                }
              }
            },
            "props": {
              "style": {
                "classes": "Buttons/Main",
                "marginLeft": 20,
                "marginRight": 20
              }
            },
            "type": "ia.input.button"
          },
          {
            "events": {
              "component": {
                "onActionPerformed": {
                  "config": {
                    "id": "AddTask",
                    "type": "close"
                  },
                  "scope": "C",
                  "type": "dock"
                }
              }
            },
            "meta": {
              "name": "Cancel_Btn"
            },
            "position": {
              "basis": "150px"
            },
            "props": {
              "style": {
                "classes": "Buttons/Btn_Orange_Outline",
                "marginLeft": 20,
                "marginRight": 20
              },
              "text": "Cancel"
            },
            "type": "ia.input.button"
          },
          {
            "events": {
              "component": {
                "onActionPerformed": [
                  {
                    "config": {
                      "script": "\t\n\tsystem.db.runNamedQuery(\"Calendar/DeleteEvent\", {\u0027eventID\u0027: self.view.params.eventId})\n\t\n\t#send a message that will reload the events in the calendar\n\tpayload \u003d None\n\tsystem.perspective.sendMessage(\u0027CreateCalendarEvent\u0027, payload, scope \u003d \u0027session\u0027)\n\tpayload \u003d {\u0027Refresh\u0027 : True}\n\tsystem.perspective.sendMessage(\u0027RefreshEventList\u0027, payload, scope \u003d \u0027session\u0027)"
                    },
                    "scope": "G",
                    "type": "script"
                  },
                  {
                    "config": {
                      "id": "AddEvent",
                      "type": "close"
                    },
                    "scope": "C",
                    "type": "dock"
                  }
                ]
              }
            },
            "meta": {
              "name": "Delete_Btn"
            },
            "position": {
              "basis": "150px"
            },
            "propConfig": {
              "meta.visible": {
                "binding": {
                  "config": {
                    "path": "view.params.isUpdateEvent"
                  },
                  "type": "property"
                }
              }
            },
            "props": {
              "style": {
                "classes": "Buttons/Delete",
                "marginLeft": 20,
                "marginRight": 20
              },
              "text": "Delete"
            },
            "type": "ia.input.button"
          }
        ],
        "meta": {
          "name": "FlexContainer Buttons"
        },
        "position": {
          "basis": "60px",
          "shrink": 0
        },
        "props": {
          "alignContent": "center",
          "style": {
            "borderBottomColor": "#e6e6e6",
            "borderBottomStyle": "solid",
            "borderBottomWidth": 1,
            "borderTopColor": "#E6E6E6",
            "borderTopStyle": "solid",
            "borderTopWidth": 1,
            "paddingBottom": "20px",
            "paddingTop": "5px"
          }
        },
        "type": "ia.container.flex"
      }
    ],
    "custom": {
      "bottom-margin": "5px",
      "left-margin": "25px",
      "right-margin": "25px",
      "top-margin": "5px"
    },
    "meta": {
      "name": "root"
    },
    "props": {
      "direction": "column",
      "style": {
        "classes": "Background/Default"
      }
    },
    "type": "ia.container.flex"
  }
}