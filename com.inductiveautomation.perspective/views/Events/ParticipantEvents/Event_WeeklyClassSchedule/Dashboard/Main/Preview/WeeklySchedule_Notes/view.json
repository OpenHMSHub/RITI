{
  "custom": {
    "locationList": [
      "Chapel",
      "Drexel House",
      "First Baptist Church",
      "Green Hill Church",
      "New",
      "Room-43",
      "Second Floor Art Room",
      "Temple",
      "Winter Shelter"
    ]
  },
  "params": {
    "date": "2023-06-06 10:30:00",
    "time": "value"
  },
  "propConfig": {
    "custom.locationList": {
      "binding": {
        "config": {
          "path": "view.params.date"
        },
        "transforms": [
          {
            "code": "\tvalue \u003d system.db.runNamedQuery(\u0027Event/ParticipantEvents/Registration/Get_Locations\u0027)\n\tlocationList \u003d []\n\tif value.getRowCount() \u003e 0:\n\t\tfor i in range(0,value.getRowCount()):\n\t\t\tlocation \u003d value.getValueAt(i,\u0027name\u0027)\n\t\t\tlocation_id \u003d value.getValueAt(i,\u0027id\u0027)\n\t\t\tlocationList.append(location)\n\treturn locationList",
            "type": "script"
          }
        ],
        "type": "property"
      },
      "persistent": true
    },
    "params.date": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.time": {
      "paramDirection": "input",
      "persistent": true
    }
  },
  "props": {
    "defaultSize": {
      "height": 1080,
      "width": 600
    }
  },
  "root": {
    "children": [
      {
        "meta": {
          "name": "EmbeddedView"
        },
        "position": {
          "shrink": 0
        },
        "props": {
          "params": {
            "Dock_To_Close": "WeeklySchedule",
            "text": "Weekly Schedule"
          },
          "path": "Events/ParticipantEvents/Registration/Dashboard/Cards/RegistrationHeader",
          "useDefaultViewHeight": true
        },
        "type": "ia.display.view"
      },
      {
        "meta": {
          "name": "Label"
        },
        "position": {
          "basis": "32px"
        },
        "propConfig": {
          "props.text": {
            "binding": {
              "config": {
                "path": "view.params.date"
              },
              "transforms": [
                {
                  "code": "\treturn \u0027Date: \u0027+ value",
                  "type": "script"
                }
              ],
              "type": "property"
            }
          }
        },
        "props": {
          "style": {
            "classes": "Table/Cell_Detail",
            "marginLeft": "20px"
          }
        },
        "type": "ia.display.label"
      },
      {
        "meta": {
          "name": "FlexRepeater"
        },
        "position": {
          "grow": 1
        },
        "propConfig": {
          "props.instances": {
            "binding": {
              "config": {
                "path": "view.custom.locationList"
              },
              "transforms": [
                {
                  "code": "\tinstances \u003d []\n\tdate \u003d self.view.params.date\n\tif len(value)\u003e0:\n\t\tfor i in range(0,len(value)):\n\t\t\tlocation \u003d value[i]\n\t\t\tr \u003d system.db.runPrepQuery(\"Select id from participant.EventLocations where name \u003d \u0027\" + str(location) + \"\u0027\") \n\t\t\tlocationId \u003d r.getValueAt(0,0)\n\t\t\tparameter \u003d {\u0027locationId\u0027:locationId,\u0027Time\u0027:date}\n\t\t\tresult \u003d system.db.runNamedQuery(\u0027Event/ParticipantEvents/WeeklySchedule/Get_WeeklyScheduleNoteForLocationId\u0027,parameter)\n\t\t\tif result.getRowCount()\u003e0:\n\t\t\t\tnote \u003d result.getValueAt(0,\u0027note\u0027)\n\t\t\telse:\n\t\t\t\tnote \u003d \u0027\u0027\n\t\t\tinstances.append({\u0027inputValue\u0027:note,\u0027title\u0027:\u0027Note for \u0027+str(location)})\n\treturn instances",
                  "type": "script"
                }
              ],
              "type": "property"
            }
          }
        },
        "props": {
          "direction": "column",
          "path": "Events/ParticipantEvents/Event_WeeklyClassSchedule/Dashboard/Main/Templates/WeeklyScheduleNote",
          "style": {
            "marginLeft": "20px"
          }
        },
        "type": "ia.display.flex-repeater"
      },
      {
        "children": [
          {
            "events": {
              "component": {
                "onActionPerformed": {
                  "config": {
                    "script": "\tinstances \u003d self.parent.parent.getChild(\"FlexRepeater\").props.instances\n\tdate \u003d self.view.params.date\n\ttime \u003d self.view.params.time\n\tfor i in range(0,len(instances)):\n\t\tone_instance \u003d instances[i]\n\t\tlocation \u003d (one_instance[\u0027title\u0027]).split(\u0027Note for \u0027)[-1]\n\t\tr \u003d system.db.runPrepQuery(\"Select id from participant.EventLocations where name \u003d \u0027\" + str(location) + \"\u0027\") \n\t\tlocationId \u003d r.getValueAt(0,0)\n\t\tnote \u003d one_instance[\u0027inputValue\u0027]\n\t\tparameter \u003d {\u0027locationId\u0027:locationId,\u0027Time\u0027:date}\n\t\tresult \u003d system.db.runNamedQuery(\u0027Event/ParticipantEvents/WeeklySchedule/Get_WeeklyScheduleNoteForLocationId\u0027,parameter)\n\t\tif result.getRowCount() \u003e 0:\n\t\t\tparameters \u003d {\u0027locationId\u0027:locationId,\u0027date\u0027:date,\u0027note\u0027:note}\n\t\t\tsystem.db.runNamedQuery(\u0027Event/ParticipantEvents/WeeklySchedule/Update_WeeklyScheduleNote\u0027,parameters)\n#\t\t\tsystem.perspective.print(\u0027update\u0027+str(parameters))\n\t\telse:\n\t\t\tparameters \u003d {\u0027time\u0027:time,\u0027date\u0027:date,\u0027locationId\u0027:locationId,\u0027note\u0027:note} \n\t\t\tsystem.db.runNamedQuery(\u0027Event/ParticipantEvents/WeeklySchedule/Insert_WeeklyScheduleNote\u0027,parameters)\n#\t\t\tsystem.perspective.print(\u0027insert\u0027+str(parameters))\n\tsystem.perspective.sendMessage(\u0027refreshTable\u0027,payload\u003d{}, scope\u003d\"session\")\n\tsystem.perspective.closeDock(\u0027WeeklySchedule\u0027)"
                  },
                  "scope": "G",
                  "type": "script"
                }
              }
            },
            "meta": {
              "name": "Button Save"
            },
            "position": {
              "basis": "120px",
              "shrink": 0
            },
            "props": {
              "style": {
                "classes": "Buttons/Main",
                "marginBottom": "15px",
                "marginLeft": "20px",
                "marginRight": "20px",
                "marginTop": "15px"
              },
              "text": "Save"
            },
            "type": "ia.input.button"
          },
          {
            "events": {
              "component": {
                "onActionPerformed": [
                  {
                    "config": {
                      "script": "\tsystem.perspective.closeDock(\u0027WeeklySchedule\u0027)\n\t"
                    },
                    "scope": "G",
                    "type": "script"
                  },
                  {
                    "config": {
                      "id": "RegisterParticipant",
                      "type": "close"
                    },
                    "scope": "C",
                    "type": "dock"
                  }
                ]
              }
            },
            "meta": {
              "name": "Button Cancel"
            },
            "position": {
              "basis": "120px",
              "shrink": 0
            },
            "props": {
              "style": {
                "classes": "Buttons/Secondary_Orange",
                "marginBottom": "15px",
                "marginTop": "15px"
              },
              "text": "Cancel"
            },
            "type": "ia.input.button"
          }
        ],
        "meta": {
          "name": "Root Actions"
        },
        "position": {
          "basis": "65px",
          "shrink": 0
        },
        "props": {
          "style": {
            "marginBottom": "20px"
          }
        },
        "type": "ia.container.flex"
      }
    ],
    "meta": {
      "name": "root"
    },
    "props": {
      "direction": "column",
      "style": {
        "classes": "Background/Default"
      }
    },
    "type": "ia.container.flex"
  }
}